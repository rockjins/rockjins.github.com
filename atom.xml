<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rockjins Blog</title>
  <subtitle>Mad World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-25T08:35:37.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>余震</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> 昨夜の梦 - 树 </title>
    <link href="http://yoursite.com/2017/05/24/2017-05-24-diary-tree-die/"/>
    <id>http://yoursite.com/2017/05/24/2017-05-24-diary-tree-die/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2017-05-25T08:35:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>还是这个熟悉的地方，一片迷雾，看不清周围的环境。</p>
<p>在这片荒芜的土地上有一棵孤独的小树苗，大概到我腰间的高度，相比它的粗细来说已经算是高挑的了。</p>
<p>树枝被一根粗麻绳绑着，麻绳的另一头绑在我的脖子上。</p>
<p>我站在一旁，手里拿着一根不知哪来的水管，不时给小树苗浇浇水，渴了就自己喝一口，我似乎从未如此惬意、满足。</p>
<p>小树长得很快，不一会就和我一样高了，我就像看自己孩子长大一样幸福，唯一不足就是绳子勒的有点紧。</p>
<p>时间过的很快，我想如果继续这样下去，我会不会被吊死在这。</p>
<p>我试着松一松颈上的绳子，才发现是死结，树上绑的也是死结。</p>
<a id="more"></a>
<p>其实我可以把这棵树连根拔起，但我舍不得，这是目光可及的唯一一棵树。</p>
<p>又过了一会，树干已经和我一样粗了，要拔起来已经不可能了，我恳求它不要再长高了，我害怕死了。</p>
<p>待续…</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是这个熟悉的地方，一片迷雾，看不清周围的环境。&lt;/p&gt;
&lt;p&gt;在这片荒芜的土地上有一棵孤独的小树苗，大概到我腰间的高度，相比它的粗细来说已经算是高挑的了。&lt;/p&gt;
&lt;p&gt;树枝被一根粗麻绳绑着，麻绳的另一头绑在我的脖子上。&lt;/p&gt;
&lt;p&gt;我站在一旁，手里拿着一根不知哪来的水管，不时给小树苗浇浇水，渴了就自己喝一口，我似乎从未如此惬意、满足。&lt;/p&gt;
&lt;p&gt;小树长得很快，不一会就和我一样高了，我就像看自己孩子长大一样幸福，唯一不足就是绳子勒的有点紧。&lt;/p&gt;
&lt;p&gt;时间过的很快，我想如果继续这样下去，我会不会被吊死在这。&lt;/p&gt;
&lt;p&gt;我试着松一松颈上的绳子，才发现是死结，树上绑的也是死结。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://yoursite.com/categories/Diary/"/>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title> 常见音乐相关中英文速查表（持续更新） </title>
    <link href="http://yoursite.com/2017/05/23/2017-05-23-music-english-chinese/"/>
    <id>http://yoursite.com/2017/05/23/2017-05-23-music-english-chinese/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-05-24T01:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>叫你不好好学英语</p>
</blockquote>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Analog</td>
<td>模拟(信号)</td>
<td>传输感很差</td>
</tr>
<tr>
<td>Acoustic</td>
<td>原生</td>
<td>相比处理过的音色而言</td>
</tr>
<tr>
<td>Acoustic Guitar</td>
<td>木吉他</td>
<td></td>
</tr>
<tr>
<td>AUX</td>
<td>辅助</td>
<td></td>
</tr>
<tr>
<td>AFL</td>
<td>推子后监听</td>
<td></td>
</tr>
<tr>
<td>Activity</td>
<td>动态</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bass</td>
<td>低音、贝斯</td>
<td></td>
</tr>
<tr>
<td>Bpm</td>
<td>速度、拍子</td>
<td>Beat Per Minute(每分钟拍子数)</td>
</tr>
<tr>
<td>Bar</td>
<td>小节</td>
<td></td>
</tr>
<tr>
<td>Breakdown</td>
<td>=&gt;</td>
<td>歌曲中夹杂着的具有“切断感”的伴奏</td>
</tr>
<tr>
<td>Birdge Plot</td>
<td>桥段</td>
<td>用于衔接歌曲段落</td>
</tr>
<tr>
<td>Brass</td>
<td>铜号</td>
<td>泛指铜乐器</td>
</tr>
<tr>
<td>Bell</td>
<td>金属铃</td>
<td></td>
</tr>
<tr>
<td>BAL/Balance</td>
<td>平衡</td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chord</td>
<td>和弦</td>
<td></td>
</tr>
<tr>
<td>Chorus</td>
<td>合唱</td>
<td></td>
</tr>
<tr>
<td>Chime</td>
<td>风铃</td>
<td></td>
</tr>
<tr>
<td>Clip</td>
<td>削波</td>
<td></td>
</tr>
<tr>
<td>Cue</td>
<td>监听、选听</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Digital</td>
<td>数字(信号)</td>
<td>这个概念被放大化并推广，当然，这也是一场技术革命</td>
</tr>
<tr>
<td>Delay</td>
<td>延迟</td>
<td></td>
</tr>
<tr>
<td>Drums</td>
<td>鼓</td>
<td></td>
</tr>
<tr>
<td>Drumstick</td>
<td>鼓棒</td>
<td></td>
</tr>
<tr>
<td>Display</td>
<td>显示</td>
<td></td>
</tr>
<tr>
<td>Dynamic</td>
<td>动态</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>EFF/Effects</td>
<td>效果</td>
<td>一般针对音频信号</td>
</tr>
<tr>
<td>Equalize</td>
<td>均衡</td>
<td></td>
</tr>
<tr>
<td>Export</td>
<td>导出</td>
<td></td>
</tr>
<tr>
<td>EP</td>
<td>电钢琴</td>
<td>Electric Piano</td>
</tr>
<tr>
<td>Electric Guitar</td>
<td>电吉他</td>
</tr>
<tr>
<td>Echo</td>
<td>回声</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Fade</td>
<td>过渡(音频)</td>
<td>常见的有：Fade In（淡入）、Fade Out（淡出）、Cross Fade（音频交叉过渡）</td>
</tr>
<tr>
<td>Flute</td>
<td>笛子</td>
<td></td>
</tr>
<tr>
<td>FX</td>
<td>特效</td>
<td></td>
</tr>
<tr>
<td>Fuse</td>
<td>保险</td>
<td></td>
</tr>
<tr>
<td>FT Switch</td>
<td>脚踏开关</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Groove</td>
<td>=&gt;</td>
<td>鼓各个元素之间的搭配和切换（节奏律动，和loop有相通的地方）</td>
</tr>
<tr>
<td>Gain</td>
<td>增益</td>
<td>控制输入信号的大小</td>
</tr>
<tr>
<td>Group</td>
<td>组</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Horn</td>
<td>号</td>
<td>泛指喇叭状的乐器</td>
</tr>
<tr>
<td>High</td>
<td>高音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Instrument</td>
<td>乐器</td>
<td></td>
</tr>
<tr>
<td>Import</td>
<td>导入</td>
<td></td>
</tr>
<tr>
<td>Intro</td>
<td>开头</td>
<td>歌曲的开头</td>
</tr>
<tr>
<td>Insert</td>
<td>插入</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keys</td>
<td>键盘(钢琴)</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loop</td>
<td>循环</td>
<td></td>
</tr>
<tr>
<td>Low</td>
<td>低音</td>
<td></td>
</tr>
<tr>
<td>L/Left</td>
<td>左声道</td>
<td></td>
</tr>
<tr>
<td>Limit</td>
<td>限幅</td>
<td></td>
</tr>
<tr>
<td>Lamp</td>
<td>灯</td>
<td></td>
</tr>
<tr>
<td>Level</td>
<td>电平</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Metronome</td>
<td>节拍器</td>
<td></td>
</tr>
<tr>
<td>Melody</td>
<td>旋律</td>
<td></td>
</tr>
<tr>
<td>Mix</td>
<td>混音</td>
<td></td>
</tr>
<tr>
<td>Mixer</td>
<td>混音器</td>
<td>音频缩混中的一个重要设备（设置），Cubase里按F3，可出现Mixer面板（硬/软）</td>
</tr>
<tr>
<td>Mix down</td>
<td>音频缩混</td>
<td>每个音频轨之间的关系和比例的调整</td>
</tr>
<tr>
<td>MID/Middle</td>
<td>中音</td>
<td></td>
</tr>
<tr>
<td>MON/Monitor</td>
<td>监听</td>
<td></td>
</tr>
<tr>
<td>Master</td>
<td>总路输出</td>
<td></td>
</tr>
<tr>
<td>Main</td>
<td>总</td>
<td></td>
</tr>
<tr>
<td>MONO</td>
<td>单声道</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="N"><a href="#N" class="headerlink" title="N"></a>N</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Note</td>
<td>音符、音调</td>
<td>口语把乐谱也叫做Note</td>
</tr>
</tbody>
</table>
<h2 id="O"><a href="#O" class="headerlink" title="O"></a>O</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Outro</td>
<td>结尾</td>
<td>歌曲的结尾(Ending)</td>
</tr>
<tr>
<td>Orch</td>
<td>交响类音色</td>
<td>Orchestra</td>
</tr>
<tr>
<td>Organ</td>
<td>风琴</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pitch</td>
<td>音高</td>
<td></td>
</tr>
<tr>
<td>Pan</td>
<td>声像定位</td>
<td><a href="http://www.audiobar.net/forum.php?mod=viewthread&amp;tid=141206&amp;extra=&amp;page=1" target="_blank" rel="external">Pan与Phase的区别</a></td>
</tr>
<tr>
<td>Phase</td>
<td>相位</td>
<td></td>
</tr>
<tr>
<td>Percussion</td>
<td>打击乐</td>
<td></td>
</tr>
<tr>
<td>Piano</td>
<td>钢琴</td>
<td></td>
</tr>
<tr>
<td>Plucked</td>
<td>弹拨乐</td>
<td></td>
</tr>
<tr>
<td>Pad</td>
<td>插入衰减</td>
<td></td>
</tr>
<tr>
<td>PFL</td>
<td>推子前监听</td>
<td></td>
</tr>
<tr>
<td>Phantom</td>
<td>幻象</td>
<td></td>
</tr>
<tr>
<td>Progressor</td>
<td>处理器</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Quantize</td>
<td>量化</td>
<td>即将手动输入的midi音符按照规定精度（1/4拍，1/8拍，1/16拍）对位到精确的拍子中，一般节奏类乐器多需要量化功能，但过于依赖此功能容易导致音乐过于死板（如钢琴，管乐，并不提倡使用此功能）</td>
</tr>
</tbody>
</table>
<h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>REV/Reverb</td>
<td>混响</td>
<td>使音频更有空间感，有的时候可以让死板的声音变得更真实，震撼</td>
</tr>
<tr>
<td>Rhythm</td>
<td>节奏</td>
<td></td>
</tr>
<tr>
<td>R/Right</td>
<td>右声道</td>
<td></td>
</tr>
<tr>
<td>RET/RTN/Return</td>
<td>返回</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Synth</td>
<td>合成</td>
<td></td>
</tr>
<tr>
<td>Synthesizer</td>
<td>合成器(硬/软)</td>
<td>一般指创造音色的软件或硬件</td>
</tr>
<tr>
<td>Sampling</td>
<td>采样</td>
<td>截取音频文件中的某部分然后把它取出来独立作成一个文件</td>
</tr>
<tr>
<td>Strings</td>
<td>弦乐类音色</td>
<td></td>
</tr>
<tr>
<td>Sub</td>
<td>超低音</td>
<td></td>
</tr>
<tr>
<td>Sax</td>
<td>萨克斯</td>
<td>Saxophone</td>
</tr>
<tr>
<td>Sensitivity</td>
<td>敏感度</td>
<td>控制输入信息大小</td>
</tr>
<tr>
<td>Signal</td>
<td>信号</td>
<td></td>
</tr>
<tr>
<td>Sum</td>
<td>总</td>
<td></td>
</tr>
<tr>
<td>Stereo</td>
<td>立体声</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tempo</td>
<td>速度、拍子</td>
<td></td>
</tr>
<tr>
<td>Tick</td>
<td>拍</td>
<td></td>
</tr>
<tr>
<td>Track</td>
<td>轨道</td>
<td>比如Audio Track(音频轨)、MIDI Track(MIDI轨)…</td>
</tr>
<tr>
<td>Trim</td>
<td>增益</td>
<td>控制输入信号大小</td>
</tr>
<tr>
<td>Tremble</td>
<td>比High更高的高音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="U"><a href="#U" class="headerlink" title="U"></a>U</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNBLA/Unbalance</td>
<td>非平衡</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="V"><a href="#V" class="headerlink" title="V"></a>V</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Volumn</td>
<td>音量</td>
<td></td>
</tr>
<tr>
<td>Violin</td>
<td>小提琴</td>
<td></td>
</tr>
<tr>
<td>Voice/Vocal</td>
<td>人声</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wave</td>
<td>wave文件格式</td>
<td>最常用的原始音频文件格式，保留着音频的最棒效果和质量</td>
</tr>
<tr>
<td>Wind</td>
<td>笛子和单簧管</td>
<td></td>
</tr>
<tr>
<td>Woodwind</td>
<td>木笛、竹笛</td>
<td></td>
</tr>
<tr>
<td>Woofer</td>
<td>低音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="X"><a href="#X" class="headerlink" title="X"></a>X</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;叫你不好好学英语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Analog&lt;/td&gt;
&lt;td&gt;模拟(信号)&lt;/td&gt;
&lt;td&gt;传输感很差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acoustic&lt;/td&gt;
&lt;td&gt;原生&lt;/td&gt;
&lt;td&gt;相比处理过的音色而言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acoustic Guitar&lt;/td&gt;
&lt;td&gt;木吉他&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AUX&lt;/td&gt;
&lt;td&gt;辅助&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AFL&lt;/td&gt;
&lt;td&gt;推子后监听&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Activity&lt;/td&gt;
&lt;td&gt;动态&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B&quot;&gt;&lt;/a&gt;B&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bass&lt;/td&gt;
&lt;td&gt;低音、贝斯&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bpm&lt;/td&gt;
&lt;td&gt;速度、拍子&lt;/td&gt;
&lt;td&gt;Beat Per Minute(每分钟拍子数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bar&lt;/td&gt;
&lt;td&gt;小节&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Breakdown&lt;/td&gt;
&lt;td&gt;=&amp;gt;&lt;/td&gt;
&lt;td&gt;歌曲中夹杂着的具有“切断感”的伴奏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Birdge Plot&lt;/td&gt;
&lt;td&gt;桥段&lt;/td&gt;
&lt;td&gt;用于衔接歌曲段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brass&lt;/td&gt;
&lt;td&gt;铜号&lt;/td&gt;
&lt;td&gt;泛指铜乐器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bell&lt;/td&gt;
&lt;td&gt;金属铃&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BAL/Balance&lt;/td&gt;
&lt;td&gt;平衡&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Music" scheme="http://yoursite.com/categories/Music/"/>
    
    
      <category term="Music" scheme="http://yoursite.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title> postMessage死循环与window.parent </title>
    <link href="http://yoursite.com/2017/05/19/2017-05-19-iframe-parent/"/>
    <id>http://yoursite.com/2017/05/19/2017-05-19-iframe-parent/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-05-19T09:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>轮回不止 生死不休</p>
</blockquote>
<p>上礼拜用postMessage进行iframe跨域通信(<a href="https://rockjins.js.org/2017/05/05/2017-05-05-iframe-cross-domain-Communication/" target="_blank" rel="external">使用postMessage解决iframe跨域通信问题</a>），因为写的代码不够健壮，其实说到底还是了解的知识点不够多，这个礼拜BUG就提上来了…</p>
<p>我相当于开发一个中间层框架，在我外层有一个大框架用<code>iframe</code>包着我，我再用<code>iframe</code>包着另一个页面，如图（配色好评）：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-a86c9ee478da30db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<p>按理说用<code>postMessage</code>是不会出问题的:我负责父页面和子页面之间的通信，他们把数据发送给我，我再替他们发送给对方。</p>
<p>但是这几个框架又是相互独立的，只有在特定的情景下才会这样嵌套，BUG就是在页面独立时出现的。</p>
<p>我们知道，获取父级<code>iframe</code>最简单的方法就是<code>window.parent</code>，这样可以拿到父级<code>iframe</code>的<code>window</code>对象，我大概就是这样发送<code>postMessage</code>给父级<code>iframe</code>的：</p>
<p><code>parent.postMessage(&#39;someMessage&#39;, &#39;*&#39;)</code></p>
<p>而且<code>postMessage</code>方法的调用是写在<code>onmessage</code>事件里的，也就是子页面发送消息过来，我监听到<code>onmessage</code>事件，就发送消息给父级<code>iframe</code>。</p>
<p>问题来了，之前说过框架之前都可以独立运行，如果没有父级<code>iframe</code>，只剩下我的框架和子框架，会发生什么呢？</p>
<p>大家来开心一下，就是这样子：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-14d4a7fba0330aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>而且最诡异的一点是，信息发起人的<code>HOST</code>并不是子页面,而是我自己？WTF?</p>
<p>我不信，跑去找子页面的开发负责人，问他是不是写了死循环不停发消息，对方很坦荡的把代码打开：“你自己看吧，哪来的死循环？”</p>
<p>好吧，回去自己找BUG，经过一个小时的埋头苦读，终于发现了问题所在。</p>
<p>我现在问大家一个问题：当你的页面处于最顶层，也就是外层没有<code>iframe</code>包裹你，求这时<code>window === window.parent</code>的返回值。</p>
<p>呵呵，居然是<code>true</code>，也就是说，当你的页面处于最顶层，<code>window.parent</code>指向你自己！</p>
<p>有图为证：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-b9ddba097441693c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>相当于当你处于最顶层时，你儿子就是你自己，你也可以是自己的爷爷，当然也可以是自己的曾孙，大概就是这个意思，希望大家以后不会遇到这个坑，其实也不算坑啦，说到底还是自己知识面不够广，连轮回这么简单的道理都不明白…</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;轮回不止 生死不休&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上礼拜用postMessage进行iframe跨域通信(&lt;a href=&quot;https://rockjins.js.org/2017/05/05/2017-05-05-iframe-cross-domain-Communication/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用postMessage解决iframe跨域通信问题&lt;/a&gt;），因为写的代码不够健壮，其实说到底还是了解的知识点不够多，这个礼拜BUG就提上来了…&lt;/p&gt;
&lt;p&gt;我相当于开发一个中间层框架，在我外层有一个大框架用&lt;code&gt;iframe&lt;/code&gt;包着我，我再用&lt;code&gt;iframe&lt;/code&gt;包着另一个页面，如图（配色好评）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2859850-a86c9ee478da30db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title> 如何兼容多种模块规范 </title>
    <link href="http://yoursite.com/2017/05/09/2017-05-09-compatible-module/"/>
    <id>http://yoursite.com/2017/05/09/2017-05-09-compatible-module/</id>
    <published>2017-05-08T16:00:00.000Z</published>
    <updated>2017-05-15T06:30:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果你也在开发模块，并且想让你的模块同时在前后端运行，那么这篇文章会让你有收获。</p>
</blockquote>
<p>模块运行的环境主要有四个: <code>Node</code> 、 <code>AMD</code> 、<code>CMD</code> 、 普通的浏览器环境</p>
<p>要同时兼容这四种环境，我们只需要找出每个环境独有的特点即可进行判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">name, definition</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 检测上下文环境是否为AMD、CMD</span></div><div class="line">  <span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">'function'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 检查上下文环境是否为Node</span></div><div class="line">    hasExports = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (hasDefine) &#123;</div><div class="line">    <span class="comment">// AMD环境、CMD环境则define(definition);</span></div><div class="line">    define(definition);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</div><div class="line">    <span class="comment">// 定义为普通Node模块 module.exports = definition();</span></div><div class="line">    <span class="built_in">module</span>.exports = definition();</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 将模块的执行结果赋值在window变量中，在浏览器中this等于window对象，this[name] = definition();</span></div><div class="line">    <span class="keyword">this</span>[name] = definition();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">  <span class="keyword">return</span> hello;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你也在开发模块，并且想让你的模块同时在前后端运行，那么这篇文章会让你有收获。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模块运行的环境主要有四个: &lt;code&gt;Node&lt;/code&gt; 、 &lt;code&gt;AMD&lt;/code&gt; 、&lt;code&gt;CMD&lt;/code&gt; 、 普通的浏览器环境&lt;/p&gt;
&lt;p&gt;要同时兼容这四种环境，我们只需要找出每个环境独有的特点即可进行判断：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name, definition&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 检测上下文环境是否为AMD、CMD&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasDefine = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; define === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检查上下文环境是否为Node&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hasExports = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasDefine) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// AMD环境、CMD环境则define(definition);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    define(definition);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasExports) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 定义为普通Node模块 module.exports = definition();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = definition();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将模块的执行结果赋值在window变量中，在浏览器中this等于window对象，this[name] = definition();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[name] = definition();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hello;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Module" scheme="http://yoursite.com/tags/Module/"/>
    
      <category term="AMD" scheme="http://yoursite.com/tags/AMD/"/>
    
      <category term="CMD" scheme="http://yoursite.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title> 使用postMessage解决iframe跨域通信问题 </title>
    <link href="http://yoursite.com/2017/05/05/2017-05-05-iframe-cross-domain-Communication/"/>
    <id>http://yoursite.com/2017/05/05/2017-05-05-iframe-cross-domain-Communication/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-05-15T06:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周碰到一个让人头疼的需求：要在我的web项目中嵌入另一个第三方web项目。第一时间想到的就是用<code>iframe</code>了，但问题来了，我和第三方web项目是有交互的，这就违反同源策略了，处理跨域问题是最让人头疼的事之一。</p>
<p>需求是这样的，在我的页面点击一些按钮，要实时反馈到<code>iframe</code>子页面，子页面再进行响应。</p>
<p>当时脑子里第一时间想到的解决方案是：用<code>NGINX</code>把两个项目代理到同一域名下。但这样似乎有点小题大做了，有没有更方便快捷的方法呢？</p>
<p>在<code>window</code>对象下有个<code>postMessage</code>方法，是专门用来解决跨域通信问题的。</p>
<a id="more"></a>
<p>关于<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">postMessage</a>的详细介绍请戳这里，不过MDN的文档太详细了，导致有些同学看完还是一脸懵逼，下面我们就来看看怎么用<code>postMessage</code>实现iframe跨域通信，当你会用了之后再回去看文档，感觉是完全不同的。</p>
<p>首先我们模拟场景，假设有两个不同源的页面，<code>iframePage.html</code>是<code>index.html</code>的子页面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"border:5px solid #333;"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"./iframePage.html"</span> <span class="attr">id</span>=<span class="string">'myframe'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iframePage --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"border:5px solid #333;"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is iframePage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在这两个iframe是无法通信，因为它们是不同源的（假设存在跨域问题），这时候就要用到<code>postMessage</code>了。</p>
<p>我们先试着从父页面向子页面发送一条消息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// idnex.html</span></div><div class="line"></div><div class="line"><span class="comment">//获取iframe元素</span></div><div class="line">iFrame = <span class="built_in">document</span>.getElementById(<span class="string">'myframe'</span>)</div><div class="line"></div><div class="line"><span class="comment">//iframe加载完毕后再发送消息，否则子页面接收不到message</span></div><div class="line">iFrame.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//iframe加载完立即发送一条消息</span></div><div class="line">  iFrame.contentWindow.postMessage(<span class="string">'MessageFromIndex1'</span>,<span class="string">'*'</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道<code>postMessage</code>是挂载在<code>window</code>对象上的，所以等<code>iframe</code>加载完毕后，用<code>iFrame.contentWindow</code>获取到<code>iframe</code>的<code>window</code>对象，然后调用<code>postMessage</code>方法，相当于给子页面发送了一条消息。</p>
<p><code>postMessage</code>方法第一个参数是要发送的数据，可以是任何原始类型的数据。</p>
<blockquote>
<p>Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)之前，第一个参数必须是一个字符串。</p>
</blockquote>
<p><code>postMessage</code>方法第二个参数可以设置要发送到哪个url，如果当前子页面的url和设置的不一致，则会发送失败，我们设置为<code>*</code>，代表所有url都允许发送。</p>
<p><code>postMessage</code>方法还有第三个参数，属于高级用法，这里不做讨论，可以稍后去<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">MDN</a>了解。</p>
<p>消息发送到<code>iframePage.html</code>，我们来接收message：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iframePage.html</span></div><div class="line"></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessageFromIndex</span> (<span class="params"> event </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'receiveMessageFromIndex'</span>, event )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听message事件</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessageFromIndex, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>我们只需要在子页面监听<code>message</code>事件，并且设置好回调函数即可，来看看打印出来的<code>event</code>：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-6ad5418cb923806c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><code>event</code>对象中的<code>data</code>属性存放着我们从父页面传过来的数据，就这么简单！</p>
<p>让我们再试试从子页面发送数据给父页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iframePage.html</span></div><div class="line"></div><div class="line"><span class="comment">//给父页面发送消息，data为对象</span></div><div class="line">parent.postMessage( &#123;<span class="attr">msg</span>: <span class="string">'MessageFromIframePage'</span>&#125;, <span class="string">'*'</span>);</div></pre></td></tr></table></figure>
<p>父页面接收数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.html</span></div><div class="line"></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessageFromIframePage</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'receiveMessageFromIframePage'</span>, event)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听message事件</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessageFromIframePage, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>我看看到，的确可以传输不同的数据，此时<code>data</code>为一个对象：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-f7c42766d4a274de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>大家可以到<a href="https://github.com/rockjins/postMessage-demo" target="_blank" rel="external">postMessage-demo</a>把代码clone下来运行试试看。</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周碰到一个让人头疼的需求：要在我的web项目中嵌入另一个第三方web项目。第一时间想到的就是用&lt;code&gt;iframe&lt;/code&gt;了，但问题来了，我和第三方web项目是有交互的，这就违反同源策略了，处理跨域问题是最让人头疼的事之一。&lt;/p&gt;
&lt;p&gt;需求是这样的，在我的页面点击一些按钮，要实时反馈到&lt;code&gt;iframe&lt;/code&gt;子页面，子页面再进行响应。&lt;/p&gt;
&lt;p&gt;当时脑子里第一时间想到的解决方案是：用&lt;code&gt;NGINX&lt;/code&gt;把两个项目代理到同一域名下。但这样似乎有点小题大做了，有没有更方便快捷的方法呢？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;window&lt;/code&gt;对象下有个&lt;code&gt;postMessage&lt;/code&gt;方法，是专门用来解决跨域通信问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
      <category term="Cross-Domain" scheme="http://yoursite.com/tags/Cross-Domain/"/>
    
  </entry>
  
  <entry>
    <title> Meteor: Error: Depending on unknown package xxx </title>
    <link href="http://yoursite.com/2017/04/12/2017-04-12-meteor-unknow-package/"/>
    <id>http://yoursite.com/2017/04/12/2017-04-12-meteor-unknow-package/</id>
    <published>2017-04-11T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Versions: 1.4.1</p>
<p>据我在GitHub issue上了解到的，许多人都碰到这个问题。</p>
<p>很多朋友程序运行时没问题，但build的时候就出现这个错误，我是这样解决的：</p>
<p>Meteor build 时找不到新添加的包解决办法：</p>
<p>1.执行<code>Meteor reset</code>；</p>
<p>2.删除<code>.meteor/local/resolver-result-cache.json</code>文件；</p>
<blockquote>
<p>这个文件包含所有package的缓存，在运行meteor build时，打包命令运行后会去读这个文件，但新添加的package并不在其中，所以会出现找不到新添加的package的问题。删除这个文件后，再次执行打包命令，程序发现找不到这个缓存文件，就会去重新读取所有的package，这时候就不存在找不到新添加的package的问题了。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Versions: 1.4.1&lt;/p&gt;
&lt;p&gt;据我在GitHub issue上了解到的，许多人都碰到这个问题。&lt;/p&gt;
&lt;p&gt;很多朋友程序运行时没问题，但build的时候就出现这个错误，我是这样解决的：&lt;/p&gt;
&lt;p&gt;Meteor build 时找不到新添加的包解决办法：&lt;/p&gt;
&lt;p&gt;1.执行&lt;code&gt;Meteor reset&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;2.删除&lt;code&gt;.meteor/local/resolver-result-cache.json&lt;/code&gt;文件；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件包含所有package的缓存，在运行meteor build时，打包命令运行后会去读这个文件，但新添加的package并不在其中，所以会出现找不到新添加的package的问题。删除这个文件后，再次执行打包命令，程序发现找不到这个缓存文件，就会去重新读取所有的package，这时候就不存在找不到新添加的package的问题了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Meteor" scheme="http://yoursite.com/tags/Meteor/"/>
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』METEOR教程(REACT VERSION)</title>
    <link href="http://yoursite.com/2017/04/05/2017-04-05-meteor-react-todo-app/"/>
    <id>http://yoursite.com/2017/04/05/2017-04-05-meteor-react-todo-app/</id>
    <published>2017-04-04T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://www.meteor.com/tutorials/react/creating-an-app" target="_blank" rel="external">Read the original</a></p>
<p>如果你有成为全栈的梦想，METEOR是个不错的平台。</p>
</blockquote>
<hr>
<h3 id="1-创建你的第一个App-Creating-your-first-app"><a href="#1-创建你的第一个App-Creating-your-first-app" class="headerlink" title="1.创建你的第一个App(Creating your first app)"></a>1.创建你的第一个App(Creating your first app)</h3><p>在这个教程中，我们会创建一个简单的App去管理待办事项列表并和他人合作完成任务。在完成这个项目后，你会对Meteor和它的项目结构有个基本的了解，。我们先创建App，打开命令行，键入以下命令：</p>
<p><em>译者注：前提是你安装了meteor,具体安装步骤可以<a href="http://guide-zh.ourmeteor.com/index.html#quickstart" target="_blank" rel="external">参考这里</a></em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor create simple-todos</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>它会创建一个名叫<code>simple-todos</code>的文件夹，里面包含我们开发meteor App所需要的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">client/main.js        # 在客户端的JavaScript入口文件</div><div class="line">client/main.html      # 定义视图容器</div><div class="line">client/main.css       # 定义App样式</div><div class="line">server/main.js        # 服务端的JavaScript入口文件</div><div class="line">package.json          # 用于安装和管理NPM包</div><div class="line">.meteor               # Meteor内部文件</div><div class="line">.gitignore            # git的管理文件</div></pre></td></tr></table></figure>
<p>运行这个新创建的App：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd simple-todos</div><div class="line">meteor npm install</div><div class="line">meteor</div></pre></td></tr></table></figure>
<p>打开你的浏览器并输入<code>http://localhost:3000</code>查看App是否运行成功。</p>
<p>在我们教程正式开始之前，你可以看看这个App的内部组成。比如，用你惯用的编辑器修改<code>client/main.html</code>文件中的<code>&lt;h1&gt;</code>内的文字。当你修改完毕保存文件时，浏览器会自动更新并展示新的内容，我们叫它<code>热拔插(hot code push)</code>。</p>
<h4 id="ES2015特性"><a href="#ES2015特性" class="headerlink" title="ES2015特性"></a>ES2015特性</h4><p>如果你还没有尝试过下个版本的JavaScript特性，初始App内的代码语法，还有整个教程使用的语法，都会让你感到怪异。这是因为Meteor支持大部分ES2015的特性，也就是下个版本的JavaScript。常用的特性包括：</p>
<ol>
<li><p>箭头函数：<code>(arg) =&gt; {return result;}</code></p>
</li>
<li><p>简写方法：<code>render() { ... }</code></p>
</li>
<li><p><code>const</code>和<code>let</code>取代<code>var</code></p>
</li>
</ol>
<p>你可以在<a href="https://docs.meteor.com/packages/ecmascript.html" target="_blank" rel="external">ecmascript docs</a>查看Meteor支持的新特性。更多关于ES2015的信息可以查看下面几篇文章：</p>
<ul>
<li><p><a href="http://git.io/es6features" target="_blank" rel="external">Luke Hoban’s “ES6 features”</a></p>
</li>
<li><p><a href="https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20%26%20beyond" target="_blank" rel="external">Kyle Simpson’s “You don’t know JS: ES6 and beyond”</a></p>
</li>
<li><p><a href="https://github.com/nzakas/understandinges6" target="_blank" rel="external">Nikolas C. Zakas “Understanding ECMAScript 6”</a></p>
</li>
</ul>
<p>现在你有一些如何开发Meteor App的经验了，让我们开始创建一个待办事项列表应用程序吧！如果你在这个教程中发现了bug或是错误，可以在<a href="https://github.com/rockjins/Meteor-Tutorials" target="_blank" rel="external">GitHub</a>上请发起<code>issue</code>或<code>PR</code>。</p>
<h3 id="2-使用React-Components定义视图层-Defining-views-with-React-components"><a href="#2-使用React-Components定义视图层-Defining-views-with-React-components" class="headerlink" title="2.使用React Components定义视图层(Defining views with React components)"></a>2.使用React Components定义视图层(Defining views with React components)</h3><p>我们把React作为视图层，让我们增加一些NPM packages，以便使用React进行开发。打开一个新的terminal在你的App根目录下，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor npm install --save react react-dom</div></pre></td></tr></table></figure>
<h4 id="替换初始化的代码"><a href="#替换初始化的代码" class="headerlink" title="替换初始化的代码"></a>替换初始化的代码</h4><p>在开始前，我们要替换App的初始代码。接下来我们讨论要做些什么。</p>
<p>第一步，替换初始化的HTML中的内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"render-target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二步，删除<code>client/main.js</code>，并创建三个新文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./client/main.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./imports/ui/App.jsx'</span>;</div><div class="line"></div><div class="line">Meteor.startup(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('render-target'));</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Reacr, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">'./Task.jsx'</span>;</div><div class="line"></div><div class="line"><span class="comment">//App组件 —— 代表整个App</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  getTasks() &#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'This is task 1'</span> &#125;,</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'This is task 2'</span> &#125;,</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'This is task 3'</span> &#125;,</div><div class="line">    ];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  renderTasks()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTasks().map.(<span class="function">(<span class="params">task</span>) =&gt;</span> &#123;</div><div class="line">      &lt;Task key=&#123;task._id&#125; task=&#123;task&#125; /&gt;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">          &#123;this.renderTasks()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./imports/ui/Task.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123;Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Task组件 —— 代表一个单独的todo条目</span></div><div class="line"><span class="keyword">export</span>  <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.props.task.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Task.propTypes = &#123;</div><div class="line">  <span class="comment">//这个组件通过React prop去得到并显示任务</span></div><div class="line">  <span class="comment">//我们可以用propTypes去指明哪些是必须的</span></div><div class="line">  task:PropTypes.object.isRequired,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们仅在我们的App中做了3件事：</p>
<ol>
<li><p>一个<code>App</code> React component</p>
</li>
<li><p>一个<code>Task</code> React component</p>
</li>
<li><p>一些初始化代码(在<code>client/main.jsx</code>客户端JavaScript入口文件中)，在<code>Meteor.startup</code>代码块中，我们知道当页面加载完毕后会执行里面的代码。这段代码加载其他组件，并渲染<code>#render-target</code>元素。</p>
</li>
</ol>
<p>你还可以在<a href="https://guide.meteor.com/structure.html" target="_blank" rel="external">Application Structure article</a>中了解import是如何工作的，还有如何组织你的代码。</p>
<p>在接下来的教程中，我们增加或更改代码，都会涉及到这些组件。</p>
<h4 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h4><p>在浏览器中，我们的app应该看起来像这个样子：</p>
<blockquote>
<p>Todo List</p>
<ul>
<li><p>This is task 1</p>
</li>
<li><p>This is task 2</p>
</li>
<li><p>This is task 3</p>
</li>
</ul>
</blockquote>
<p>如果你的app看起来不是这样，可以去<a href="https://github.com/meteor/simple-todos-react" target="_blank" rel="external">GitHub下载代码</a>，并和你自己的代码对比，找出不同的地方。</p>
<h4 id="HTML文件定义静态内容"><a href="#HTML文件定义静态内容" class="headerlink" title="HTML文件定义静态内容"></a>HTML文件定义静态内容</h4><p>Meteor会解析你app目录下的所有HTML文件，并识别三个顶级标签<code>&lt;head&gt;</code>,<code>&lt;body&gt;</code>和<code>&lt;template&gt;</code>。<code>&lt;head&gt;</code>标签内的所有内容会发送到客户端HTML的<code>head</code>标签，<code>&lt;body&gt;</code>标签内的所有内容也会发送到客户端HTML的<code>body</code>标签内，就和正常的HTML文件一样。</p>
<p>任何<code>&lt;template&gt;</code>标签内的内容会编译成Meteor Templates，你可以在HTML中用<code>{{>templateName}}</code>去调用，或在JavaScript中用<code>Template.templateName</code>去调用。在这个教程中，我们不会用到Meteor提供的模板特性，因为我们将用React去定义所有视图组件。</p>
<h4 id="用React定义视图组件"><a href="#用React定义视图组件" class="headerlink" title="用React定义视图组件"></a>用React定义视图组件</h4><p>在React中，视图组件是<code>React.Component</code>的子类(当我们用<code>import { Component } from &#39;react&#39;</code>的方式引入时)。你可以自由的在组件上添加方法，但有几个特殊的方法是不行的，比如<code>render</code>方法。组件通过其父组件的<code>props</code>属性，也可以接收数据。在这个教程中，我们会重温一些React的通用特性。你也可以查看<a href="https://facebook.github.io/react/tutorial/tutorial.html" target="_blank" rel="external">React官方教程</a>。</p>
<h4 id="重新审视JSX中的render方法"><a href="#重新审视JSX中的render方法" class="headerlink" title="重新审视JSX中的render方法"></a>重新审视JSX中的render方法</h4><p>在每个React Component中最重要的方法就是<code>render()</code>，它会访问React并得到被描述的HTML，然后把组件显示出来。这个HTML内容用JavaScript扩展语法写成，叫<code>JSX</code>,看起来就像在JavaScript中写HTML。你可以看到一些显而易见的差异：在JSX中，你要用<code>className</code>去代替<code>class</code>属性。还有一件很重要的事，它不是像Spacebars和Angular一样的模板语言，实际上它是直接编译成正常的JavaScript。<a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">查看更多JSX的信息</a>。</p>
<p>JSX支持<code>ecmascript</code>扩展包，所以它默认支持所有Meteor app的扩展包。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*./client/main.css*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: sans-serif;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#315481</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, #315481, #918e82 100%);</div><div class="line">  <span class="attribute">background-attachment</span>: fixed;</div><div class="line"></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#d2edf4</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, #d0edf5, #e1e5f0 100%);</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#login-buttons</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">10px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.new-task</span> <span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: transparent;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.new-task</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</div><div class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.delete</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">#eee</span> solid <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span> <span class="selector-class">.text</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.checked</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#888</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.checked</span> <span class="selector-class">.text</span> &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: line-through;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.private</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> <span class="selector-class">.hide-completed</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.toggle-private</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">600px</span>) &#123;</div><div class="line">  <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">15px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.search</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.new-task</span> <span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加上面的CSS代码到你的项目中，这个首页看起来会很棒。在你的浏览器中检查样式是否加载进去了。</p>
<h3 id="3-在集合中储存任务-Storing-tasks-in-a-collection"><a href="#3-在集合中储存任务-Storing-tasks-in-a-collection" class="headerlink" title="3.在集合中储存任务(Storing tasks in a collection)"></a>3.在集合中储存任务(Storing tasks in a collection)</h3><p>Meteor使用集合(collections)储存持久化数据。在Meteor中，集合的特殊之处在于，可以同时在服务端和客户端读取数据，这让我们很容易编写视图层逻辑，而不需要编写太多服务端代码。集合会自动更新自身，所以一个视图组件配合集合，可以自动的显示最新的数据。</p>
<p>你可以在Meteor教程中阅读更多<a href="http://guide.meteor.com/collections.html" target="_blank" rel="external">有关集合的文章</a>。</p>
<p>创建一个集合很简单，只需要在你的代码中调用<code>MyCollection = new Mongo.Collection(&quot;my-collection&quot;);</code>。在服务端，这会创建一个名叫<code>my-collection</code>的MongoDB集合，它会创建一个缓存去链接服务端的集合。我们将在第12章节了解更多客户端和服务端的区别，我们假设整个数据库都运行在客户端，并开始编写我们的代码。</p>
<p>我们创建一个Mongo集合来定义新的<code>tasks</code>模块，并导出它：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/api/tasks.js</span></div><div class="line"><span class="keyword">import</span> &#123; Mongo &#125; <span class="keyword">from</span> <span class="string">'meteor/mongo'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> Tasks = <span class="keyword">new</span> Mongo.Collection(<span class="string">'tasks'</span>);</div></pre></td></tr></table></figure>
<p>注意，我们把这个文件放在了新的目录<code>imports/api</code>下。这是一个合适的位置，用于放置和API有关的文件。我们在这里抛出”collections”，之后读取它并添加一个”publications”，再用”methods”去编辑它。你可以在Meteor指南中了解更多有关如何<a href="http://guide.meteor.com/structure.html" target="_blank" rel="external">在APP中组织你的代码结构</a>。</p>
<p>我们需要在服务端导入这个模块（这将创建MongoDB集合，并设置管道得到数据给Client）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//server/main.js</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../imports/api/tasks.js'</span>;</div></pre></td></tr></table></figure>
<h4 id="在React-component中使用集合数据"><a href="#在React-component中使用集合数据" class="headerlink" title="在React component中使用集合数据"></a>在React component中使用集合数据</h4><p>我们使用Atmosphere包:<code>react-meteor-data</code>，它会创建一个数据容器，把Meteor的响应式数据供给给React component。</p>
<p>我们要安装一个Meteor包，以及它要使用到的NPM包，<code>react-addons-pure-render-mixin</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor npm install --save react-addons-pure-render-mixin</div><div class="line">meteor add react-meteor-data</div></pre></td></tr></table></figure>
<p>在使用<code>react-meteor-data</code>前，我们需要使用<code>createContainer</code>高阶组件把我们的组件包裹在一个容器中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">'meteor/react-meteor-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">'./Task.jsx'</span>;</div><div class="line"></div><div class="line"><span class="comment">//App容器 - 代表整个App</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span>  <span class="title">Component</span> </span>&#123;</div><div class="line">  renderTasks() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.tasks.map(<span class="function">(<span class="params">task</span>) =&gt;</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Task</span> <span class="attr">key</span>=<span class="string">&#123;task._id&#125;</span> <span class="attr">task</span>=<span class="string">&#123;task&#125;</span> /&gt;</span></span></div><div class="line">    ));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">          &#123;this.renderTasks()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">App.propTypes = &#123;</div><div class="line">  tasks: PropTypes.array.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default createContainer(() =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    tasks: Tasks.find(&#123;&#125;).fetch(),</div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<p>这个被包裹的<code>App</code>组件从<code>Tasks</code>集合中提取tasks，并将它们用作App底层组件，它们被包装为<code>tasks</code> prop。它以响应的方式运行，当数据库内容改变，App会重新渲染，我们可以立刻看到！</p>
<p>当你对代码进行以上更改时，你会发现之前在代办列表中的任务消失了。因为我们现在的数据库是空的，我们需要插入一些任务。</p>
<h4 id="从服务端数据库控制台插入任务"><a href="#从服务端数据库控制台插入任务" class="headerlink" title="从服务端数据库控制台插入任务"></a>从服务端数据库控制台插入任务</h4><p>我们称集合中的每一项为文档。使用服务端数据库控制台插入一些文档到我们的集合中。在一个新的terminal中进入你的app项目目录，并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor mongo</div></pre></td></tr></table></figure>
<p>这会在你app的本地开发数据库中打开一个控制台。键入下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.tasks.insert(&#123; text: &quot;Hello world!&quot;, createdAt: new Date() &#125;);</div></pre></td></tr></table></figure>
<p>在浏览器中，你可以立刻看到用户界面更新并展示了这个新的任务。可以看到，我们不需要编写任何代码将服务端数据库连接到前端——一切都是自动的。</p>
<p>用同样的方法从数据库控制台添加一些不同的任务吧。在下一章节，我们将了解怎样在app用户界面增加一些功能，比如不使用数据库控制台去增加任务。</p>
<h3 id="4-使用表单添加任务"><a href="#4-使用表单添加任务" class="headerlink" title="4.使用表单添加任务"></a>4.使用表单添加任务</h3><p>在这一章节，我们将增加一个表单字段，给用户在列表中添加任务。</p>
<p>首先，让我们增加一个表单域到<code>App</code>组件中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line">&lt;div className=<span class="string">"container"</span>&gt;</div><div class="line">  &lt;header&gt;</div><div class="line">    &lt;h1&gt;Todo List&lt;/h1&gt;</div><div class="line"></div><div class="line">    &lt;form className="new-task" onSubmit=&#123;this.handleSubmit.bind(this)&#125; &gt;</div><div class="line">      &lt;input</div><div class="line">        type="text"</div><div class="line">        ref="textInput"</div><div class="line">        placeholder="Type to add new tasks"</div><div class="line">      /&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">  &lt;/header&gt;</div><div class="line"></div><div class="line">  &lt;ul&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>提示：JSX中添加注释的方法：{/* … */}</p>
</blockquote>
<p>你可以看到<code>form</code>元素有一个<code>onSubmit</code>属性，它映射到组件的<code>handleSubmit</code>方法。在React中，你可以这样监听浏览器事件，就像表单上的submit事件。<code>input</code>元素有一个<code>ref</code>属性，它能让我们稍后轻松的访问到这个元素。</p>
<p>让我们添加<code>handleSubmit</code>放到到<code>App</code>组件里：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">'meteor/react-meteor-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"><span class="comment">//...省略一些代码...</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    event.preventDefault();</div><div class="line"></div><div class="line">    <span class="comment">// 通过React的ref拿到文本字段</span></div><div class="line">    <span class="keyword">const</span> text = ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value.trim();</div><div class="line"></div><div class="line">    Tasks.insert(&#123;</div><div class="line">      text,</div><div class="line">      <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">// 当前时间</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 清空表单</span></div><div class="line">    ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//...省略一些代码...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你的App有一个新的表单字段了。只需要在输入框输入文本，并按下回车键，就可以添加任务了。如果你打开一个新的浏览器窗口并再打开这个app，你会发现列表会自动自动在所有客户端同步。</p>
<h4 id="在React中监听事件"><a href="#在React中监听事件" class="headerlink" title="在React中监听事件"></a>在React中监听事件</h4><p>就如你看到的，你可以通过参考组件上切确的方法来管理DOM事件。在事件管理器内部，你可以通过使用<code>React.findDOMNode</code>去拿到带有<code>ref</code>属性的元素。查看更多React支持的事件类型，以及事件系统如何运行的，请参考<a href="https://facebook.github.io/react/docs/events.html" target="_blank" rel="external">React文档</a>。</p>
<h4 id="插入集合"><a href="#插入集合" class="headerlink" title="插入集合"></a>插入集合</h4><p>在事件管理器内部，我们通过调用<code>Tasks.insert</code>添加了一个任务到<code>tasks</code>集合，因为我们不用为集合定义一个模式，所以可以添加任何属性到任务对象，比如创建时间。</p>
<p>客户端可以添加任何数据到数据库，这样并不安全，但目前来说一切都没问题。在第10章节，我们将学习怎样安全并有限制的将数据插入到数据库中。</p>
<h4 id="储存我们的任务"><a href="#储存我们的任务" class="headerlink" title="储存我们的任务"></a>储存我们的任务</h4><p>目前，我们最新的任务在列表的最底下。这对任务列表来说不是很好，我们希望看到最新的任务在最前面。</p>
<p>我们可以通过使用<code>createdAt</code>字段自动排序来解决此问题。只需在包裹<code>App</code>组件的数据容器内的<code>find</code>方法调用时添加一个排序选项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createContainer(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">tasks</span>: Tasks.find(&#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">createdAt</span>: <span class="number">-1</span> &#125; &#125;).fetch(),</div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<p>回到浏览器，并确认是否如期运行：任何新添加的任务都会出现在列表的最顶端，而不是底部。</p>
<p>在下一章节，我们会增加一些十分重要的待办事项列表特性：检查任务和删除任务。</p>
<h3 id="5-检查任务和删除任务"><a href="#5-检查任务和删除任务" class="headerlink" title="5.检查任务和删除任务"></a>5.检查任务和删除任务</h3><p>到目前为止，我们还仅仅只能插入文档。现在，我们将学习怎么去更新和删除它们。</p>
<p>让我们添加两个新元素到我们的组件，一个复选框和一个删除按钮，以及它们对应的时间管理器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Task组件 - 代表一个单独的代办事项</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  toggleChecked() &#123;</div><div class="line">    <span class="comment">// 设置checked属性和当前值相反</span></div><div class="line">    Tasks.update(<span class="keyword">this</span>.props.task._id, &#123;</div><div class="line">      <span class="attr">$set</span>: &#123; <span class="attr">checked</span>: !<span class="keyword">this</span>.props.task.checked &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  deleteThisTask() &#123;</div><div class="line">    Tasks.remove(<span class="keyword">this</span>.props.task._id);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//当修改checked后，给tasks一个不同的className</span></div><div class="line">    <span class="comment">// 以便我们更好的在CSS中修改样式</span></div><div class="line">    <span class="keyword">const</span> taskClassName = <span class="keyword">this</span>.props.task.checked ? <span class="string">'checked'</span> : <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;taskClassName&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"delete"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteThisTask.bind(this)&#125;</span>&gt;</span></div><div class="line">          &amp;times;</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">input</span></span></div><div class="line">          <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">          <span class="attr">readOnly</span></div><div class="line">          <span class="attr">checked</span>=<span class="string">&#123;this.props.task.checked&#125;</span></div><div class="line">          <span class="attr">onClick</span>=<span class="string">&#123;this.toggleChecked.bind(this)&#125;</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"text"</span>&gt;</span>&#123;this.props.task.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>在上面代码中，我们调用<code>Tasks.update</code>去检查一个任务。</p>
<p>集合上的更新功能需要两个参数。第一个参数是标识集合子集的选择器，第二个是一个update参数，用来指定要对匹配对象做什么。</p>
<p>在这个例子中，选择器就是相对应的任务的<code>_id</code>，update参数用<code>$set</code>去切换<code>checked</code>字段，这将代表任务是否已经完成。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>上面代码使用<code>Tasks.remove</code>去删除任务。<code>remove</code>函数只需要一个参数，一个选择器，用于确定要在集合中删除的项目。</p>
<h3 id="6-在Android或iOS上运行app"><a href="#6-在Android或iOS上运行app" class="headerlink" title="6.在Android或iOS上运行app"></a>6.在Android或iOS上运行app</h3><blockquote>
<p>目前，Meteor并不支持在Windows上进行移动端打包。如果你是Windows用户，请忽略这一章节。</p>
</blockquote>
<p>目前为止，我们构建了我们的app，并在浏览器上对它进行测试，但是Meteor是为了跨平台而设计的——只需要几句命令，就可以把你的待办事项列表网站构建成Android或iOS应用。</p>
<p>Meteor可以轻松的设置所有构建app所需的工具，但是下载所有程序可能需要一段时间——Android大约300M，iOS要安装Xcode大约2GB，如果你不希望下载这些工具，你可以调到下一个章节。</p>
<h4 id="在iOS模拟器上运行"><a href="#在iOS模拟器上运行" class="headerlink" title="在iOS模拟器上运行"></a>在iOS模拟器上运行</h4><p>如果你有Mac，你可以运行在iOS模拟器上运行app。</p>
<p>进入到app目录并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor install-sdk ios</div></pre></td></tr></table></figure>
<p>它会安装你构建iOS app所要用到的所有所有配置。当上面安装完成，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor add-platform ios</div><div class="line">meteor run ios</div></pre></td></tr></table></figure>
<p>你会看到iOS模拟器弹出，并且你的app在里面运行。</p>
<h4 id="在Android模拟器上运行"><a href="#在Android模拟器上运行" class="headerlink" title="在Android模拟器上运行"></a>在Android模拟器上运行</h4><p>在terminal中进入你的app目录并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor install-sdk android</div></pre></td></tr></table></figure>
<p>它会安装你构建Android app所要用到的所有所有配置。当上面安装完成，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor add-platform android</div></pre></td></tr></table></figure>
<p>同意协议条款，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run android</div></pre></td></tr></table></figure>
<p>在一些初始化后，我们将看到一个Android模拟器弹出，你的app在原生生Android容器里运行。</p>
<p>模拟器运行可能会有一些慢，所以如果你想看到应用真实的情况，还得到真实设备上使用。</p>
<h4 id="在Android设备上运行"><a href="#在Android设备上运行" class="headerlink" title="在Android设备上运行"></a>在Android设备上运行</h4><p>首先，完成上述的所有Android设置步骤。然后，确定你的设备有<a href="https://developer.android.com/studio/run/device.html#developer-device-options" target="_blank" rel="external">USB调试模式</a>而且手机插进了电脑的USB插口。此外，你必须在真机运行前关闭安卓模拟器。</p>
<p>接下来，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run android-device</div></pre></td></tr></table></figure>
<p>你的app将会构建并安装到你的设备上。</p>
<h4 id="在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）"><a href="#在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）" class="headerlink" title="在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）"></a>在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）</h4><p>如果你有苹果开发者账号，你也可以在iOS设备上运行你的app。键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run ios-device</div></pre></td></tr></table></figure>
<p>这将会为你的iOS app项目打开Xcode。你可以使用Xcode让app运行在任何Xcode支持的设备或模拟器上。</p>
<p>现在我们看到了在移动端运行我们的app多么容易，让我们给app再添加一些特性。</p>
<h3 id="7-在组件状态中存储临时的用户界面数据"><a href="#7-在组件状态中存储临时的用户界面数据" class="headerlink" title="7.在组件状态中存储临时的用户界面数据"></a>7.在组件状态中存储临时的用户界面数据</h3><p>在这一章节，我们将在app中添加客户端数据过滤功能，以便用户选择只查看未完成的任务。我们将学习怎样使用React的component state去存储只在客户端用到的临时数据。</p>
<p>首先，我们需要增加一个复选框到<code>App</code>组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">&lt;header&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="comment">//新添加内容</span></div><div class="line">  &lt;label className=<span class="string">"hide-completed"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span></span></span></div><div class="line">      <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">      <span class="attr">readOnly</span></div><div class="line">      <span class="attr">checked</span>=<span class="string">&#123;this.state.hideCompleted&#125;</span></div><div class="line">      <span class="attr">onClick</span>=<span class="string">&#123;this.toggleHideCompleted.bind(this)&#125;</span></div><div class="line">    /&gt;</div><div class="line">    Hide Completed Tasks</div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="comment">//新添加内容</span></div></pre></td></tr></table></figure>
<p>你可以看到它从<code>this.state.hideCompleted</code>读取数据。React有一个特殊的字段叫<code>state</code>，你可以把组件数据存储和封装在里面。我们需要在组件的构造器中初始化<code>this.state.hideCompleted</code>的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">hideCompleted</span>: <span class="literal">false</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以事件管理器中调用<code>this.setState</code>去更新<code>this.state</code>，这将异步更新state属性，并重新渲染组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">    ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">  toggleHideCompleted() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">hideCompleted</span>: !<span class="keyword">this</span>.state.hideCompleted,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"><span class="comment">//新添加的内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>this.state.hideCompleted</code>为true时，我们需要更新<code>renderTasks</code>方法去过滤已经完成的任务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">renderTasks() &#123;</div><div class="line">  <span class="keyword">let</span> filteredTasks = <span class="keyword">this</span>.props.tasks;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.hideCompleted) &#123;</div><div class="line">    filteredTasks = filteredTasks.filter(<span class="function"><span class="params">task</span> =&gt;</span> !task.checked);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> filteredTasks.map(<span class="function">(<span class="params">task</span>) =&gt;</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Task</span> <span class="attr">key</span>=<span class="string">&#123;task._id&#125;</span> <span class="attr">task</span>=<span class="string">&#123;task&#125;</span> /&gt;</span></span></div><div class="line">  ));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你现在选择复选框，任务列表不会再展现已经完成的任务了。</p>
<h4 id="新的特性：显示未完成任务的数目"><a href="#新的特性：显示未完成任务的数目" class="headerlink" title="新的特性：显示未完成任务的数目"></a>新的特性：显示未完成任务的数目</h4><p>现在我们要写一个查询条件，用来过滤掉已经完成的任务。我们也可以用相同的查询来显示已完成的任务总数。为此，我们需要在我们的数据容器中拿到一个计数，并在<code>render</code>方法中添加一行代码。因为我们已经有客户端集合中的数据，增加这个额外的计数不需要向服务端发起任何请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createContainer(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">tasks</span>: Tasks.find(&#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">createdAt</span>: <span class="number">-1</span> &#125; &#125;).fetch(),</div><div class="line">    <span class="comment">//新添加的的内容</span></div><div class="line">    incompleteCount: Tasks.find(&#123; <span class="attr">checked</span>: &#123; <span class="attr">$ne</span>: <span class="literal">true</span> &#125; &#125;).count(),</div><div class="line">    <span class="comment">//新添加的的内容</span></div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> (</div><div class="line">  &lt;div className="container"&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">      //新添加的的内容</div><div class="line">      &lt;h1&gt;Todo List (&#123;this.props.incompleteCount&#125;)&lt;/h1&gt;</div><div class="line">      //新添加的的内容</div><div class="line">      &lt;label className="hide-completed"&gt;</div><div class="line">        &lt;input</div><div class="line">//...省略一些代码...</div><div class="line"></div><div class="line">App.propTypes = &#123;</div><div class="line">  tasks: PropTypes.array.isRequired,</div><div class="line">  //新添加的的内容</div><div class="line">  incompleteCount: PropTypes.number.isRequired,</div><div class="line">  //新添加的的内容</div><div class="line">&#125;;</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="8-添加账户"><a href="#8-添加账户" class="headerlink" title="8.添加账户"></a>8.添加账户</h3><p>Meteor自带一个账户系统和用户登录接口，让你在短短几分钟就能添加多用户功能到你的app内。</p>
<blockquote>
<p>目前，Meteor使用Blaze UI组件作为它的默认UI引擎。在未来，也可能会有专为React定制的组件。</p>
</blockquote>
<p>开启账户系统和UI，我们需要增加相对应的包。在你的app目录，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor add accounts-ui accounts-password</div></pre></td></tr></table></figure>
<h4 id="在React中写Blaze组件"><a href="#在React中写Blaze组件" class="headerlink" title="在React中写Blaze组件"></a>在React中写Blaze组件</h4><p>要通过<code>accounts-ui</code>包使用Blaze UI，我们需要把它包裹在React组件中。这样让我们在新文件中创建了一个叫<code>AccountsUIWrapper</code>的新组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/AccountsUIWrapper.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Template &#125; <span class="keyword">from</span> <span class="string">'meteor/templating'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Blaze &#125; <span class="keyword">from</span> <span class="string">'meteor/blaze'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountsUIWrapper</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="comment">//使用Meteor Blaze渲染登录按钮</span></div><div class="line">    <span class="keyword">this</span>.view = Blaze.render(Template.loginButtons,</div><div class="line">      ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.container));</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="comment">//清除Blaze视图</span></div><div class="line">    Blaze.remove(<span class="keyword">this</span>.view);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//只渲染一个占位符容器即可</span></div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"container"</span> /&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在App中定义刚刚创建的组件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//imports/ui/App.jsx</div><div class="line"></div><div class="line">import &#123; Tasks &#125; from '../api/tasks.js';</div><div class="line"></div><div class="line">import Task from './Task.jsx';</div><div class="line">//...新添加的代码...</div><div class="line">import AccountsUIWrapper from './AccountsUIWrapper.jsx';</div><div class="line">//...新添加的代码...</div><div class="line"></div><div class="line">class App extends Component &#123;</div><div class="line">//...省略一些代码...</div><div class="line">            Hide Completed Tasks</div><div class="line">          &lt;/label&gt;</div><div class="line">          //...新添加的代码...</div><div class="line">          &lt;AccountsUIWrapper /&gt;</div><div class="line">          //...新添加的代码...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，增加下列代码去配置accounts UI，用username去替换email address:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/startup/accounts-config.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Accounts &#125; <span class="keyword">from</span> <span class="string">'meteor/accounts-base'</span>;</div><div class="line"></div><div class="line">Accounts.ui.config(&#123;</div><div class="line">  <span class="attr">passwordSignupFields</span>: <span class="string">'USERNAME_ONLY'</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同时我们需要在客户端入口导入这个配置文件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//client/main.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="comment">//...新添加的代码...</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../imports/startup/accounts-config.js'</span>;</div><div class="line"><span class="comment">//...新添加的代码...</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../imports/ui/App.jsx'</span>;</div></pre></td></tr></table></figure>
<h4 id="添加用户相关功能"><a href="#添加用户相关功能" class="headerlink" title="添加用户相关功能"></a>添加用户相关功能</h4><blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.meteor.com/tutorials/react/creating-an-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你有成为全栈的梦想，METEOR是个不错的平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-创建你的第一个App-Creating-your-first-app&quot;&gt;&lt;a href=&quot;#1-创建你的第一个App-Creating-your-first-app&quot; class=&quot;headerlink&quot; title=&quot;1.创建你的第一个App(Creating your first app)&quot;&gt;&lt;/a&gt;1.创建你的第一个App(Creating your first app)&lt;/h3&gt;&lt;p&gt;在这个教程中，我们会创建一个简单的App去管理待办事项列表并和他人合作完成任务。在完成这个项目后，你会对Meteor和它的项目结构有个基本的了解，。我们先创建App，打开命令行，键入以下命令：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：前提是你安装了meteor,具体安装步骤可以&lt;a href=&quot;http://guide-zh.ourmeteor.com/index.html#quickstart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考这里&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;meteor create simple-todos&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
      <category term="Meteor" scheme="http://yoursite.com/tags/Meteor/"/>
    
      <category term="Full-Stack" scheme="http://yoursite.com/tags/Full-Stack/"/>
    
  </entry>
  
  <entry>
    <title> You Don&#39;t Need jQuery - Query Selector </title>
    <link href="http://yoursite.com/2017/04/01/2017-04-01-you-dont-need-jq-query-selector/"/>
    <id>http://yoursite.com/2017/04/01/2017-04-01-you-dont-need-jq-query-selector/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>GitHub地址：<a href="https://github.com/oneuijs/You-Dont-Need-jQuery" target="_blank" rel="external">https://github.com/oneuijs/You-Dont-Need-jQuery</a></p>
</blockquote>
<p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p>
<ul>
<li><p><code>document.querySelector</code> 返回第一个匹配的 Element</p>
</li>
<li><p><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</p>
</li>
<li><p>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></p>
</li>
</ul>
<blockquote>
<p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p><a href="#1.0">1.0</a> <a name="1.0"></a> Query by selector</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'selector'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'selector'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.1">1.1</a> <a name="1.1"></a> Query by class</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'css'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.2">1.2</a> <a name="1.2"></a> Query by id</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'#id'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#id'</span>);</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.3">1.3</a> <a name="1.3"></a> Query by attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'a[target=_blank]'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'a[target=_blank]'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.4">1.4</a> <a name="1.4"></a> Find sth.</p>
<ul>
<li><p>Find nodes</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.find(<span class="string">'li'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">el.querySelectorAll(<span class="string">'li'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Find body</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'body'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.body;</div></pre></td></tr></table></figure>
</li>
<li><p>Find Attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.attr(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">e.getAttribute(<span class="string">'foo'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Find data attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.data(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="comment">// using getAttribute</span></div><div class="line">el.getAttribute(<span class="string">'data-foo'</span>);</div><div class="line"><span class="comment">// you can also use `dataset` if only need to support IE 11+</span></div><div class="line">el.dataset[<span class="string">'foo'</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.5">1.5</a> <a name="1.5"></a> Sibling/Previous/Next Elements</p>
<ul>
<li><p>Sibling elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.siblings();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">[].filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> child !== el;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Previous elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.prev();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">el.previousElementSibling;</div></pre></td></tr></table></figure>
</li>
<li><p>Next elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// next</span></div><div class="line">$el.next();</div><div class="line">el.nextElementSibling;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.6">1.6</a> <a name="1.6"></a> Closest</p>
<p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.closest(queryString);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closest</span>(<span class="params">el, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (el) &#123;</div><div class="line">    <span class="keyword">if</span> (matchesSelector.call(el, selector)) &#123;</div><div class="line">      <span class="keyword">return</span> el;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      el = el.parentElement;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.7">1.7</a> <a name="1.7"></a> Parents Until</p>
<p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.parentsUntil(selector, filter);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentsUntil</span>(<span class="params">el, selector, filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> result = [];</div><div class="line">  <span class="keyword">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class="line"></div><div class="line">  <span class="comment">// match start from parent</span></div><div class="line">  el = el.parentElement;</div><div class="line">  <span class="keyword">while</span> (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</div><div class="line">    <span class="keyword">if</span> (!filter) &#123;</div><div class="line">      result.push(el);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (matchesSelector.call(el, filter)) &#123;</div><div class="line">        result.push(el);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    el = el.parentElement;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.8">1.8</a> <a name="1.8"></a> Form</p>
<ul>
<li><p>Input/Textarea</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'#my-input'</span>).val();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#my-input'</span>).value;</div></pre></td></tr></table></figure>
</li>
<li><p>Get index of e.currentTarget between <code>.radio</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(e.currentTarget).index(<span class="string">'.radio'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">[].indexOf.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.radio'</span>), e.currentTarget);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.9">1.9</a> <a name="1.9"></a> Iframe Contents</p>
<p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p>
<ul>
<li><p>Iframe contents</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$iframe.contents();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">iframe.contentDocument;</div></pre></td></tr></table></figure>
</li>
<li><p>Iframe Query</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$iframe.contents().find(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">iframe.contentDocument.querySelectorAll(<span class="string">'.css'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/oneuijs/You-Dont-Need-jQuery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/oneuijs/You-Dont-Need-jQuery&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的 class、id、属性 选择器都可以使用 &lt;code&gt;document.querySelector&lt;/code&gt; 或 &lt;code&gt;document.querySelectorAll&lt;/code&gt; 替代。区别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelector&lt;/code&gt; 返回第一个匹配的 Element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelectorAll&lt;/code&gt; 返回所有匹配的 Element 组成的 NodeList。它可以通过 &lt;code&gt;[].slice.call()&lt;/code&gt; 把它转成 Array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果匹配不到任何 Element，jQuery 返回空数组 &lt;code&gt;[]&lt;/code&gt;，但 &lt;code&gt;document.querySelector&lt;/code&gt; 返回 &lt;code&gt;null&lt;/code&gt;，注意空指针异常。当找不到时，也可以使用 &lt;code&gt;||&lt;/code&gt; 设置默认的值，如 &lt;code&gt;document.querySelectorAll(selector) || []&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;document.querySelector&lt;/code&gt; 和 &lt;code&gt;document.querySelectorAll&lt;/code&gt; 性能很&lt;strong&gt;差&lt;/strong&gt;。如果想提高性能，尽量使用 &lt;code&gt;document.getElementById&lt;/code&gt;、&lt;code&gt;document.getElementsByClassName&lt;/code&gt; 或 &lt;code&gt;document.getElementsByTagName&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title> MongoDB 文档操作 </title>
    <link href="http://yoursite.com/2017/03/28/2017-03-28-mongodb-document-query/"/>
    <id>http://yoursite.com/2017/03/28/2017-03-28-mongodb-document-query/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p><em>语法格式</em></p>
<p><code>insert()</code> 方法的基本格式为:<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p>
<p><em>范例1</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.insert(</div><div class="line">  &#123;</div><div class="line">    &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">    &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">    &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">    &quot;by&quot;: &quot;Shock&quot;,</div><div class="line">    &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">    &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">    &quot;likes&quot;: &quot;100&quot;</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>mycol 是上一节所创建的集合的名称。如果数据库中不存在该集合，那么MongoDB会创建该集合，并向其中插入文档。</p>
<p>在插入的文档中，如果我们没有指定<code>_id</code>参数，那么MongoDB会自动为文档指定一个唯一的 ID。<br><code>_id</code>是一个 12 字节长的 16 进制数，这 12 个字节的分配如下:</p>
<p><code>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</code></p>
<p>你还可以将用 <code>insert()</code> 方法传入一个文档数组，范例如下:</p>
<p><em>范例2</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt;db.post.insert([</div><div class="line">  &#123;</div><div class="line">    title: &apos;MongoDB Overview&apos;,</div><div class="line">    description: &apos;MongoDB is no sql database&apos;,</div><div class="line">    by: &apos;tutorials point&apos;,</div><div class="line">    url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    title: &apos;NoSQL Database&apos;,</div><div class="line">    description: &apos;NoSQL database doesn&apos;t have tables&apos;,</div><div class="line">    by: &apos;tutorials point&apos;,</div><div class="line">    url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 20,</div><div class="line">    comments: [</div><div class="line">      &#123;</div><div class="line">        user:&apos;user1&apos;,</div><div class="line">        message: &apos;My first comment&apos;,</div><div class="line">        dateCreated: new Date(2013,11,10,2,35),</div><div class="line">        like: 0</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<h4 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h4><p>如果没有指定文档的_id，那么<code>save()</code>和<code>insert()</code>完全一样。</p>
<p>如果指定了_id，那么它就会覆盖掉<code>save()</code>方法中指定_id的文档的全部数据。</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>查询 MongoDB 集合中的数据，使用 <code>find()</code> 方法。</p>
<p><em>语法格式</em></p>
<p><code>find()</code> 方法基本格式为：</p>
<p><code>&gt;db.COLLECTION_NAME.find()</code></p>
<p><code>find()</code> 会以非结构化的方式来显示所有文档</p>
<h4 id="pretty"><a href="#pretty" class="headerlink" title="pretty()"></a>pretty()</h4><p>以结构化方式显示结果，使用 <code>pretty()</code>方法。</p>
<p><em>语法格式</em></p>
<p><code>&gt;db.COLLECTION_NAME.find().pretty()</code></p>
<p><em>范例</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find().pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Shock&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>find()</code>还有一个扩展方法<code>findOne()</code>，只返回一个文档。</p>
</blockquote>
<h4 id="MongoDB-中类似WHERE子句的语句"><a href="#MongoDB-中类似WHERE子句的语句" class="headerlink" title="MongoDB 中类似WHERE子句的语句"></a>MongoDB 中类似WHERE子句的语句</h4><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">格式</th>
<th style="text-align:center">范例</th>
<th style="text-align:center">RDBMS中的类似语句</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:&lt;value&gt;}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;by&quot;:&quot;Shock&quot;}).pretty()</code></td>
<td style="text-align:center"><code>where by = &#39;Shock&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">小于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &lt; 50</code></td>
</tr>
<tr>
<td style="text-align:center">小于或等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &lt;= 50</code></td>
</tr>
<tr>
<td style="text-align:center">大于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &gt; 50</code></td>
</tr>
<tr>
<td style="text-align:center">大于或等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &gt;= 50</code></td>
</tr>
<tr>
<td style="text-align:center">不等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes != 50</code></td>
</tr>
</tbody>
</table>
<h4 id="MongoDB中的AND条件"><a href="#MongoDB中的AND条件" class="headerlink" title="MongoDB中的AND条件"></a>MongoDB中的AND条件</h4><p><em>语法格式</em></p>
<p>在 <code>find()</code> 方法中，如果传入多个键，并用逗号( , )分隔它们，那么 MongoDB 会把它看成是 AND 条件。AND 条件的基本语法格式为:</p>
<p><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p>
<p><em>范例</em></p>
<p>下例将展示所有由 “Shock” 发表的标题为 “MongoDB Overview” 的教程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;tutorials point&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Shock&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>对于上例这种情况，RDBMS 采用的 WHERE 子句将会是:</p>
<p><code>where by=&#39;tutorials point&#39; AND title=&#39;MongoDB Overview&#39;</code></p>
<p>你可以在 find 子句中传入任意的键值对。</p>
<h4 id="MongoDB中的OR条件"><a href="#MongoDB中的OR条件" class="headerlink" title="MongoDB中的OR条件"></a>MongoDB中的OR条件</h4><p><em>语法格式</em></p>
<p>若基于OR条件来查询文档，可以使用关键字 <code>$or</code>。OR条件的基本语法格式为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(</div><div class="line">  &#123;</div><div class="line">    $or: [</div><div class="line">      &#123;key1: value1&#125;, &#123;key2:value2&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">).pretty()</div></pre></td></tr></table></figure>
<p><em>范例</em></p>
<p>下例将展示所有由 “Shock” 发表的或标题为 “MongoDB Overview” 的教程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Shock&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h4 id="结合使用AND与OR条件"><a href="#结合使用AND与OR条件" class="headerlink" title="结合使用AND与OR条件"></a>结合使用AND与OR条件</h4><p><em>范例</em></p>
<p>下例所展示文档的条件为:喜欢数大于100，标题是“MongoDB Overview”，或者是由“Shock” 所发表的。相应的SQL WHERE子句为:<code>where likes&gt;10 AND (by = &#39;tutorials point&#39; OR title = &#39;MongoDB Overview&#39;)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;Shock&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Shock&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>MongoDB 中的 <code>update()</code> 与 <code>save()</code> 方法都能用于更新集合中的文档。 <code>update()</code> 方法更新已有文档中的值，而 <code>save()</code> 方法则是用传入该方法的文档来替换已有文档。</p>
<h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update()方法"></a>update()方法</h4><p><code>update()</code>方法更新已有文档中的值。</p>
<p><em>语法格式</em></p>
<p><code>update()</code> 方法基本格式如下:</p>
<p><code>&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</code></p>
<p><em>范例</em></p>
<p>假如mycol集合中有下列数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<p>下面的例子将把文档原标题 ‘MongoDB Overview’ 替换为新的标题 ‘New MongoDB Tutorial’。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>MongoDB默认只更新单个文档，要想更新多个文档，需要把参数<code>multi</code>设为<code>true</code>。</p>
<p><code>&gt;db.mycol.update({&#39;title&#39;:&#39;MongoDB Overview&#39;},{$set:{&#39;title&#39;:&#39;New MongoDB Tutorial&#39;}},{multi:true})</code></p>
<h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h4><p><code>save()</code> 方法利用传入该方法的文档来替换已有文档。</p>
<p><em>语法格式</em></p>
<p><code>save()</code> 方法基本语法格式如下:</p>
<p><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p>
<p><em>范例</em></p>
<p>下例用_id为’5983548781331adf45ec5’的文档代替原有文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.save(</div><div class="line">  &#123;</div><div class="line">    &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Tutorials Point New Topic&quot;, &quot;by&quot;:&quot;Tutorials Point&quot;</div><div class="line">  &#125;</div><div class="line">)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Tutorials Point New Topic&quot;, &quot;by&quot;:&quot;Tutorials Point&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p>MongoDB利用 <code>remove()</code> 方法 清除集合中的文档。它有2个可选参数:</p>
<ul>
<li>deletion criteria:(可选)删除文档的标准。</li>
<li>justOne:(可选)如果设为true或1，则只删除一个文档。</li>
</ul>
<p><em>语法格式</em></p>
<p><code>remove()</code> 方法的基本语法格式如下所示:<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p>
<p><em>范例</em></p>
<p>假如 mycol 集合中包含下列数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<p>下面我们将删除其中所有标题为 ‘MongoDB Overview’ 的文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h4 id="只删除一个文档"><a href="#只删除一个文档" class="headerlink" title="只删除一个文档"></a>只删除一个文档</h4><p>如果有多个记录，而你只想删除第一条记录，那么就设置<code>remove()</code>方法中的<code>justOne</code>参数：</p>
<p><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p>
<h4 id="删除所有文档"><a href="#删除所有文档" class="headerlink" title="删除所有文档"></a>删除所有文档</h4><p>如果没有指定删除标准，则 MongoDB 会将集合中所有文档都予以删除。这等同于 SQL 中的 truncate 命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.remove()</div><div class="line">&gt;db.mycol.find()</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插入文档&quot;&gt;&lt;a href=&quot;#插入文档&quot; class=&quot;headerlink&quot; title=&quot;插入文档&quot;&gt;&lt;/a&gt;插入文档&lt;/h3&gt;&lt;h4 id=&quot;insert&quot;&gt;&lt;a href=&quot;#insert&quot; class=&quot;headerlink&quot; title=&quot;insert()&quot;&gt;&lt;/a&gt;insert()&lt;/h4&gt;&lt;p&gt;&lt;em&gt;语法格式&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert()&lt;/code&gt; 方法的基本格式为:&lt;br&gt;&lt;code&gt;&amp;gt;db.COLLECTION_NAME.insert(document)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;范例1&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;db.mycol.insert(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;_id&amp;quot;: ObjectId(7df78ad8902c),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;title&amp;quot;: &amp;quot;MongoDB Overview&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;description&amp;quot;: &amp;quot;MongoDB is no sql database&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;by&amp;quot;: &amp;quot;Shock&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;url&amp;quot;: &amp;quot;https://rockjins.js.org&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;tags&amp;quot;: [&amp;quot;mongodb&amp;quot;, &amp;quot;database&amp;quot;, &amp;quot;NoSQL&amp;quot;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;likes&amp;quot;: &amp;quot;100&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title> 快速将Promise运用在开发中 </title>
    <link href="http://yoursite.com/2017/03/12/2017-03-12-promise-dev/"/>
    <id>http://yoursite.com/2017/03/12/2017-03-12-promise-dev/</id>
    <published>2017-03-11T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章面向对Promise不甚了解的朋友，我将告诉你如何把它快速运用在开发中。</p>
</blockquote>
<h3 id="什么是Promise？"><a href="#什么是Promise？" class="headerlink" title="什么是Promise？"></a>什么是Promise？</h3><p>简单几句介绍一下。Promise是抽象异步处理对象以及对其进行各种操作的组件。你可以理解为：它的出现，是为了让我们更方便的进行异步处理。</p>
<p>在Promise出现之前，说到JavaScript的异步处理，我们都会想到回调函数,like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getAsync(<span class="string">"fileA.txt"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(error)&#123;<span class="comment">// 取得失败时的处理 throw error;</span></div><div class="line">    <span class="keyword">throw</span> error;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面遵循<code>Node.js</code>的规定，回调的第一个参数是<code>error</code>。如果所有的回调函数都像<code>Node.js</code>一样，统一参数使用规则的话，那写法会很明了，但也仅仅是编码规范而已，使用不同的写法也不会出错。</p>
<p>而Promise则是把异步处理对象和处理规则进行规范化，并采用统一的接口来编写，使用规定方法之外的写法都会出错。</p>
<p>我们可以先看一个简单的使用Promise进行异步处理的例子:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = getAsyncPromise(<span class="string">"fileA.txt"</span>);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">  <span class="comment">// 获取文件内容成功时的处理</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">  <span class="comment">// 获取文件内容失败时的处理</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>看上去和回调函数有些不一样，在使用Promise进行异步处理的时候，我们必须按照接口规定的方法编写处理代码。</p>
<p>也即是说，除了使用Promise规定的方法(上面的<code>then</code>和<code>catch</code>),其他的方法都是不能使用的，而回调函数可以自定义回调的参数。</p>
<p>所以，Promise可以将复杂的异步处理轻松的进行模式化，没有理由让你不使用它。</p>
<p>接下来，我们看看怎么把Promise运用到开发中，这个才是大家想了解的。</p>
<h3 id="学习Promise"><a href="#学习Promise" class="headerlink" title="学习Promise"></a>学习Promise</h3><p>在运用到开发之前，我们有必要先学习一些Promise的基本API(暂时看的有点糊涂没关系，等会的例子实践会和大家讲清楚的)。</p>
<p>目前大致有下面三种类型:</p>
<h4 id="1-Constructor-构造器"><a href="#1-Constructor-构造器" class="headerlink" title="1.Constructor(构造器)"></a>1.Constructor(构造器)</h4><p>我们从构造函数<code>Promise</code>来创建一个新<code>promise</code>对象作为接口。</p>
<p>要创建一个<code>promise</code>对象，可以使用<code>new</code>来调用<code>Promise</code>构造器来进行实例化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; <span class="comment">// 异步处理</span></div><div class="line">  <span class="comment">// 处理结束后、调用resolve 或 reject</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="2-Instance-Method-实例方法"><a href="#2-Instance-Method-实例方法" class="headerlink" title="2.Instance Method(实例方法)"></a>2.Instance Method(实例方法)</h4><p>在通过<code>new</code>生成的<code>promise</code>对象时，我们设置了在resolve(成功)和reject(失败)时调用的回调函数，我们可以使用<code>promise.then()</code>实例方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promise.then(onFulfilled,onReject);</div></pre></td></tr></table></figure>
<ul>
<li><p>resolve(成功)时：<code>onFulfilled</code>会被调用</p>
</li>
<li><p>reject(失败)时：<code>onReject</code>会被调用</p>
</li>
</ul>
<p><code>onFulfilled</code>和<code>onReject</code>都为可选参数</p>
<p><code>promise.then</code>成功和失败时都可以使用，另外在异常处理时，可以使用<code>promise.then(undefined, onReject)</code>这种方式，只指定<code>reject</code>时的回调函数即可。不过这种情况下，使用<code>promise.catch()</code>是个明智之选。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promise.catch(onReject);</div></pre></td></tr></table></figure>
<h4 id="3-Static-Method-静态方法"><a href="#3-Static-Method-静态方法" class="headerlink" title="3.Static Method(静态方法)"></a>3.Static Method(静态方法)</h4><p>像<code>promise.all()</code>和<code>Promise.resolve()</code>等在内，主要都是一些辅助方法(可以理解为一些语法糖)，这里不作深入探讨。</p>
<h3 id="运用在开发中"><a href="#运用在开发中" class="headerlink" title="运用在开发中"></a>运用在开发中</h3><p>我们先来看一段Promise使用流程代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//(1)</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      resolve(<span class="string">'Async Hello World'</span>);</div><div class="line">    &#125;, <span class="number">300</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">asyncFunction().then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  <span class="comment">//(2)</span></div><div class="line">  <span class="built_in">console</span>.log(value); <span class="comment">//300ms后打印 "Async Hello World"</span></div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;  <span class="comment">//(3)</span></div><div class="line">  <span class="built_in">console</span>.log(error);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>分析一下上面代码。</p>
<p>执行<code>(1)</code>处函数，会返回一个Promise对象，Promise对象内部在300ms后执行<code>resolve()</code>方法，这个方法调用<code>(2)</code>处的<code>then()</code>方法，并传入参数，如果Promise对象内部出现任何错误(比如平台不支持setTimeout方法)，就会执行<code>(3)</code>处的<code>catch()</code>发放，并把错误作为参数传入。</p>
<blockquote>
<p>这里提一下，我看到很多朋友把Promise理解为Ajax的一种扩展，其实并不是这样的，Ajax只是一种请求数据的方式，因为Ajax是异步的，所以我们可以用Promise去管理Ajax请求，但这并不意味这Promise只服务于Ajax，只要是异步处理，我们都可以使用Promise去处理，就比如上面的<code>setTimeout</code>。</p>
</blockquote>
<p>看到这里大家对Promise应该有一个大概的认识了，实际开发中Promise大部分时间还是搭配Ajax使用，我们来看看应该怎么做，下面用原生的方式请求Ajax，大家也温习一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">    req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</div><div class="line"></div><div class="line">    req.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</div><div class="line">        resolve(req.responseText);</div><div class="line">      &#125;<span class="keyword">else</span> &#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    req.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      reject.(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    req.send();</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运行示例</span></div><div class="line"><span class="keyword">var</span> URL = <span class="string">"https://rockjins.js.org"</span>;</div><div class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>getURL</code>只有在XHR取得状态为200时才会调用<code>resolve</code>，也就是数据取得成功时，而其他情况(数据取得失败)则会调用<code>reject</code>。</p>
<p>当调用<code>resolve(req.responseText)</code>时，<code>then</code>方法也会被调用，并接收到<code>req.responseText</code>参数。</p>
<p>熟悉Node.js的朋友在写回调时会会将<code>callback(error,response)</code>的第一个参数设为<code>error</code>对象，在Promise中，resolve(成功)/reject(失败)担当了这个职责。</p>
<p>XHR中<code>onerror</code>触发时，就是发生错误时，理所当然要调用<code>reject</code>，我们重点来看下传给<code>reject</code>的值。</p>
<p>发生错误时要像这样<code>reject(new Error(req.statusText))</code>，创建一个Error对象再讲具体的值传入进去。传给<code>reject</code>的值也没有什么特殊限制，一般只要是Error对象(或继承自Error对象)即可。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>其实你理解了Promise的运作流程，使用它十分方便和简单，它就是一个异步管理器，帮助我们更好地去进行异步处理。</p>
<p>试想，如果Promise真的很复杂，那它出现的意义是什么？本末倒置了，哈哈。</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章面向对Promise不甚了解的朋友，我将告诉你如何把它快速运用在开发中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是Promise？&quot;&gt;&lt;a href=&quot;#什么是Promise？&quot; class=&quot;headerlink&quot; title=&quot;什么是Promise？&quot;&gt;&lt;/a&gt;什么是Promise？&lt;/h3&gt;&lt;p&gt;简单几句介绍一下。Promise是抽象异步处理对象以及对其进行各种操作的组件。你可以理解为：它的出现，是为了让我们更方便的进行异步处理。&lt;/p&gt;
&lt;p&gt;在Promise出现之前，说到JavaScript的异步处理，我们都会想到回调函数,like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;getAsync(&lt;span class=&quot;string&quot;&gt;&quot;fileA.txt&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, result&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(error)&amp;#123;&lt;span class=&quot;comment&quot;&gt;// 取得失败时的处理 throw error;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; error;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>『翻译』你也许并不需要构建工具 </title>
    <link href="http://yoursite.com/2017/03/08/2017-03-08-you-might-not-need-a-build-tool/"/>
    <id>http://yoursite.com/2017/03/08/2017-03-08-you-might-not-need-a-build-tool/</id>
    <published>2017-03-07T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://medium.com/@pakastin/you-might-not-need-a-build-tool-ac3c1a8cfaac#.ybnfasayu" target="_blank" rel="external">Read the original</a></p>
<p>我们最好了解”原生”的构建方式</p>
</blockquote>
<hr>
<p><em>译者注：这篇文章旨在告诉大家，构建的过程是怎样的。因为现在太多的脚手架工具了，大家确实很方便就搭建了环境，但内部的过程却让人迷糊。</em></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>构建工具变得越来越丰富多彩了，但是你真的需要它们吗？有没有更简单的方式去搭建Rollup、Stylus或者其它的环境，而不用花上一整天时间。</p>
<p>现在我要向你展示用“原生”的方式构建项目，使用<code>NPM scripts</code>和<code>监听器(chokidar)</code>。</p>
<a id="more"></a>
<h3 id="初始化node-js项目"><a href="#初始化node-js项目" class="headerlink" title="初始化node.js项目"></a>初始化node.js项目</h3><p>我们先创建一个node.js项目。打开你的命令行输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir example</div><div class="line">$ cd example</div><div class="line">$ npm init -y</div></pre></td></tr></table></figure>
<p>然后创建一些文件夹并安装express：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p css js public/js public/css</div><div class="line">$ npm i express --save</div></pre></td></tr></table></figure>
<p>然后，我们需要一个简单的web服务器(译者注：因为我使用的atom编辑器，所以使用atom命令可以直接创建server.js并打开它)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch server.js</div><div class="line">$ atom server.js</div></pre></td></tr></table></figure>
<p>接下来要把public文件夹对外开发，在server.js中写入如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const path = require(&apos;path&apos;);</div><div class="line">const express = require(&apos;express&apos;);</div><div class="line">const app = express();</div><div class="line">const PUBLIC = path.join(__dirname, &apos;public&apos;);</div><div class="line">app.use(express.static(PUBLIC));</div><div class="line">app.listen(8080);</div></pre></td></tr></table></figure>
<h3 id="创建一些NPM-scripts"><a href="#创建一些NPM-scripts" class="headerlink" title="创建一些NPM scripts"></a>创建一些NPM scripts</h3><p>接下来我们要安装JS和CSS工具。如果你喜欢的话，可以选择你中意的工具。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i stylus nib rollup rollup-plugin-buble uglify-js --save-dev</div></pre></td></tr></table></figure>
<p>接下来可以增加一些npm scripts，先打开package.json：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$touch package.json</div><div class="line">$atom package.json</div></pre></td></tr></table></figure>
<p>npm scripts的美妙之处就在于，你所有的依赖关系都可以安装在本地，并按照<a href="https://github.com/rollup/rollup/wiki/Command-Line-Interface" target="_blank" rel="external">官方文档</a>去执行<a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">命令</a>，在package.json中写入如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"example"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"node watch"</span>,</div><div class="line">    <span class="string">"build-css"</span>: <span class="string">"stylus -u nib css/index.styl -o public/css/main.css"</span>,</div><div class="line">    <span class="string">"build-js"</span>: <span class="string">"rollup -c -f iife js/index.js -o public/js/main.js"</span>,</div><div class="line">    <span class="string">"uglify-js"</span>: <span class="string">"uglifyjs public/js/index.js -cmo public/js/main.min.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [],</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让我们开始编辑详情：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stylus -u nib css/index.styl -o public/css/main.css</div></pre></td></tr></table></figure>
<p>上面这句命令执行顺序：</p>
<ul>
<li><p>运行stylus</p>
</li>
<li><p>加载nib插件</p>
</li>
<li><p>打开css/index.styl</p>
</li>
<li><p>编辑public/css/main.css</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rollup -c -f iife js/index.js -o public/js/main.js</div></pre></td></tr></table></figure>
<p>上面这句命令执行顺序：</p>
<ul>
<li><p>运行rollup</p>
</li>
<li><p>使用配置文件（我们将在接下来创建它）</p>
</li>
<li><p>格式化<a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression" target="_blank" rel="external">IIFE</a></p>
</li>
<li><p>打开js/index.js</p>
</li>
<li><p>编辑public/js/main.js</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">uglifyjs public/js/main.js -cmo public/js/main.min.js</div></pre></td></tr></table></figure>
<p>上面这句命令的执行顺序：</p>
<ul>
<li><p>运行uglify-js</p>
</li>
<li><p>打开public/js/main.js</p>
</li>
<li><p>压缩&amp;最小化</p>
</li>
<li><p>编辑public/js/main.min.js</p>
</li>
</ul>
<h3 id="配置Rollup"><a href="#配置Rollup" class="headerlink" title="配置Rollup"></a>配置Rollup</h3><p>接下来我们要创建rollup的配置文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch rollup.config.js</div><div class="line">$ atom rollup.config.js</div></pre></td></tr></table></figure>
<p>没有多少要配置的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> buble <span class="keyword">from</span> <span class="string">'rollup-plugin-buble'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    buble()</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样就够了.</p>
<h3 id="创建一个文件监听器"><a href="#创建一个文件监听器" class="headerlink" title="创建一个文件监听器"></a>创建一个文件监听器</h3><p>还有一件事。我们需要一个文件监听器，让我们来安装<a href="https://github.com/paulmillr/chokidar" target="_blank" rel="external">chokidar</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i chokidar --save-dev</div></pre></td></tr></table></figure>
<p>然后创建一个<code>watch.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch watch.js</div><div class="line">$ atom watch.js</div></pre></td></tr></table></figure>
<p>这里是它的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./server'</span>); <span class="comment">// run the server</span></div><div class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">const</span> chokidar = <span class="built_in">require</span>(<span class="string">'chokidar'</span>);</div><div class="line">run(<span class="string">'build-css'</span>);</div><div class="line">run(<span class="string">'build-js'</span>);</div><div class="line">chokidar.watch(<span class="string">'css/**/*.styl'</span>)</div><div class="line">  .on(<span class="string">'change'</span>, path =&gt; run(<span class="string">'build-css'</span>));</div><div class="line">chokidar.watch(<span class="string">'js/**/*.js'</span>)</div><div class="line">  .on(<span class="string">'change'</span>, path =&gt; run(<span class="string">'build-js'</span>));</div><div class="line">chokidar.watch(<span class="string">'public/js/main.js'</span>)</div><div class="line">  .on(<span class="string">'change'</span>, path =&gt; run(<span class="string">'uglify-js'</span>));</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span> (<span class="params">scriptName</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> child = cp.spawn(<span class="string">'npm'</span>, [<span class="string">'run'</span>, scriptName]);</div><div class="line">  child.stdout.pipe(process.stdout);</div><div class="line">  child.stderr.pipe(process.stderr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了！这是上面这段代码运行的过程：</p>
<ul>
<li><p>运行服务</p>
</li>
<li><p>加载node.js自带的<code>child_process</code>包</p>
</li>
<li><p>运行<code>npm run build-css</code>命令</p>
</li>
<li><p>运行<code>npm run build-js</code>命令</p>
</li>
<li><p>开始监听<code>css/**/*.styl</code>和<code>npm run build-css</code>的任何变化</p>
</li>
<li><p>开始监听<code>js/**/*.js</code>和<code>npm run build-js</code>的任何变化</p>
</li>
<li><p>开始监听<code>public/js/main.js</code>和<code>npm run uglify-js</code>的任何变化</p>
</li>
<li><p>定义一个简单的脚本运行错误处理机制</p>
</li>
</ul>
<h3 id="我们需要一些内容"><a href="#我们需要一些内容" class="headerlink" title="我们需要一些内容"></a>我们需要一些内容</h3><p>我们需要添加一些CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch css/index.styl</div><div class="line">$ atom css/index.styl</div></pre></td></tr></table></figure>
<p>这是一个很简单的”bootstrap”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@import &apos;nib&apos;;</div><div class="line">body &#123;</div><div class="line">  font-family: sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>…还有JS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch js/index.js</div><div class="line">$ atom js/index.js</div></pre></td></tr></table></figure>
<p>这里同样也没有太多事情发生：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> hello = <span class="built_in">document</span>.createElement(<span class="string">'h1'</span>);</div><div class="line">hello.textContent = <span class="string">'Hello world!'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(hello);</div></pre></td></tr></table></figure>
<p>还需要一些HTML：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ touch public/index.html</div><div class="line">$ atom public/index.html</div></pre></td></tr></table></figure>
<p>也是最基本的…</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/main.css"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成!"></a>完成!</h3><p>让我们试试看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run dev</div></pre></td></tr></table></figure>
<p>在浏览器地址栏输入<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a></p>
<p>搞定，没问题！</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@pakastin/you-might-not-need-a-build-tool-ac3c1a8cfaac#.ybnfasayu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们最好了解”原生”的构建方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;译者注：这篇文章旨在告诉大家，构建的过程是怎样的。因为现在太多的脚手架工具了，大家确实很方便就搭建了环境，但内部的过程却让人迷糊。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;构建工具变得越来越丰富多彩了，但是你真的需要它们吗？有没有更简单的方式去搭建Rollup、Stylus或者其它的环境，而不用花上一整天时间。&lt;/p&gt;
&lt;p&gt;现在我要向你展示用“原生”的方式构建项目，使用&lt;code&gt;NPM scripts&lt;/code&gt;和&lt;code&gt;监听器(chokidar)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title> 举个小栗子来聊下性能优化 </title>
    <link href="http://yoursite.com/2017/03/06/2017-03-06-performance-optimum/"/>
    <id>http://yoursite.com/2017/03/06/2017-03-06-performance-optimum/</id>
    <published>2017-03-05T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我向来是先实现功能再考虑优化，不然就本末倒置了。</p>
</blockquote>
<p>网上有很多关于前端优化的帖子，最出名的应该是<a href="https://github.com/creeperyang/blog/issues/1" target="_blank" rel="external">雅虎前端优化35条军规</a>了，但其实很多朋友看完就忘了，确实要记住这么多条优化建议有困难。但你吸收这些优化建议后，你的潜意识就会慢慢养成优化的习惯，看到不完美的代码你就会不自觉的想到怎样去优化它们。</p>
<p>今天就举一个小栗子,我们来聊聊怎样做前端优化。</p>
<blockquote>
<p>产品经理进门：“小周，这次的项目要兼容到IE8。”</p>
<p>我：“好的，没问题…”(除了这个我还能说什么？)</p>
</blockquote>
<p>好了，假设不能使用第三方库，我们要用原生JS实现DOM元素事件绑定，我们就要考虑到兼容性问题(这时候脑子里面不用想优化的问题，先想想怎么实现功能吧)。</p>
<a id="more"></a>
<p>我最初可能会这么写:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">    <span class="keyword">return</span> elem.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">    <span class="keyword">return</span> elem.attachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码没有问题，完美兼容到了IE8，功能算是实现了，这时候我们就要开始考虑性能优化的问题了。</p>
<p>先来看看这个函数有什么缺点，每次执行函数时都会进入<code>if</code>条件分支，虽然对于现代浏览器来说，执行这些分支开销很小，但就是这些细节，区分了优秀与平庸。</p>
<p>我们可以再想一个方案来让这个功能实现的更完美，我们把嗅探浏览器的操作提前到代码加载时执行，在代码加载时就进行判断，让<code>addEvent</code>返回一个包裹了一个正确逻辑的函数，这里可以用自执行函数来做。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;</div><div class="line">      elem.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;</div><div class="line">      elem.attachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这样写仍然有个缺点，或许从头到尾我们都没有用过<code>addEvent</code>函数，那自执行函数中的浏览器嗅探完全是多余的，而且会延长页面ready的时间。</p>
<p>想想看还有什么方法可以优化首屏加载。</p>
<p>我们仍然把<code>addEvent</code>声明为一个普通函数，在函数中仍然有判断分支。但在第一次进入分支后，函数内部重写<code>addEvent</code>函数，从而得到我们所期望的<code>addEvent</code>函数，下次调用<code>addEvent</code>函数时，内部将不再进行分支判断:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;  <span class="comment">//重写addEvent函数</span></div><div class="line">      elem.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">    addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">elem, type, handler</span>) </span>&#123;</div><div class="line">      elem.attachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  addEvent(elem, type, handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回过头再对比最初的函数，发现其实优化也不是那么困难，最重要的时我们要养成优化代码的习惯，看到一段代码，就要开始思考有哪些可以改进的地方，如果你想要成为一名优秀的程序员，这一点是必不可少的，量变引发质变这个道理大家都懂。</p>
<p>如果你还没有养成这种习惯，那试着带着这种思维习惯去review自己的代码，你会发现，呵呵…</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我向来是先实现功能再考虑优化，不然就本末倒置了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网上有很多关于前端优化的帖子，最出名的应该是&lt;a href=&quot;https://github.com/creeperyang/blog/issues/1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;雅虎前端优化35条军规&lt;/a&gt;了，但其实很多朋友看完就忘了，确实要记住这么多条优化建议有困难。但你吸收这些优化建议后，你的潜意识就会慢慢养成优化的习惯，看到不完美的代码你就会不自觉的想到怎样去优化它们。&lt;/p&gt;
&lt;p&gt;今天就举一个小栗子,我们来聊聊怎样做前端优化。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;产品经理进门：“小周，这次的项目要兼容到IE8。”&lt;/p&gt;
&lt;p&gt;我：“好的，没问题…”(除了这个我还能说什么？)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了，假设不能使用第三方库，我们要用原生JS实现DOM元素事件绑定，我们就要考虑到兼容性问题(这时候脑子里面不用想优化的问题，先想想怎么实现功能吧)。&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』&quot;typeof null是什么?&quot;以及其它让我们感到困惑的JavaScript类型</title>
    <link href="http://yoursite.com/2017/02/22/2017-02-22-javascript-types/"/>
    <id>http://yoursite.com/2017/02/22/2017-02-22-javascript-types/</id>
    <published>2017-02-21T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://bitsofco.de/javascript-typeof/" target="_blank" rel="external">Read the original</a></p>
</blockquote>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>typeof</code>运算符在JavaScript中用来判断一个数据的类型，它返回一个字符串。比如，我们想知道<code>123</code>的数据类型，我们可能这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="number">123</span></div></pre></td></tr></table></figure>
<p>它会返回<code>123</code>的数据类型，那么应该是”number”。除了”number”，<code>typeof</code>运算符还会返回其他6种结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">// "number"</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="string">"abc"</span> <span class="comment">// "string"  </span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// "boolean"  </span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; <span class="comment">// "object"  </span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// "function"  </span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// "undefined"  </span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) <span class="comment">// "symbol"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>从上面的例子中可以看出，<code>typeof</code>运算符使用十分简单。但是，这只是很少的一部分案例，它们很容易让人误解和混淆<code>typeof</code>运算符究竟是怎样运作的。</p>
<h3 id="typeof-typeof-123是什么类型？"><a href="#typeof-typeof-123是什么类型？" class="headerlink" title="typeof typeof 123是什么类型？"></a><code>typeof typeof 123</code>是什么类型？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">123</span> <span class="comment">//"string"</span></div></pre></td></tr></table></figure>
<p><code>typeof</code>运算符返回的值是什么类型？好的，<code>typeof</code>操作符总是以字符串的形式返回传递给它的值的数据类型。如果去获取<code>typeof</code>计算后返回的值，比如一个数字，它将会是<code>&quot;number&quot;</code>。这意味着，无论结果是什么类型，我们去判断一个<code>typeof [any operand]</code>，永远都是返回字符串。</p>
<h3 id="typeof-NaN是什么类型？"><a href="#typeof-NaN是什么类型？" class="headerlink" title="typeof NaN是什么类型？"></a><code>typeof NaN</code>是什么类型？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>  <span class="comment">//"number"</span></div></pre></td></tr></table></figure>
<p><code>NaN</code>代表某个值不是一个数字，但出乎意料的是，它是”number”类型。原因是这样的，在计算机内部，<code>NaN</code>是以数字类型储存的。然而，它是一个不能用实际数字来表示的数值类型的值。所以它叫“Not a Number”，这并不意味着它不是数值类型。相反，它意味着这个值不能用数值表示。</p>
<p>这也解释了为什么<code>NaN</code>的值都不相等。比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> NaN1 = <span class="number">2</span> * <span class="string">"abc"</span>;  </div><div class="line"><span class="keyword">const</span> NaN2 = <span class="number">2</span> * <span class="string">"abc"</span>;</div><div class="line"></div><div class="line">NaN1 === NaN2 <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>上面两个NaN的值不相等，因为它们不能用两个相同的数字来表示。</p>
<h3 id="typeof-1-2-3-是什么类型？"><a href="#typeof-1-2-3-是什么类型？" class="headerlink" title="typeof [1, 2, 3]是什么类型？"></a><code>typeof [1, 2, 3]</code>是什么类型？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// "object"</span></div></pre></td></tr></table></figure>
<p>对数组使用<code>typeof</code>会得到”object”。在JavaScript中， 数组其实是一个对象，只是拥有一些特殊的行为和能力。比如，数组拥有<code>Array.prototype.length</code>属性，它将会返回数组有多少个元素。数组也有一些特殊的方法，比如:<code>Array.prototype.push()</code>或<code>Array.prototype.unshift()</code>（可以参考<a href="https://bitsofco.de/javascript-array-methods-mutator-methods/" target="_blank" rel="external">JavaScript数组方法</a>）。</p>
<p>区别数组和对象，我们可以使用<code>Array.isArray()</code>方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray( [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] ) <span class="comment">// true  </span></div><div class="line"><span class="built_in">Array</span>.isArray( &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; ) <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="typeof-null是什么类型？"><a href="#typeof-null是什么类型？" class="headerlink" title="typeof null是什么类型？"></a><code>typeof null</code>是什么类型？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// "object"</span></div></pre></td></tr></table></figure>
<p><code>null</code>的值从技术上来说和<code>object</code>和<code>number</code>一样，都是最基本的值，按理来说，<code>null</code>的类型也应该是”null”。然而并非如此，因为JavaScript最初设计时出了一点意外。</p>
<p>在JavaScript最初设计时，一个值有两个部分组成：它的类型标签和实际的值。有5个类型标签可以使用，而且对象类型的引用指向<code>0</code>。<code>null</code>的值始终指向<code>NULL</code>指针，它在大部分平台都是用<code>0x00</code>来表示。由于这种相似性，<code>null</code>就用过<code>0</code>类型标签来表示，所以符合对象的引用。</p>
<h3 id="typeof-class-Foo-是什么类型？"><a href="#typeof-class-Foo-是什么类型？" class="headerlink" title="typeof class Foo {}是什么类型？"></a><code>typeof class Foo {}</code>是什么类型？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125; <span class="comment">// "function"</span></div></pre></td></tr></table></figure>
<p>最后，我们讲一下类(Classes)。类在ES6中的介绍是：一个更好的语法为原型继承服务。在将类之前，我们先创建一个可继承的对象，我们要用到函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123; &#125;;</div><div class="line">Dog.prototype.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">'woof!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> snoopy = <span class="keyword">new</span> Dog();</div><div class="line">snoopy.bark(); <span class="comment">//alert('woof!');</span></div></pre></td></tr></table></figure>
<p>使用类，我们可以用同样的方式创建一个类似的对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;  </div><div class="line">    bark() &#123;</div><div class="line">        alert(<span class="string">"woof!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> snoopy = <span class="keyword">new</span> Dog();  </div><div class="line">snoopy.bark() <span class="comment">// alert("woof!")</span></div></pre></td></tr></table></figure>
<p>然而，JavaScript的类只是一个被语法糖包裹的函数方法。实际上创建了一个同样的函数，但是作者的写法不同，只是看起来个简洁。这就是为什么<code>typeof</code>一个类，得到的仍然是”Function”。</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/javascript-typeof/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;运算符在JavaScript中用来判断一个数据的类型，它返回一个字符串。比如，我们想知道&lt;code&gt;123&lt;/code&gt;的数据类型，我们可能这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会返回&lt;code&gt;123&lt;/code&gt;的数据类型，那么应该是”number”。除了”number”，&lt;code&gt;typeof&lt;/code&gt;运算符还会返回其他6种结果：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// &quot;number&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// &quot;string&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// &quot;boolean&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &amp;#123;&lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// &quot;object&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125; &lt;span class=&quot;comment&quot;&gt;// &quot;function&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// &quot;undefined&quot;  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// &quot;symbol&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title> 函数节流、函数防抖实现原理分析 </title>
    <link href="http://yoursite.com/2017/02/21/2017-02-21-debounce-function/"/>
    <id>http://yoursite.com/2017/02/21/2017-02-21-debounce-function/</id>
    <published>2017-02-20T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>之前<a href="https://rockjins.js.org/2017/01/26/interviews-javascript/" target="_blank" rel="external">翻译了一篇博客</a>，里面有讲到这个，今天单独拎出来聊聊。</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>事件的触发权很多时候都属于用户，有些情况下会产生问题：</p>
<ul>
<li><p>向后台发送数据，用户频繁触发，对服务器造成压力</p>
</li>
<li><p>一些浏览器事件:<code>window.onresize</code>、<code>mousemove</code>等，触发的频率非常高，会造成浏览器性能问题</p>
</li>
</ul>
<p>如果你碰到这些问题，那就需要用到这些技术了。</p>
<p>我们先来解释一下函数节流(Throttling)和函数防抖(Debouncing)的区别:</p>
<blockquote>
<p>我们上班、生活每天都需要坐电梯，用这个比喻再恰当不过了：</p>
<p>函数防抖和我们平时坐电梯差不多，如果有人进电梯（用户触发事件），那将在10秒钟后出发（执行程序），这时如果又有人进电梯了（用户在10秒内再次触发事件），我们又得等10秒再出发（重新计时）。</p>
<p>函数节流就比较直观了，有人进电梯，就开始计时，每10秒运送一次，如果没有人，则待机。</p>
</blockquote>
<p>这两种策略具体使用场景还得看你的实际需求了，但是，只要理解了这个思想，接下来的就好办了。</p>
<a id="more"></a>
<h3 id="函数节流-Throttling"><a href="#函数节流-Throttling" class="headerlink" title="函数节流(Throttling)"></a>函数节流(Throttling)</h3><p>函数节流的作用上面讲的很清晰了，接下来我们分析一下如何实现它：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, interval</span>) </span>&#123; <span class="comment">//fn为要执行的函数，interval为延迟时间</span></div><div class="line">  <span class="keyword">var</span> _self = fn,  <span class="comment">//保存需要被延迟执行的函数引用</span></div><div class="line">      timer,  <span class="comment">//定时器</span></div><div class="line">      firstTime = <span class="literal">true</span>;  <span class="comment">//是否第一次调用</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//返回一个函数，形成闭包，持久化变量</span></div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>, <span class="comment">//缓存变量</span></div><div class="line">        _me = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(firstTime) &#123; <span class="comment">//如果是第一次调用，不用延迟执行</span></div><div class="line">      _self.apply(_me, args);</div><div class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(timer) &#123; <span class="comment">//如果定时器还在，说明上一次延迟执行还没有完成</span></div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//延迟一段时间执行</span></div><div class="line">      clearTimeout(timer);</div><div class="line">      timer = <span class="literal">null</span>;</div><div class="line">      _self.apply(_me, args);</div><div class="line">    &#125;, interval || <span class="number">500</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//你要执行的代码</span></div><div class="line">&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure>
<p>其实函数节流和函数防抖的关键就是对<code>setTimeout</code>的运用，说个题外话，当你对<code>setTimeout</code>和<code>setInterval</code>内部的运作原理彻底了解后，你就是一名JS大神了。😝</p>
<h3 id="函数防抖-Debouncing"><a href="#函数防抖-Debouncing" class="headerlink" title="函数防抖(Debouncing)"></a>函数防抖(Debouncing)</h3><p>我个人在开发中比较喜欢使用函数防抖策略，其实也说不上谁好，适应的场景不同。</p>
<p>我把注解也写在代码中了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, interval, immediate</span>) </span>&#123;</div><div class="line">  <span class="comment">//fn为要执行的函数</span></div><div class="line">  <span class="comment">//interval为等待的时间</span></div><div class="line">  <span class="comment">//immediate判断是否立即执行</span></div><div class="line">  <span class="keyword">var</span> timeout;  <span class="comment">//定时器</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//返回一个闭包</span></div><div class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>; <span class="comment">//先把变量缓存</span></div><div class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">//把稍后要执行的代码封装起来</span></div><div class="line">      timeout = <span class="literal">null</span>; <span class="comment">//成功调用后清除定时器</span></div><div class="line">      <span class="keyword">if</span>(!immediate) fn.apply(context, args); <span class="comment">//不立即执行时才可以调用</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;  <span class="comment">//判断是否立即调用，并且如果定时器存在，则不立即调用</span></div><div class="line">    clearTimeout(timeout);  <span class="comment">//不管什么情况，先清除定时器，这是最稳妥的</span></div><div class="line">    timeout = setTimeout(later, interval);  <span class="comment">//延迟执行</span></div><div class="line">    <span class="keyword">if</span>(callNow) fn.apply(context, args);  <span class="comment">//如果是第一次触发，并且immediate为true，则立即执行</span></div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> myEfficientFn = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//你要做的事</span></div><div class="line">&#125;, <span class="number">250</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, myEfficientFn);</div></pre></td></tr></table></figure>
<p>上面代码有一个巧妙的设计：<code>var callNow = immediate &amp;&amp; !timeout;</code>，判断了timeout，如果存在，说明有定时器在运行，那就不是第一次执行，则不执行<code>if(callNow)</code>里的代码了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这两个代码块是在开发中经常使用的，无论是为了适应需求还是优化性能，我们都没有理由不适用它们。</p>
<p>另外在jQuery的源码中也使用了这种技巧，即便在这个框架横行的时代，还是只有底层的知识能让我感到踏实。</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前&lt;a href=&quot;https://rockjins.js.org/2017/01/26/interviews-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;翻译了一篇博客&lt;/a&gt;，里面有讲到这个，今天单独拎出来聊聊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;事件的触发权很多时候都属于用户，有些情况下会产生问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;向后台发送数据，用户频繁触发，对服务器造成压力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一些浏览器事件:&lt;code&gt;window.onresize&lt;/code&gt;、&lt;code&gt;mousemove&lt;/code&gt;等，触发的频率非常高，会造成浏览器性能问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你碰到这些问题，那就需要用到这些技术了。&lt;/p&gt;
&lt;p&gt;我们先来解释一下函数节流(Throttling)和函数防抖(Debouncing)的区别:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们上班、生活每天都需要坐电梯，用这个比喻再恰当不过了：&lt;/p&gt;
&lt;p&gt;函数防抖和我们平时坐电梯差不多，如果有人进电梯（用户触发事件），那将在10秒钟后出发（执行程序），这时如果又有人进电梯了（用户在10秒内再次触发事件），我们又得等10秒再出发（重新计时）。&lt;/p&gt;
&lt;p&gt;函数节流就比较直观了，有人进电梯，就开始计时，每10秒运送一次，如果没有人，则待机。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两种策略具体使用场景还得看你的实际需求了，但是，只要理解了这个思想，接下来的就好办了。&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title> 不定期更新 JavaScript技巧 </title>
    <link href="http://yoursite.com/2017/02/15/2017-02-15-javascript-skill/"/>
    <id>http://yoursite.com/2017/02/15/2017-02-15-javascript-skill/</id>
    <published>2017-02-14T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> JavaScript技巧，偶尔更新。</p>
</blockquote>
<h3 id="计算数组的极值"><a href="#计算数组的极值" class="headerlink" title="计算数组的极值"></a>计算数组的极值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallest</span>(<span class="params">array</span>)</span>&#123;                         </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, array);             </div><div class="line">&#125;                                                 </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largest</span>(<span class="params">array</span>)</span>&#123;                          </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, array);             </div><div class="line">&#125;  </div><div class="line"></div><div class="line">smallest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>]); <span class="comment">// 0</span></div><div class="line"></div><div class="line">largest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>]); <span class="comment">// 3.3</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="number">14.3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">64</span>].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a - b;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//[1, 8, 14.3, 64]</span></div><div class="line"></div><div class="line"><span class="comment">//从大到小排序就是 b - a</span></div></pre></td></tr></table></figure>
<h3 id="迭代arguments"><a href="#迭代arguments" class="headerlink" title="迭代arguments"></a>迭代arguments</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCall</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    [].forEach.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">val, key</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(key, val)</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">useCall(<span class="string">'Bob Dylan'</span>, <span class="string">'Bob Marley'</span>, <span class="string">'Steve Vai'</span>);</div><div class="line"></div><div class="line"><span class="comment">//0 "Bob Dylan"</span></div><div class="line"><span class="comment">//1 "Bob Marley"</span></div><div class="line"><span class="comment">//2 "Steve Vai"</span></div></pre></td></tr></table></figure>
<h3 id="将arguments转为数组"><a href="#将arguments转为数组" class="headerlink" title="将arguments转为数组"></a>将arguments转为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformToArray</span>(<span class="params">arg</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Array-prototype-forEach-第二个参数"><a href="#Array-prototype-forEach-第二个参数" class="headerlink" title="Array.prototype.forEach()第二个参数"></a>Array.prototype.forEach()第二个参数</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="external">参考：MDN</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> coder = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Shock'</span>,</div><div class="line">  <span class="attr">friends</span>: [<span class="string">'Rocky'</span>, <span class="string">'Bob'</span>],</div><div class="line">  <span class="attr">logHiToFriends</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="string">'use static'</span></div><div class="line">    <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">friend</span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+ <span class="string">' say hi to '</span>+ friend);</div><div class="line">    &#125;,<span class="keyword">this</span>)<span class="comment">//注意这个this，如果不添加这个参数，你可以猜测会发生什么</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="随机生成字母和数字组合的字符串"><a href="#随机生成字母和数字组合的字符串" class="headerlink" title="随机生成字母和数字组合的字符串"></a>随机生成字母和数字组合的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>);</div><div class="line"><span class="comment">//un80usvvsgcpi0rffskf39pb9</span></div><div class="line"><span class="comment">//02aoe605zgg5xqup6fdclnb3xr</span></div><div class="line"><span class="comment">//ydzr1swdxjg3yolkb95p14i</span></div></pre></td></tr></table></figure>
<h3 id="使用IIFE解决循环问题"><a href="#使用IIFE解决循环问题" class="headerlink" title="使用IIFE解决循环问题"></a>使用IIFE解决循环问题</h3><p><em>unexpected:</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    funcs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i); &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    func();     <span class="comment">// 输出数值 "10" 十次</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>expected:</em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    funcs.push((<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(value);</div><div class="line">        &#125;</div><div class="line">    &#125;(i)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    func();     <span class="comment">// 从 0 到 9 依次输出</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用let解决循环问题"><a href="#使用let解决循环问题" class="headerlink" title="使用let解决循环问题"></a>使用let解决循环问题</h3><p>这是<code>let</code>独有的特性(<a href="https://sagittarius-rev.gitbooks.io/understanding-ecmascript-6-zh-ver/content/chapter_1.html#let-declarations-in-loops" target="_blank" rel="external">参考</a>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> funcs = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    funcs.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">funcs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    func();     <span class="comment">// 从 0 到 9 依次输出</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="判断两个小数是否相等"><a href="#判断两个小数是否相等" class="headerlink" title="判断两个小数是否相等"></a>判断两个小数是否相等</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//因为javascript数字通常被输入为十进制的浮点数，但内部却被表示为二进制，所以计算结果会有偏差：</span></div><div class="line"></div><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> <span class="comment">//0.30000000000000004</span></div><div class="line"></div><div class="line"><span class="number">0.1</span> + <span class="number">1</span> - <span class="number">1</span> <span class="comment">//0.10000000000000009</span></div><div class="line"></div><div class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span> <span class="comment">//false</span></div><div class="line"></div><div class="line"><span class="comment">//所以我们不应该直接比较非整数，而是取其上限，把误差计算进去</span></div><div class="line"><span class="comment">//这样一个上限称为 machine epsilon，双精度的标准epsilon值是2^-53</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-53</span>); <span class="comment">//1.1102230246251565e-16</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">epsEqu</span>(<span class="params">x,y</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(x - y) &lt; EPSILON;</div><div class="line">&#125;</div><div class="line"></div><div class="line">epsEqu(<span class="number">0.1</span>+<span class="number">0.2</span>, <span class="number">0.3</span>) <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h3 id="Math-round函数的坑"><a href="#Math-round函数的坑" class="headerlink" title="Math.round函数的坑"></a>Math.round函数的坑</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.round(<span class="number">-3.2</span>) <span class="comment">//-3</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>.round(<span class="number">-3.5</span>) <span class="comment">//-3(这个就奇怪了)</span></div><div class="line"></div><div class="line"><span class="built_in">Math</span>.round(<span class="number">-3.8</span>) <span class="comment">//-4</span></div><div class="line"></div><div class="line"><span class="comment">//其实，Math.round(x)等同于：</span></div><div class="line"><span class="built_in">Math</span>.floor(x + <span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<h3 id="巧用-和-amp-amp"><a href="#巧用-和-amp-amp" class="headerlink" title="巧用||和&amp;&amp;"></a>巧用||和&amp;&amp;</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = $ || <span class="number">233</span>;</div><div class="line"><span class="comment">//如果$存在，则把$赋值给bar；如果$不存在，则把233赋值给bar</span></div><div class="line"></div><div class="line">$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ =  jQuery);  </div><div class="line"><span class="comment">//如果$不存在,则把jQuery赋值给window.$；如果$存在，则不执行后面的表达式</span></div></pre></td></tr></table></figure>
<h3 id="使用break-labels退出循环"><a href="#使用break-labels退出循环" class="headerlink" title="使用break + labels退出循环"></a>使用break + labels退出循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findNumber</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  loop:&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span>(arr[i]%<span class="number">2</span> == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">break</span> loop;<span class="comment">//表示退出loop区块</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//这句代码是不会执行的，如果上面只是break，for循环之后的代码还是会执行</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">findNumber([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]);</div></pre></td></tr></table></figure>
<h3 id="简单实现合并对象"><a href="#简单实现合并对象" class="headerlink" title="简单实现合并对象"></a>简单实现合并对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">root</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">arguments</span>[i]) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">arguments</span>[i].hasOwnProperty(key)) &#123;</div><div class="line">        root[key] = <span class="built_in">arguments</span>[i][key];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> merged = merge(</div><div class="line">  &#123;<span class="attr">name</span>:<span class="string">'Shock'</span>&#125;,</div><div class="line">  &#123;<span class="attr">city</span>:<span class="string">'Shenzhen'</span>&#125;</div><div class="line">)<span class="comment">//&#123;name:'Shock',city:'Shenzhen'&#125;</span></div></pre></td></tr></table></figure>
<h3 id="理解map和parseInt"><a href="#理解map和parseInt" class="headerlink" title="理解map和parseInt"></a>理解map和parseInt</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="built_in">parseInt</span>);</div><div class="line"><span class="comment">//[1, NaN, NaN]</span></div><div class="line"></div><div class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">parseInt</span>(x,<span class="number">10</span>)&#125;);</div><div class="line"><span class="comment">//[1, 2, 3]</span></div></pre></td></tr></table></figure>
<h3 id="上传图片预览功能"><a href="#上传图片预览功能" class="headerlink" title="上传图片预览功能"></a>上传图片预览功能</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">onchange</span>=<span class="string">"showPreview(this)"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"portrait"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"70"</span> <span class="attr">height</span>=<span class="string">"75"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPreview</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> file = source.files[<span class="number">0</span>];</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.FileReader) &#123;</div><div class="line">      <span class="keyword">var</span> fr = <span class="keyword">new</span> FileReader();</div><div class="line">      fr.onloadend = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"portrait"</span>).src = e.target.result;</div><div class="line">      &#125;;</div><div class="line">      fr.readAsDataURL(file);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="微信内部修改document-title"><a href="#微信内部修改document-title" class="headerlink" title="微信内部修改document.title"></a>微信内部修改document.title</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params">title</span>) </span>&#123;</div><div class="line">  <span class="built_in">document</span>.title = title;</div><div class="line">  <span class="keyword">if</span> (<span class="regexp">/ip(hone|od|ad)/i</span>.test(navigator.userAgent)) &#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    i.src = <span class="string">'/favicon.ico'</span>;</div><div class="line">    i.style.display = <span class="string">'none'</span>;</div><div class="line">    i.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        i.remove();</div><div class="line">      &#125;, <span class="number">9</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(i);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setTitle(<span class="string">"要修改的标题"</span>);</div></pre></td></tr></table></figure>
<h3 id="快速克隆一个对象"><a href="#快速克隆一个对象" class="headerlink" title="快速克隆一个对象"></a>快速克隆一个对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Rocker = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name,</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> shock = <span class="keyword">new</span> Rocker(<span class="string">'Shock'</span>, <span class="number">24</span>);</div><div class="line"></div><div class="line">shock.age = <span class="number">99</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cloneShock = <span class="built_in">Object</span>.create(shock);</div><div class="line"></div><div class="line">cloneShock.name <span class="comment">// "Shock"</span></div><div class="line">cloneShock.age <span class="comment">// 99</span></div><div class="line"></div><div class="line"><span class="comment">//在不支持ES5的浏览器下，实现create方法如下：</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.create = <span class="built_in">Object</span>.create || <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">  F.prototype = obj;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断一个值是否是对象"><a href="#判断一个值是否是对象" class="headerlink" title="判断一个值是否是对象"></a>判断一个值是否是对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> value === <span class="built_in">Object</span>(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">isObject(&#123;&#125;); <span class="comment">// true</span></div><div class="line">isObject(<span class="number">123</span>);  <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="为构造器模拟apply功能"><a href="#为构造器模拟apply功能" class="headerlink" title="为构造器模拟apply功能"></a>为构造器模拟apply功能</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!<span class="built_in">Function</span>.prototype.construct)&#123;</div><div class="line">  <span class="built_in">Function</span>.prototype.construct = <span class="function"><span class="keyword">function</span>(<span class="params">argArray</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(argArray))&#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Arguments must be an array"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> constr = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> nullaryFunc = <span class="built_in">Function</span>.prototype.bind.apply(</div><div class="line">      constr,[<span class="literal">null</span>].concat(argArray));</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> nullaryFunc();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用:</span></div><div class="line"><span class="built_in">Date</span>.construct([<span class="number">2017</span>, <span class="number">02</span>, <span class="number">14</span>]); <span class="comment">//  Tue Mar 14 2017 00:00:00 GMT+0800 (CST)</span></div></pre></td></tr></table></figure>
<h3 id="防止高频调用的debounce函数"><a href="#防止高频调用的debounce函数" class="headerlink" title="防止高频调用的debounce函数"></a>防止高频调用的debounce函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//immediate参数判断是否立即执行</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> timeout;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> context = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      timeout = <span class="literal">null</span>;</div><div class="line">      <span class="keyword">if</span>(!immediate) func.apply(context, args);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</div><div class="line">    clearTimeout(timeout);</div><div class="line">    timeout = setTimeout(later, wait);</div><div class="line">    <span class="keyword">if</span>(callNow) func.apply(context, args);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> myEfficientFn = debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//你要做的事</span></div><div class="line">&#125;, <span class="number">250</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, myEfficientFn);</div></pre></td></tr></table></figure>
<h3 id="设定时间-频率循环检测函数"><a href="#设定时间-频率循环检测函数" class="headerlink" title="设定时间/频率循环检测函数"></a>设定时间/频率循环检测函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">poll</span>(<span class="params">fn, callback, err, timeout, interval</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> startTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</div><div class="line">  <span class="keyword">var</span> pi = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">Math</span>.floor(((<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() - startTime) / <span class="number">1000</span>) &lt;= timeout) &#123;</div><div class="line">      <span class="keyword">if</span>(fn()) &#123;</div><div class="line">        callback();</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="built_in">window</span>.clearInterval(pi);</div><div class="line">      err();</div><div class="line">    &#125;</div><div class="line">  &#125;, interval)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="禁止重复调用、只允许执行一次的once-函数"><a href="#禁止重复调用、只允许执行一次的once-函数" class="headerlink" title="禁止重复调用、只允许执行一次的once 函数"></a>禁止重复调用、只允许执行一次的once 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn, context</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(fn) &#123;</div><div class="line">      result = fn.apply(context || <span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">      fn = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> canOnlyFireOnce = once(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'只触发一次！'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">canOnlyFireOnce(); <span class="comment">// "只触发一次"</span></div><div class="line">canOnlyFireOnce(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h3 id="获取一个链接的绝对地址"><a href="#获取一个链接的绝对地址" class="headerlink" title="获取一个链接的绝对地址"></a>获取一个链接的绝对地址</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getAbsoluteUrl = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!a) a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</div><div class="line">    a.href = url;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> a.href;</div><div class="line">  &#125;;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line">getAbsoluteUrl(<span class="string">"/something"</span>); <span class="comment">//https://rockjins.github.io/something</span></div></pre></td></tr></table></figure>
<h3 id="uncurring实现方法之一"><a href="#uncurring实现方法之一" class="headerlink" title="uncurring实现方法之一"></a>uncurring实现方法之一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.uncurring = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurring();</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  push(<span class="built_in">arguments</span>, <span class="number">4</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);   <span class="comment">//输出：[1, 2, 3, 4]</span></div><div class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; JavaScript技巧，偶尔更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;计算数组的极值&quot;&gt;&lt;a href=&quot;#计算数组的极值&quot; class=&quot;headerlink&quot; title=&quot;计算数组的极值&quot;&gt;&lt;/a&gt;计算数组的极值&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;smallest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array&lt;/span&gt;)&lt;/span&gt;&amp;#123;                         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min.apply(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;, array);             &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;                                                 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;largest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array&lt;/span&gt;)&lt;/span&gt;&amp;#123;                          &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max.apply(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;, array);             &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;smallest([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.3&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;largest([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2.2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3.3&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 3.3&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title> Some picture about Johnny Depp &amp; Marilyn Manson </title>
    <link href="http://yoursite.com/2017/02/15/2017-02-15-depp-manson/"/>
    <id>http://yoursite.com/2017/02/15/2017-02-15-depp-manson/</id>
    <published>2017-02-14T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> Two paranoid men.</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-d6cfef052d582cc2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-a32a1599de1d88f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-b6158465b78b7219.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-7bed21eb8d8856ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-85ebbc3e6d749c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-4c66cc2c3bd6216e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-eb3914a49a2a5881.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2859850-0f908ba1b4f51286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-2ea7b9a6719f5032.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-e94916327582ec56.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-af3a8984ea173efb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-25acc40c8c08c71e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-caacfee7fa6f3e43.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-76fb722d2b66ae29.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-6bde7120c729c320.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-0fa21f8e9bcd4d81.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-135a23090bc4428a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; Two paranoid men.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2859850-d6cfef052d582cc2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2859850-a32a1599de1d88f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Music" scheme="http://yoursite.com/categories/Music/"/>
    
    
      <category term="Picture" scheme="http://yoursite.com/tags/Picture/"/>
    
  </entry>
  
  <entry>
    <title> 简单理解JavaScript中的柯里化和反柯里化 </title>
    <link href="http://yoursite.com/2017/02/15/2017-02-15-curring-uncurring/"/>
    <id>http://yoursite.com/2017/02/15/2017-02-15-curring-uncurring/</id>
    <published>2017-02-14T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>就像最早听到斐波拉切数列一样，第一次听到柯里化我也是懵逼的</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文旨在让大家简单理解柯里化和反柯里化，这里不做深入探究，只求能带大家装逼就好，看完还不懂你砍我。</p>
<p>我们先来简单了解一下他们的作用。</p>
<p>柯里化又称<em>部分求值</em>，字面意思就是不会立刻求值，而是到了需要的时候再去求值。如果看的懵逼，没事，看完整篇文章再回过头来看这里你就会豁然开朗。</p>
<p>反柯里化的作用是，当我们调用某个方法，不用考虑这个对象在被设计时，是否拥有这个方法，只要这个方法适用于它，我们就可以对这个对象使用它。</p>
<a id="more"></a>
<h3 id="柯里化-curring"><a href="#柯里化-curring" class="headerlink" title="柯里化(curring)"></a>柯里化(curring)</h3><p>我们有这样一个场景，记录程序员一个月的加班总时间，那么好，我们首先要做的是记录程序员每天加班的时间，然后把一个月中每天的加班的时间相加，就得到了一个月的加班总时间。</p>
<p>但问题来了，我们有很多种方法可以实现它，比如最简单的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> monthTime = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">overtime</span>(<span class="params">time</span>) </span>&#123;</div><div class="line"> <span class="keyword">return</span> monthTime += time;</div><div class="line">&#125;</div><div class="line"></div><div class="line">overtime(<span class="number">3.5</span>);	<span class="comment">// 第一天</span></div><div class="line">overtime(<span class="number">4.5</span>);	<span class="comment">// 第二天</span></div><div class="line">overtime(<span class="number">2.1</span>);	<span class="comment">// 第三天</span></div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(monthTime);	<span class="comment">// 10.1</span></div></pre></td></tr></table></figure>
<p>每次传入加班时间都进行累加，这样当然没问题，但你知道，如果数据量很大的情况下，这样会大大牺牲性能。</p>
<p>那怎么办？这就是柯里化要解决的问题。</p>
<p>其实我们不必每天都计算加班时间，只需要保存好每天的加班时间，在月底时计算这个月总共的加班时间，所以，其实只需要在月底计算一次就行。</p>
<p>下面的overtime函数还不是一个柯里化函数的完整实现，但可以帮助我们了解其核心思想：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> overtime = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = [];</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">var</span> time = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = args.length; i &lt; l; i++) &#123;</div><div class="line">        time += args[i];</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> time;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      [].push.apply(args, <span class="built_in">arguments</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">overtime(<span class="number">3.5</span>);	<span class="comment">// 第一天</span></div><div class="line">overtime(<span class="number">4.5</span>);	<span class="comment">// 第二天</span></div><div class="line">overtime(<span class="number">2.1</span>);	<span class="comment">// 第三天</span></div><div class="line"><span class="comment">//...</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( overtime() );	<span class="comment">// 10.1</span></div></pre></td></tr></table></figure>
<p>柯里化的核心思想就是这样，看到这里你肯定已经懂了，至于真正的柯里化函数，网上有很多，大家可以去Google一下。</p>
<h3 id="反柯里化-uncurring"><a href="#反柯里化-uncurring" class="headerlink" title="反柯里化(uncurring)"></a>反柯里化(uncurring)</h3><p>反柯里化的的作用已经在前言说过了，这里讲下它的由来。</p>
<p>2011年JavaScript之父Brendan Eich发表了一篇Twitter，提出了反柯里化这个思想，下面这段代码是反柯里化的实现方式之一：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.uncurring = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们先来看看上面这段代码有什么作用。</p>
<p>我们要把Array.prototype.push方法转换成一个通用的push函数，只需要这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurring();</div><div class="line"></div><div class="line"><span class="comment">//测试一下</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  push(<span class="built_in">arguments</span>, <span class="number">4</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">//[1, 2, 3, 4]</span></div><div class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p><code>arguments</code>本来是没有<code>push</code>方法的，通常，我们都需要用<code>Array.prototype.push.call</code>来实现<code>push</code>方法，但现在，直接调用<code>push</code>函数，既简洁又意图明了。</p>
<p>就和前言写的那样，我们不用考虑对象是否拥有这个方法，只要它适用于这个方法，那就可以使用这个方法（类似于<a href="https://zh.wikipedia.org/zh-hans/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B" target="_blank" rel="external">鸭子类型</a>）。</p>
<p>我们来分析一下调用<code>Array.prototype.push.uncurring()</code>这句代码时，发生了什么事情：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.uncurring = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;  <span class="comment">//self此时是Array.prototype.push</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</div><div class="line">    <span class="comment">//obj 是&#123;</span></div><div class="line">    <span class="comment">//  "length": 1,</span></div><div class="line">    <span class="comment">//  "0": 1</span></div><div class="line">    <span class="comment">//&#125;</span></div><div class="line">    <span class="comment">//arguments的第一个对象被截去(也就是调用push方法的对象),剩下[2]</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> self.apply(obj, <span class="built_in">arguments</span>);</div><div class="line">    <span class="comment">//相当于Array.prototype.push.apply(obj, 2);</span></div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//测试一下</span></div><div class="line"><span class="keyword">var</span> push = <span class="built_in">Array</span>.prototype.push.uncurring();</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="string">"length"</span>: <span class="number">1</span>,</div><div class="line">  <span class="string">"0"</span> : <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">push(obj, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log( obj ); <span class="comment">//&#123;0: 1,1: 2, length: 2 &#125;</span></div></pre></td></tr></table></figure>
<p>看到这里你应该对柯里化和反柯里化有了一个初步的认识了，但要熟练的运用在开发中，还需要我们更深入的去了解它们内在的含义。</p>
<h3 id="本文参考："><a href="#本文参考：" class="headerlink" title="本文参考："></a>本文参考：</h3><ol>
<li><p><a href="https://book.douban.com/subject/26382780/" target="_blank" rel="external">JavaScript设计模式与开发实践</a></p>
</li>
<li><p><a href="https://medium.com/@kevincennis/currying-in-javascript-c66080543528#.tploy2syn" target="_blank" rel="external">Currying in JavaScript</a></p>
</li>
<li><p><a href="http://javascript.crockford.com/www_svendtofte_com/code/curried_javascript/" target="_blank" rel="external">Curried JavaScript functions</a></p>
</li>
</ol>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;就像最早听到斐波拉切数列一样，第一次听到柯里化我也是懵逼的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文旨在让大家简单理解柯里化和反柯里化，这里不做深入探究，只求能带大家装逼就好，看完还不懂你砍我。&lt;/p&gt;
&lt;p&gt;我们先来简单了解一下他们的作用。&lt;/p&gt;
&lt;p&gt;柯里化又称&lt;em&gt;部分求值&lt;/em&gt;，字面意思就是不会立刻求值，而是到了需要的时候再去求值。如果看的懵逼，没事，看完整篇文章再回过头来看这里你就会豁然开朗。&lt;/p&gt;
&lt;p&gt;反柯里化的作用是，当我们调用某个方法，不用考虑这个对象在被设计时，是否拥有这个方法，只要这个方法适用于它，我们就可以对这个对象使用它。&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Curring" scheme="http://yoursite.com/tags/Curring/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』3个原因让我像躲避瘟疫一样避免使用JS匿名函数 </title>
    <link href="http://yoursite.com/2017/02/13/2017-02-14-three-reasons-i-avoid-anonymous-js-functions-like-the-plague/"/>
    <id>http://yoursite.com/2017/02/13/2017-02-14-three-reasons-i-avoid-anonymous-js-functions-like-the-plague/</id>
    <published>2017-02-12T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://medium.com/@justindanielfuller/three-reasons-i-avoid-anonymous-js-functions-like-the-plague-7f985c27a006#.cks2rw59d" target="_blank" rel="external">Read the original</a></p>
</blockquote>
<hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>无论何时阅读代码，你一定会看到匿名函数。有时它们被称为lambdas，有时被称为匿名函数（anonymous functions），但不管怎样，我认为他们是糟糕的。</p>
<p>如果你不知道什么是匿名函数，这里有一段引用：</p>
<blockquote>
<p>匿名函数是一个可以在运行时动态声明的函数。之所以称为匿名函数是因为：他们没有像普通函数一样被赋予名字(name)。 ——Helen Emerson, <a href="Helephant.com">Helephant.com</a></p>
</blockquote>
<p>它们看起来有点像这个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function() &#123; ... code ... &#125;</div><div class="line"></div><div class="line">OR</div><div class="line"></div><div class="line">（args） =&gt; &#123; ... code ... &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>下面我会举一些例子给你，实际上，只有在非用不可的情况下才会使用匿名函数。它们不是你的首选，并且你要知道为什么。一旦你这么做了，你的代码会更简洁、容易去阅读，BUG也更容易被捕获，让我们看看这3个避免使用它们的原因吧！</p>
<h3 id="堆栈跟踪"><a href="#堆栈跟踪" class="headerlink" title="堆栈跟踪"></a>堆栈跟踪</h3><p>你终于写完了代码，无论你有多擅长编码，当你运行代码时，总会有一些报错。有些错误很容易被捕获，但有时并不是这样。</p>
<p>如果错误很容易被捕获到，好的，那说明你知道他们错在哪！为此，我们使用所谓的<em>堆栈跟踪</em>，如果你对<em>堆栈跟踪</em>一点都不了解，<a href="https://developers.google.com/web/tools/chrome-devtools/console/track-exceptions" target="_blank" rel="external">Google给了我们很好的介绍</a>。</p>
<p>假设我们有一个很简单的项目:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">middle</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">end</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.lg(<span class="string">'test'</span>);</div><div class="line">    &#125;)()</div><div class="line">  &#125;)()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但看起来我们做了一些愚蠢得难以置信的事，就像拼错<code>console.log</code>。在我们这个小项目中，这没什么大不了的。但也许这是一个<em>巨型</em>项目中的一个片段，有大量的模块与它相互依赖。最重要的是，让我们假装你没有烦这种愚蠢的错误。那个初级开发者在他准备离开度假的前一天，把它推到了仓库中！</p>
<p>现在，我们将去跟踪错误。根据我们精确的命名函数，我们得到的堆栈跟踪像下面这样：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-5e7c917155cef6b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>幸好你给函数命名了，初级开发者！现在，我们能轻松的跟踪到这个BUG。</p>
<p>但是…一旦我们修复了它，又会出现新的BUG。这时，就要请出更高级的开发者了。他们知道如何使用匿名函数，并大量的使用在他们的代码中。结果是，他们发现了一个BUG，我们去跟踪BUG。</p>
<p>他们的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.lg(<span class="string">'test'</span>);</div><div class="line">    &#125;)();</div><div class="line">  &#125;)();</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>多令人惊讶，这个高级开发者也忘了怎么拼写<code>console.log</code>！这是一个偶然吗？！告诉你一个悲痛的消息，他们没有给函数命名。</p>
<p>控制台会展示什么给我们？</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-8ce8fb83de9c9dfc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>没事…我们还有行号提示？ 在这个例子中，我们好像有7行代码。如果我们在处理一个巨大的代码库？如果每行有10k的代码?如果行号相差很远？如果代码被压缩了、没有map文件、行号提示几乎是没用的？</p>
<p>我认为你可以非常容易的回答这些问题。答案是：<em>你会度过糟糕的一天</em>。</p>
<h3 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h3><p>看吧，我知道你不服气。你仍然爱着匿名函数，而且你永远也不会有BUG。抱歉，我忘了告诉你如何写出完美的代码。让我们来看看这点！</p>
<p>检查下面两个不同的代码示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function initiate (arguments) &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    try &#123;</div><div class="line">      if (arguments) &#123;</div><div class="line">         return resolve(true);</div><div class="line">      &#125;</div><div class="line">      return resolve(false);</div><div class="line">    &#125; catch (e) &#123;</div><div class="line">      reject(e);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">initiate(true)</div><div class="line">  .then(res =&gt; &#123;</div><div class="line">        if (res) &#123;</div><div class="line">          doSomethingElse();</div><div class="line">        &#125; else &#123;</div><div class="line">          doSomething();</div><div class="line">        &#125;</div><div class="line">  ).catch(e =&gt; &#123;</div><div class="line">            logError(e.message);</div><div class="line">            restartApp();</div><div class="line">          &#125;</div><div class="line">  );</div></pre></td></tr></table></figure>
<p>这是一个人为的例子，但我认为你能get到那个点。我们有一个方法，它返回一个Promise对象，我们用这个对象去管理可能返回的不同请求。</p>
<p>你或许认为这个代码阅读起来不太难，但我认为它能写的更好。</p>
<p>如果我们摆脱所有匿名函数，结果会如何？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initiate</span> (<span class="params">arguments</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(checkForArguments);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkForArguments</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>) &#123;</div><div class="line">     <span class="keyword">return</span> resolve(<span class="literal">true</span>);   </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resolve(<span class="literal">false</span>);</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    reject(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">evaluateRes</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (res) &#123;</div><div class="line">    doSomethingElse();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    doSomething();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">  logError(e.message);</div><div class="line">  restartApp();</div><div class="line">&#125;</div><div class="line">initiate(<span class="literal">true</span>)</div><div class="line">  .then(evaluateRes)</div><div class="line">  .catch(handleError);</div></pre></td></tr></table></figure>
<p>好了，让我们来屡清一下思路：这段代码比之前的要长，但我认为它比之前的可读性高得多！我们使用了非常棒的命名函数而不是匿名函数。只要我们看到命名函数，它的名字就会暗示我们接下来会发生什么。它消除了我们在阅读代码时的心理障碍。</p>
<p>这也有利于独立问题。不仅仅是创建方法，传递参数，运行逻辑，在第二个例子中，传递参数给<code>then</code>和<code>catch</code>，我们可以很清楚的知道函数中的每一处都发生了什么。</p>
<p>时间不多了，否则我要让你信服这些代码可以更加易读。也许你任然不相信，那尝试看看第三个论据…</p>
<h3 id="可重用性"><a href="#可重用性" class="headerlink" title="可重用性"></a>可重用性</h3><p>你有注意到最后一个例子吗？所有函数都是可以互相调用的！</p>
<p>当你使用匿名函数时，它们很难遍布你的程序。重用代码可以降低能耗，你也不用一遍遍写重复的代码了。还有大家都知道的一点，代码越少，引入BUG的几率越小，而且用户可以加载更少的资源。共赢的局面！</p>
<p>相反的，命名函数可以在它的整个作用域中使用，而不需要像变量一样四处传递。你写的代码会很自然的更具重用性，因为，你可以重用他们！</p>
<h3 id="匿名函数好吗？"><a href="#匿名函数好吗？" class="headerlink" title="匿名函数好吗？"></a>匿名函数好吗？</h3><p>是的。我必须承认，有时它们也是最好的选择！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> stuff = [</div><div class="line">  &#123; <span class="attr">hide</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">'justin'</span> &#125;,</div><div class="line">  &#123; <span class="attr">hide</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">'lauren'</span> &#125;,</div><div class="line">  &#123; <span class="attr">hide</span>: <span class="literal">false</span>, <span class="attr">name</span>: <span class="string">'max'</span> &#125;,</div><div class="line">];</div><div class="line"><span class="keyword">const</span> filteredStuff = stuff.filter(<span class="function"><span class="params">s</span> =&gt;</span> !s.hide);</div></pre></td></tr></table></figure>
<p>这个匿名函数<code>s =&gt; !s.hide</code>小而简洁，它不会污染其它地方，也不会用在其它地方。它会在<code>stuff.filter</code>的堆栈跟踪中显示。如果你需要重用它，最好重用整个语句：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterByHide</span> (<span class="params">array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> array.filter(<span class="function"><span class="params">item</span> =&gt;</span> !item.hide);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有时你需要包裹你所有的代码在一个匿名函数中，以保证全局作用域不被污染。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"> ... your code here ...</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>顶级匿名函数不会影响到堆栈跟踪。代码重用是不会造成伤害的，因为代码重用的全部目的就是保持方法被包含。</p>
<p>我相信还有其他地方适合使用匿名函数，在评论中分享一下吧！</p>
<p>感谢阅读，离开这里后，停止写匿名函数吧！</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@justindanielfuller/three-reasons-i-avoid-anonymous-js-functions-like-the-plague-7f985c27a006#.cks2rw59d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;无论何时阅读代码，你一定会看到匿名函数。有时它们被称为lambdas，有时被称为匿名函数（anonymous functions），但不管怎样，我认为他们是糟糕的。&lt;/p&gt;
&lt;p&gt;如果你不知道什么是匿名函数，这里有一段引用：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匿名函数是一个可以在运行时动态声明的函数。之所以称为匿名函数是因为：他们没有像普通函数一样被赋予名字(name)。 ——Helen Emerson, &lt;a href=&quot;Helephant.com&quot;&gt;Helephant.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它们看起来有点像这个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function() &amp;#123; ... code ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OR&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（args） =&amp;gt; &amp;#123; ... code ... &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>『翻译』一些 JavaScript 优化的细节 </title>
    <link href="http://yoursite.com/2017/02/13/2017-02-13-tiny-javascript-optimizations/"/>
    <id>http://yoursite.com/2017/02/13/2017-02-13-tiny-javascript-optimizations/</id>
    <published>2017-02-12T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://manong.blog/post/tiny-javascript-optimizations/" target="_blank" rel="external">Read the original</a></p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>优化客户端JavaScript代码常常是不值得的，因为这会失去代码可读性。如果你的APP运行缓慢，你可以考虑是否能优化请求，减少对DOM的操作，尽量少的操local storage，或者牺牲其它的来换取性能。几乎没有足够的数据认为客户端需要让代码同步运行速度更快。我认为接下来的代码十分具有可读性，如果你也需要，为什么不使用它呢？</p>
<h3 id="递归尾调用-Recursive-tail-calls"><a href="#递归尾调用-Recursive-tail-calls" class="headerlink" title="递归尾调用(Recursive tail calls)"></a>递归尾调用(Recursive tail calls)</h3><p>在下面例子中，函数每次执行都会创建一个新的栈(维持新添加的环境)。所以，如果参数<code>x:5000</code>，那就会创建5000个栈。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span> + foo(x<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用一个累加数，就不会有新添加的环境需要被维持，所以返回的栈可以代替当前函数的栈。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, accumulated</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> foo(x<span class="number">-1</span>, accumulated + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用逻辑表达式"><a href="#使用逻辑表达式" class="headerlink" title="使用逻辑表达式"></a>使用逻辑表达式</h3><p>与C语言不同，在JavaScript中逻辑表达式可以用来做操作运算，而不只是判断真假。这意味着我们可以写出像下面一样简单的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!x) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> x.y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化后的版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> x &amp;&amp; x.y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="散列法-gt-迭代"><a href="#散列法-gt-迭代" class="headerlink" title="散列法 &gt; 迭代"></a>散列法 &gt; 迭代</h3><p><code>switch</code>语句可以让返回的数据在结构中重现。但通常，我们只需要查找和比较一个文件，使用散列法会比迭代快很多。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterating</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'a'</span>:</div><div class="line">      <span class="comment">// do something with action.data</span></div><div class="line">      ...</div><div class="line">      return;</div><div class="line">    <span class="keyword">case</span> ...</div><div class="line">    case <span class="string">'z'</span>:</div><div class="line">      ...</div><div class="line">      return;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">iterating(&#123;<span class="attr">type</span>: <span class="string">'z'</span>, <span class="attr">data</span>: <span class="string">'asdf'</span>&#125;);</div></pre></td></tr></table></figure>
<p>迭代26个元素。</p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lookupTable = &#123;</div><div class="line">  <span class="string">'a'</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;...&#125;,</div><div class="line">  ...</div><div class="line">  <span class="string">'z'</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;...&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashing</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> handler = lookupTable[action.type];</div><div class="line">  <span class="keyword">if</span> (handler) &#123;</div><div class="line">    <span class="keyword">return</span> handler(action.data);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个比较和一个查找。</p>
<p>当然，这适用于任何可迭代的元素(arrays,strings,etc)，但switch也有它的一些优势。</p>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://manong.blog/post/tiny-javascript-optimizations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;优化客户端JavaScript代码常常是不值得的，因为这会失去代码可读性。如果你的APP运行缓慢，你可以考虑是否能优化请求，减少对DOM的操作，尽量少的操local storage，或者牺牲其它的来换取性能。几乎没有足够的数据认为客户端需要让代码同步运行速度更快。我认为接下来的代码十分具有可读性，如果你也需要，为什么不使用它呢？&lt;/p&gt;
&lt;h3 id=&quot;递归尾调用-Recursive-tail-calls&quot;&gt;&lt;a href=&quot;#递归尾调用-Recursive-tail-calls&quot; class=&quot;headerlink&quot; title=&quot;递归尾调用(Recursive tail calls)&quot;&gt;&lt;/a&gt;递归尾调用(Recursive tail calls)&lt;/h3&gt;&lt;p&gt;在下面例子中，函数每次执行都会创建一个新的栈(维持新添加的环境)。所以，如果参数&lt;code&gt;x:5000&lt;/code&gt;，那就会创建5000个栈。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + foo(x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果使用一个累加数，就不会有新添加的环境需要被维持，所以返回的栈可以代替当前函数的栈。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, accumulated&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; foo(x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, accumulated + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
  <entry>
    <title>『翻译』JavaScript 函数式编程 </title>
    <link href="http://yoursite.com/2017/02/11/2017-02-11-functional-programming/"/>
    <id>http://yoursite.com/2017/02/11/2017-02-11-functional-programming/</id>
    <published>2017-02-10T16:00:00.000Z</published>
    <updated>2017-05-12T07:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://dealwithjs.io/functional-programming-in-javascript/" target="_blank" rel="external">Read the original</a></p>
</blockquote>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>函数式编程与我们以往的编程习惯有许多不同。这篇文章举了一些JavaScript的例子，介绍了函数式编程中重要的概念。附加的文章会让你更深入的了解JavaScript中的函数式编程。</p>
<p>本文源码可以在<a href="https://github.com/gergob" target="_blank" rel="external">GitHub</a>上找到，放在<a href="https://github.com/gergob/jsFunctionalProgramming" target="_blank" rel="external">jsFunctionalProgramming</a>仓库中。</p>
<blockquote>
<p>我要感谢<a href="http://dealwithjs.io/author/csaba/" target="_blank" rel="external">Csaba Hellinger</a>的支持和投入，在他的帮助下我才完成这篇文章。</p>
</blockquote>
<a id="more"></a>
<h2 id="PART-1"><a href="#PART-1" class="headerlink" title="PART 1"></a>PART 1</h2><p>函数式编程由<a href="https://en.wikipedia.org/wiki/Lambda_calculus" target="_blank" rel="external">Lambda Calculus</a>演化而来，它是一个抽象数学的函数表述，我们将思考怎么把它运用在现实中。</p>
<blockquote>
<p>函数式编程是声明式编程的范式。</p>
</blockquote>
<h3 id="为什么要使用函数式编程？"><a href="#为什么要使用函数式编程？" class="headerlink" title="为什么要使用函数式编程？"></a>为什么要使用函数式编程？</h3><p>函数式编程有以下具体特性：</p>
<ol>
<li><p><em>避免状态改变（可变的数据）</em> - 函数式编程的特性之一就是：函数在应用中不会改变状态，它们(functions)宁愿从之前的状态之上创建一个新的状态。</p>
</li>
<li><p><em>函数声明 vs 函数表达式</em> - 在函数式编程中，我们定义和描述函数就像数学中的一个方法声明。</p>
</li>
<li><p><em>幂等性</em> - 这意味着我们用相同的参数调用一个函数(不管任何时刻)它都会返回相同的结果，这也可以避免状态的改变。</p>
</li>
</ol>
<p>这三个特性咋一看似乎并没有什么意义，但如果我们更深入的分析，发现在以下三种情况下使用函数式编程能充分发挥这三个特性：</p>
<ol>
<li><p><em>并行的代码执行</em> - 因为函数式编程有<em>幂等性</em>和<em>避免状态改变</em>的特性，用函数方法编写代码会让并行更容易，因为不会出现同步问题。</p>
</li>
<li><p><em>简明、简洁的代码</em> - 因为函数式编程使用方法声明的方式，代码不会像面向过程编程一样，有额外的算法步骤。</p>
</li>
<li><p><em>不同的编程思想</em> - 一旦你真正使用了一门函数式编程语言，你会拥有一种新的编程思想，当你构建应用时也会有新的点子。</p>
</li>
</ol>
<h3 id="f-x-J-s"><a href="#f-x-J-s" class="headerlink" title="f(x) === J(s)"></a>f(x) === J(s)</h3><p><em>javascript</em> 是一门真正的（纯粹的）函数式编程语言吗？</p>
<blockquote>
<p>不！JavaScript并不是一门纯粹的函数式编程语言…</p>
</blockquote>
<h3 id="第一型对象-函数"><a href="#第一型对象-函数" class="headerlink" title="第一型对象 - 函数"></a>第一型对象 - 函数</h3><p>它可以很好的运用在函数式编程中，因为函数是第一性对象。如果在一门编程语言中，函数和其他类型一样，那么这门语言中的函数就是第一型对象。举个例子，函数可以作为参数传递给其他函数，也可以赋值给变量。</p>
<p>我们将检查一些函数是否是第一型对象，但是在这之前，我们先构建一个代码块，我们将像真正的函数式语言一样使用JavaScript。</p>
<p>在大部分纯函数式编程语言中(Haskell, Clean, Erlang)，它们是没有<code>for</code>或者<code>while</code>循环的，所以循环一个列表需要用到递归函数。纯函数式编程语言有语言支持和最好的列表推导式和列表串联。</p>
<p>这里有一个函数实现了<code>for</code>循环，我们将在接下来的代码中用到它，但是你也将看到它在JS中的局限性，因为<a href="http://www.2ality.com/2015/06/tail-call-optimization.html" target="_blank" rel="external">尾部调用优化</a>并没有被广泛的支持，但以后会好起来的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcFor</span>(<span class="params">first, last, step, callback</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//递归inner函数</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>((step &gt; <span class="number">0</span> &amp;&amp; index &gt;= last) || (step &lt; <span class="number">0</span> &amp;&amp; index &lt; last)) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    callback(index);</div><div class="line"></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//接下来进行尾部调用</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    inner(index + step);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">//开始递归</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  inner(first);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>inner</code>函数包含了对停止递归的管理，它传入参数<code>index</code>去调用<code>callback</code>，再递归调用<code>inner(index + step)</code>确保循环传递到下一步。</p>
<blockquote>
<p>递归是函数式编程的一个重要方面。</p>
</blockquote>
<p>现在，让我们看看真正的函数式编程：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyIfAllNumbers</span>(<span class="params">items, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(areNumbers(items)) &#123;</div><div class="line">    <span class="keyword">return</span> funcMap(items, fn);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> [];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>applyIfAllNumbers</code>函数的目的是调用<code>fn</code>函数，并把<code>items</code>中的每个数字作为参数传入，但前提是只有在<code>items</code>数组中都是数字的情况下才去调用。</p>
<p>下面是验证器函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">areNumbers</span>(<span class="params">numbers</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(numbers.length == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> isNumber(number[<span class="number">0</span>]) &amp;&amp; areNumbers(numbers.slice(<span class="number">1</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">isFinite</span>(n) &amp;&amp; +n === n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码简单明了，如果参数是一个数字，<code>isNumber</code>函数返回<code>true</code>，否则返回<code>false</code>。<code>areNumbers</code>函数使用<code>isNumber</code>函数判断<code>numbers</code>数组中是否全是数字（再提醒一次，递归常常被用来实现这种逻辑）。</p>
<p>另一个例子是<code>applyForNumbersOnly</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyForNumbersOnly</span>(<span class="params">items, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> numbers = filter(items, isNumber);</div><div class="line">  <span class="keyword">return</span> funcMap(numbers, fn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样写甚至更简洁：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyForNumbersOnly</span>(<span class="params">items, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> funcMap(filter(items, isNumber), fn);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>applyForNumbersOnly</code>调用<code>fn</code>方法仅仅是为了收集<code>items</code>中的数字。</p>
<p><code>funcMap</code>函数在函数式编程中重现了著名的<code>map</code>函数，但是这里我借助了<code>funcForEach</code>函数来创建它：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcForEach</span>(<span class="params">items, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> funcFor(<span class="number">0</span>, items.length, <span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">idx</span>) </span>&#123;</div><div class="line">    fn(items[idx]);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcMap</span>(<span class="params">items, fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> result = [];</div><div class="line">  funcForEach(items, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</div><div class="line">    result.push(fn(item));</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后还剩<code>filter</code>函数，我们再一次使用递归来实现过滤的逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">input, callback</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">input, callback, index, output</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index === input.length) &#123;</div><div class="line">      <span class="keyword">return</span> output;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> inner(</div><div class="line">      input,</div><div class="line">      callback,</div><div class="line">      index + <span class="number">1</span>,</div><div class="line">      callback(input[index]) ? output.concat(input[index]) : output;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> inner(input, callback, <span class="number">0</span>, []);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JS中的尾调用优化-TCO"><a href="#JS中的尾调用优化-TCO" class="headerlink" title="JS中的尾调用优化(TCO)"></a>JS中的尾调用优化(TCO)</h3><p>在<a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tail-position-calls" target="_blank" rel="external">EcmaScript 2015 TCO</a>文档中有一些用例的定义，这门语言不久就将支持尾调用优化了。最关键的一点就是在你的代码中使用<code>use strict</code>模式，否则JS不能支持尾调用优化。</p>
<p>由于没有内置方法来检测浏览器是否支持尾调动优化，以下代码实现了这个功能：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="string">"use static"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTCOSupported</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> outerStackLen = <span class="keyword">new</span> <span class="built_in">Error</span>().stack.length;</div><div class="line">  <span class="comment">//inner函数的name长度一定不能超过外部函数</span></div><div class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> innerStackLen = <span class="keyword">new</span> <span class="built_in">Error</span>().stack.length;</div><div class="line">    <span class="keyword">return</span> innerStackLen &lt;= outerStackLen;</div><div class="line">  &#125;());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(isTCOSupported() ? <span class="string">"TCO Available"</span> : <span class="string">"TCO N/A"</span>);</div></pre></td></tr></table></figure>
<p>这里有一个重现<code>Math.pow</code>函数的例子，它能从EcmaScript 2015的TCO中获益。</p>
<blockquote>
<p>这个pow函数的实现使用了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters" target="_blank" rel="external">ES6默认参数</a>，让它看上去更简洁。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">powES6</span>(<span class="params">base, power, result=base</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (power === <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(power === <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> powES6(base, power - <span class="number">1</span>, result * base);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先要提醒以下，<code>powES6</code>函数有三个参数而不是两个。第三个参数是计算后的值。我们随身携带<code>return</code>是为了实现让我们的递归调用变成真正的尾调用，让JS可以使用它的尾调用优化技术。</p>
<p>万一我们不能使用ES6的特性，那么我们不推荐使用递归去实现<code>pow</code>函数，因为这门语言还没有提出有关递归的优化，这样实现起来就很复杂了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursivePow</span>(<span class="params">base, power, result</span>) </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (power === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(power === <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> recursivePow(base, power - <span class="number">1</span>, result * base);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">base, power</span>) </span>&#123;  </div><div class="line">    <span class="keyword">return</span> recursivePow(base, power, base);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们把递归计算放在了另一个<code>recursivePow</code>函数中，这个函数有三个参数，就像<code>powES6</code>函数一样。使用一个新函数并把<code>base</code>作为参数传递给它，以此实现ES6中的默认参数逻辑。</p>
<p>在<a href="https://kangax.github.io/compat-table/es6/#test-proper_tail_calls_" target="_blank" rel="external">这个页面</a>你可以查看TCO在不同浏览器和平台的支持情况。</p>
<p>目前只有<em>Safari 10</em>是完全支持TCO的浏览器(在写这篇文章时)，我将进行一些对于<code>pow</code>的测试，来看看它的表现。</p>
<h3 id="测试递归调用"><a href="#测试递归调用" class="headerlink" title="测试递归调用"></a>测试递归调用</h3><p>我使用了<code>powES6</code>和<code>pow</code>函数来进行测试:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stressPow</span>(<span class="params">n</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> result = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n; ++i) &#123;</div><div class="line">        result.push(</div><div class="line">          pow(<span class="number">2</span>, <span class="number">0</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">1</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">2</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">3</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">4</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">5</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">10</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">20</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">30</span>),</div><div class="line">          pow(<span class="number">1</span>, <span class="number">10000</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">40</span>),</div><div class="line">          pow(<span class="number">3</span>, <span class="number">10</span>),</div><div class="line">          pow(<span class="number">4</span>, <span class="number">15</span>),</div><div class="line">          pow(<span class="number">1</span>, <span class="number">11000</span>),</div><div class="line">          pow(<span class="number">3.22</span>, <span class="number">125</span>),</div><div class="line">          pow(<span class="number">3.1415</span>, <span class="number">89</span>),</div><div class="line">          pow(<span class="number">7</span>, <span class="number">2500</span>),</div><div class="line">          pow(<span class="number">2</span>, <span class="number">13000</span>)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> start = performance.now();</div><div class="line"><span class="keyword">var</span> result_standard = stressPow(<span class="number">2500</span>);  </div><div class="line"><span class="keyword">var</span> duration = performance.now() - start;  </div><div class="line"><span class="built_in">console</span>.log(result_standard);  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Duration: <span class="subst">$&#123;duration&#125;</span> ms.`</span>);</div></pre></td></tr></table></figure>
<p>我在Chrome v55, Firefox v50, Safari v9.2 和 Safari v10上测试了以上代码。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-5de2accbb8251a59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>根据上面的数据，我们得出Safari对递归函数的优化效率是最高的。Safari 10对尾调用的支持是最好的，速度比Chrome快了大约2.8倍。Firefox几乎和Safari 9.2 一样棒，这出乎了我的意料。</p>
<p>如果你很喜欢这篇文章，请点个赞哦。（译者注：话说好长啊，好累啊。）</p>
<p>让我们继续函数式!</p>
<blockquote>
<p>PART 2 也即将发出，关于高阶函数和例子，讲解如何编写函数式风格的代码。</p>
</blockquote>
<hr>
<blockquote>
<p>本文作者：余震（Shock）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://dealwithjs.io/functional-programming-in-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;函数式编程与我们以往的编程习惯有许多不同。这篇文章举了一些JavaScript的例子，介绍了函数式编程中重要的概念。附加的文章会让你更深入的了解JavaScript中的函数式编程。&lt;/p&gt;
&lt;p&gt;本文源码可以在&lt;a href=&quot;https://github.com/gergob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;上找到，放在&lt;a href=&quot;https://github.com/gergob/jsFunctionalProgramming&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsFunctionalProgramming&lt;/a&gt;仓库中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我要感谢&lt;a href=&quot;http://dealwithjs.io/author/csaba/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Csaba Hellinger&lt;/a&gt;的支持和投入，在他的帮助下我才完成这篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
  </entry>
  
</feed>
