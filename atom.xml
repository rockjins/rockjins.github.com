<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rockjins Blog</title>
  <subtitle>Mad World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-12T10:05:27.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>余震</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> Guitar Rig组件列表(映射现实硬件) </title>
    <link href="http://yoursite.com/2017/10/12/2017-10-12-guitar-rig-components/"/>
    <id>http://yoursite.com/2017/10/12/2017-10-12-guitar-rig-components/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-10-12T10:05:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Guitar Rig 组件列表，小括号为现实硬件映射</p>
</blockquote>
<h1 id="Amplifiers-箱头"><a href="#Amplifiers-箱头" class="headerlink" title="Amplifiers(箱头)"></a>Amplifiers(箱头)</h1><p>AC Box (Vox AC30)<br>Bass Pro (Ampeg SVT-2 Pro)<br>Citrus (Orange Overdrive OD120)<br>Cool Plex (Marshall JTM45)<br>Gratifier (Mesa/Boogie Dual Rectifier)<br>High White (Hiwatt DR-103)<br>Plex (Marshall 1959 SLP)<br>Hot Plex (Marshall Plexi 1987x)<br>Hot Solo+ (Soldano Hot Rod 100 + or SLO-100)<br>Jazz Amp (Roland Jazz Chorus-120)<br>Jump (Marshall JMP)<br>Lead 800 (Marshall JCM800 Lead)<br>Twang Reverb (Fender Twin Reverb)<br>Tweedman (Fender Bassman)<br>Tweed Delight (Fender Tweed Deluxe)<br>Ultrasonic (Bogner Überschall)<br>Van 51 (Peavey 5150 or Peavey 6505)<br>Rammfire (Mesa/Boogie Dual Rectifier Rev. C. Based on the amplifier &amp; cabinet setup of Rammstein guitarist Richard Z. Kruspe.)</p>
<h1 id="Microphones-麦克风"><a href="#Microphones-麦克风" class="headerlink" title="Microphones(麦克风)"></a>Microphones(麦克风)</h1><p>Con 30 (Earthworks M30)<br>Con 47 (Neumann U 47)<br>Con 54 (Neumann KM 54)<br>Con 67 (Neumann U 67)<br>Con 87 (Neumann U 87)<br>Con 149 (Neumann M 149)<br>Dyn 6 (Audix D 6)<br>Dyn 20 (Electro-Voice RE 20)<br>Dyn 40 (Heil PR 40)<br>Dyn 57 (Shure SM 57)<br>Dyn 112 (AKG D 112)<br>Dyn 421 (Sennheiser MD 421)<br>Dyn 441 (Sennheiser MD 441)<br>Rib 121 (Royer R-121)<br>Rib 160 (Beyerdynamic M 160)</p>
<h1 id="Cabinets-机柜"><a href="#Cabinets-机柜" class="headerlink" title="Cabinets(机柜)"></a>Cabinets(机柜)</h1><h2 id="Control-Room-Pro"><a href="#Control-Room-Pro" class="headerlink" title="Control Room (Pro):"></a>Control Room (Pro):</h2><p>2 x 12 AC Silver (Vox AC 30 Silver Alnico Speakers)<br>4 x 12 Modern (ENGL E412VG)<br>4 x 12 Vintage (Marshall1960 JTM50 4×12 75W cabinet)<br>2 x 12 British (Vox AC30)<br>2 x 12 American (Something like a Fender Super-Sonic 60 212)<br>1 x 15 Bass Vintage (Supro Thunderbolt Jensen Speaker)<br>4 x 10 Bass Alu (Hartke 4.5XL Aluminum 10s)<br>8 x 10 Bass Pro (Ampeg SVT 810 SVT 10s)<br>4 x 12 Van 51 (Peavey Sheffield 51501200s)<br>4 x 12 Ultra B (Bogner Uberkab Celestion Vintage 30s)<br>4 x 12 Ultra A (Bogner Uberkab Celestion G12T)<br>1 x 12 Tweed (Fender Tweed Deluxe Jensen P12R)<br>4 x 10 Tweed (Fender Bassman Jensen P10Qs)<br>2 x 15 Twang (Fender Dual Showman JBL D130s)<br>2 x 12 Twang (Fender Twin Jensen C12Ns)<br>2 x 12 Jazz (Roland JC 120 Roland 12s)<br>4 x 12 Hot Solo+ B (Soldano 412B Eminence Legend)<br>4 x 12 Hot Solo+ A (Soldano 412B Eminence S12Xs)<br>4 x 12 Modern (ENGL E412VS PRO)<br>4 x 12 UK 80s White (Marshall 1960 G12T 75s)<br>4 x 12 UK 80s Black (Marshall 1960 JBL K120s)<br>4 x 12 UK 70s White (Marshall Basketweave G12Ls)<br>4 x 12 UK 70s Black (Marshall Basketweave Vintage G12H30s “Blackbacks”)<br>4 x 12 UK 60s Green (Marshall 1960 G12Ms)<br>4 x 12 High White (75 Hiwatt SE4123 50w Fane Purple)<br>4 x 12 Gratifier (Mesa Rectifier 4x12 V30s)<br>4 x 12 Citrus (Orange PPC 412 V30s)<br>2 x 12 AC Blue (Vox AC30 Blue Bulldog)<br>DI Box (generic)</p>
<h2 id="Cabinets-amp-Mics-Legacy"><a href="#Cabinets-amp-Mics-Legacy" class="headerlink" title="Cabinets &amp; Mics (Legacy):"></a>Cabinets &amp; Mics (Legacy):</h2><p>1 × 12 Tweed Alnico ‘(Fender Hot Rod Deluxe Tweed)’<br>1 × 12 Custom (Fender Blues Junior)<br>2 × 12 Tweed (Fender 57 Twin? (Blue/Green/Cream = No idea)<br>2 × 12 Brit 60s (Vox AC30)<br>2 × 12 Chief V-30 (PRS 2×12 Open Back or maybe a Bogner Custom Shop 2×12)<br>2 × 12 Custom (No idea (Lopoline maybe?)<br>2 × 12 Jazz (Roland JC-120 Jazz)<br>4 × 10 Tweed Alnico (Fender 59 Bassman)<br>4 × 12 UK 60s Tall (Marshall 1960 JTM45 4×12 60W cabinet)<br>4 × 12 UK 60s (Marshall 1960 JTM50 4×12 75W cabinet)<br>4 × 12 UK 80s (Marshall 1982a)<br>4 × 12 UK 70s (Orange PPC 412-C)<br>4 × 12 High White (Hiwatt SE-4123)<br>4 × 12 Gratifier (Mesa/Boogie 4×12 Rectifier Standard Slant)<br>4 × 12 Ultrasonic (Bogner 4×12 Slant)<br>1 × 15 Bass Pro (Ampeg SVT-15E or B-115E)<br>1 × 15 Bass WR (SWR WorkingPro 1×15)<br>4 × 10 Bass Pro (Ampeg SVT-410HE or B410-HE)<br>4 × 10 Bass WR (SWR WorkingPro 4×10)<br>8 × 10 Bass Pro (Ampeg SVT-810E)<br>8 × 10 Bass WR (SWR Megoliath 8×10)<br>Rotator Horns (Leslies in different cases)</p>
<h1 id="Delay-amp-echo-延迟、回声"><a href="#Delay-amp-echo-延迟、回声" class="headerlink" title="Delay &amp; echo(延迟、回声)"></a>Delay &amp; echo(延迟、回声)</h1><p>Delay Man (Electro-Harmonix Memory Man)<br>PsycheDelay (Eventide H3000)<br>Quad Delay<br>Tape Echo (Roland RE-201 Space Echo)<br>Traktor Delay<br>Twin Delay</p>
<h1 id="Distortion-失真"><a href="#Distortion-失真" class="headerlink" title="Distortion(失真)"></a>Distortion(失真)</h1><p>Big Fuzz (Electro-Harmonix Big Muff Pi)<br>Cat (Pro Co RAT)<br>Demon Distortion (MXR Dime Distortion DD11)<br>Distortion (Boss DS-1)<br>Fuzz (Dunlop Dallas Arbiter Fuzz Face)<br>Gain Booster<br>MeZone (Boss MT-2 Metal Zone)<br>Mulholland Drive<br>Skreamer (Ibanez TS-808 Tube Screamer)<br>Sledgehammer (Marshall Jackhammer JH-1)<br>TransAmp (Tech 21 SansAmp GT2)<br>Treble Booster (Dallas Rangemaster Treble Booster)</p>
<h1 id="Dynamics-动态"><a href="#Dynamics-动态" class="headerlink" title="Dynamics(动态)"></a>Dynamics(动态)</h1><p>Fast Comp (Feedback Compressor, behaves similar to an UREI 1176)<br>Limiter<br>Noise Gate (Boss NS-2 Noise Supressor)<br>Noise Reduction (Boss NS-2 Noise Suppressor)<br>Stomp Compressor (Boss CS-1 Compression Sustainer)<br>Transient Master (SPL Transient Designer)<br>Tube Compressor (Electro-Harmonix Black Finger Compressor)<br>VC 160 (DBX 160 VCA Compressor/Limiter)<br>VC 2A (Teletronix LA-2A Classic Leveling Amplifier)<br>VC 76 (UREI 1176 Limiting Amplifier)<br>Volume Pedal<br>Solid Dynamics (SSL Mixing Console Compressor/Gate Module)<br>Solid Bus Comp (SSL Mixing Console Bus Compressor Module)</p>
<h1 id="EQ-均衡"><a href="#EQ-均衡" class="headerlink" title="EQ(均衡)"></a>EQ(均衡)</h1><p>Custom EQ<br>EQ Graphic<br>EQ Parametric<br>EQ Shelving<br>Solid EQ (SSL Mixing Console EQ Module)</p>
<h1 id="Filters-滤波器"><a href="#Filters-滤波器" class="headerlink" title="Filters(滤波器)"></a>Filters(滤波器)</h1><p>AutoFilter (Musitronics Mutron III)<br>Cry Wah (Dunlop Cry Baby)<br>Filterbank (Moog Moogerfooger MF-105M MIDI MuRF)<br>Formant Filter<br>Peak Filter<br>Pro-Filter (Sequential Circuits Prophet-5 Filter Section)<br>Real Wah (Real McCoy Custom RMC-1)<br>Talk Wah (Heil Sound Talk Box)<br>Wahwah (Vox Clyde McCoy Wah Pedal)</p>
<h1 id="Modifier-修饰器"><a href="#Modifier-修饰器" class="headerlink" title="Modifier(修饰器)"></a>Modifier(修饰器)</h1><p>Analog Sequencer<br>Envelope<br>Input Level<br>LFO<br>Step Sequencer</p>
<h1 id="Modulation-移调"><a href="#Modulation-移调" class="headerlink" title="Modulation(移调)"></a>Modulation(移调)</h1><p>Electric Lady (Electro-Harmonix Electric Mistress)<br>Ensemble (Boss CE-1 Chorus Ensemble)<br>Flanger (TC Electronic Stereo Chorus + Flanger)<br>Phaser Nine (MXR Phase 90)<br>Rotator<br>Stereo Tune<br>Stoned Phaser (Electro-Harmonix Small Stone)<br>Tremolo (Boss TR-2 Tremolo)</p>
<h1 id="Pitch-变调"><a href="#Pitch-变调" class="headerlink" title="Pitch(变调)"></a>Pitch(变调)</h1><p>Harmonic Synthesizer (Electro-Harmonix Micro Synthesizer)<br>Octaver (Boss OC-2 Octave)<br>Pitch Pedal (DigiTech WH-4 Whammy)<br>Resochord<br>Transpose Stretch</p>
<h1 id="Reverb-混响"><a href="#Reverb-混响" class="headerlink" title="Reverb(混响)"></a>Reverb(混响)</h1><p>IceVerb (Lotus Pedal ICEVERB)<br>Little Reflektor (stripped down version of NI Reflektor, IR-based)<br>Octaverb<br>Reflektor<br>Spring Reverb (Fender Spring Reverb Unit or BOSS FRV-1 Fender Reverb Pedal)<br>Studio Reverb<br>Traktor Reverb<br>Vintage Verb</p>
<h1 id="Special-FX-特殊效果"><a href="#Special-FX-特殊效果" class="headerlink" title="Special FX(特殊效果)"></a>Special FX(特殊效果)</h1><p>Beat Slicer<br>Beatmasher<br>Gater<br>Grain Delay<br>Reverse Grain<br>Ring Modulator (moogerfooger MF-102 Ring Modulator)<br>Ringmod</p>
<h1 id="Tools-额外效果"><a href="#Tools-额外效果" class="headerlink" title="Tools(额外效果)"></a>Tools(额外效果)</h1><p>Container<br>CrossOver<br>LoopMachine<br>MasterFX<br>Split<br>SplitMS</p>
<p>这个列表整理出来用了半条命，希望能帮助到和我一样热爱学习的人。^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Guitar Rig 组件列表，小括号为现实硬件映射&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Amplifiers-箱头&quot;&gt;&lt;a href=&quot;#Amplifiers-箱头&quot; class=&quot;headerlink&quot; title=&quot;Ampli
    
    </summary>
    
      <category term="Music" scheme="http://yoursite.com/categories/Music/"/>
    
    
      <category term="GuitarRig" scheme="http://yoursite.com/tags/GuitarRig/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』什么是哥特？ </title>
    <link href="http://yoursite.com/2017/10/09/2017-10-09-what-is-goth/"/>
    <id>http://yoursite.com/2017/10/09/2017-10-09-what-is-goth/</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2017-10-09T08:36:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="http://goth.net/goth" target="_blank" rel="external">What is Goth?</a></p>
</blockquote>
<p><em>原文来自<code>goth.net</code>，大概是我读过最透彻的一篇介绍哥特文化的文章了，希望你不喜欢。</em></p>
<p>This is probably the hardest question any goth could try and answer, one may as well ask ‘what is society?’ as it has so many facets it defies any definitive explanation.</p>
<p>这可能是哥特人可以尝试回答的最难的问题了，就像问“什么是社会？”一个道理，因为它有那么多方面，任何解释都不可能面面俱到。</p>
<p>Goth in its simplest form, is a subculture. A group of people who feel comfortable within each others company. There is no specific thing that defines what you need to do or be to fit into the goth scene (except of course the implied black clothing). People in the goth scene all have different musical tastes, follow different religions, have different occupations, hobbies, and fashion sense.</p>
<p>哥特是最简单的形式，它是一种亚文化。他们是一群在一起感到舒适的人组成的团体。没有什么具体的事物可以定义你需要做什么或者适应哥特式的场景（当然，黑衣服不能少！）。哥特人都会有自己独特的音乐品味，遵循不同的信仰，有着不同的职业、兴趣和时尚感。</p>
<a id="more"></a>
<h1 id="Why-do-people-become-goths"><a href="#Why-do-people-become-goths" class="headerlink" title="Why do people become goths?"></a>Why do people become goths?</h1><h1 id="为什么会变成哥特人"><a href="#为什么会变成哥特人" class="headerlink" title="为什么会变成哥特人?"></a>为什么会变成哥特人?</h1><p>Most goths become goths because they have been spurned by ‘normal’ society because the way they want to live their lives does not fit in with how most people are told to live theirs. Goths are free thinkers, people who do not accept the moral rules of society because they’re told ‘This is just how it is’ or ‘This is what God says!’. Rather goths tend to listen to what you have to say, and make up their own mind. This kind of free thinking and rejection of dogma earns only rejection in todays society.</p>
<p>大多数人成为哥特人是因为被“正常”社会所唾弃，因为他们的生活方式与这个社会告诉我们的不一样。哥特人是自由的思想者，他们不能接受社会的道德规则，因为人们会说：“这就应该是这样的”或者“这是上帝说的！”。而哥特人会倾听你的世界，并且思考。这种自由思想和对教条的排斥让当今社会也开始排斥他们。</p>
<p>However because of this rejection from ‘normal’ society, goths have banded together to associate with other free thinkers. This has a beneficial effect on both the individual and society as a whole. For the individual they have a sense of belonging, and friends they can associate with. For society it removes one more misfit filled with rage from society’s streets.</p>
<p>然而，由于“正常”社会的这种拒绝，哥特人已经团结在一起，与其他自由思想者联手。这对个人和整个社会都是有益的。对于个人，他们有归属感和可以联系的朋友。对于社会，它消除了那些充斥在街头的愤怒与格格不入（这句不是很懂怎么翻）。</p>
<p>This of course is not the case for all goths. Many goths today are goths for a variety of other reasons. They like the music, or the clubs are better, they have goth friends and joined in with them, or they just like staying up late nights and goths are the only ones awake to talk to.</p>
<p>当然，并不是所有哥特人都是这种情况。如今很多哥特人都是因为各种原因才变成哥特人。他们喜欢音乐，或者更喜欢俱乐部，他们有哥特朋友，并加入了他们，或者他们仅仅是呆在深夜里，哥特人是唯一能在深夜保持清醒对话的人。</p>
<h1 id="The-gothic-stereotype"><a href="#The-gothic-stereotype" class="headerlink" title="The gothic stereotype"></a>The gothic stereotype</h1><h1 id="对哥特刻板的印象"><a href="#对哥特刻板的印象" class="headerlink" title="对哥特刻板的印象"></a>对哥特刻板的印象</h1><p>Many stereotypes of goths exist these days. It seems everyone has their own way to define ‘what is goth’. From the stereotypes based on clothing to music right up to the stereotypes of all goths being satanists or part of some kind of cult. Categorically, all of these are false.</p>
<p>当今社会对哥特有一些刻板的印象。但似乎每个人都有自己的方式来定义“什么是哥特”，从基于服装到音乐的刻板印象，更严重到认为所有哥特人都是撒旦的信徒或是某个邪教组织成员。直截了当的告诉你，这些印象都是假的。</p>
<p>The goth scene is just as widely varied as society in general. There are many different professions represented in the scene, from highly skilled professionals like doctors and lawyers, to tradesman, to technically minded people to clerical workers. Many different musical tastes exist (and not all of them goth, there is a HUGE 80’s following in the goth scene for some reason). The fashion varies vastly from goth to goth from the traditional flowing victorian style garments to the buckled and studded style regalia (also called industrial style, which is often closely related with goths, and have come to an understanding of co-existance, if uneasily at times).</p>
<p>普遍来说，哥特式的场景和这个社会一样广泛而多变。在这个场景中有很多不同专业的人，从医生、律师这种高技能的专业人士，到商人或志同道合的文职人员。哥特人有许多不同的音乐品味存在（并不全是哥特音乐，因为某些原因，有一大批80年代的崇拜者出现在哥特式场景中）（前面括号中的句子翻译的不是很恰当，尽力了…）。哥特的时尚变化极大，从传统流行的维多利亚风格的服装到紧扣、褶皱和佩戴chfen(这个鬼词是什么我真的不知道！)式的勋章（这也被称为工业风格，这些往往与哥特紧密相关，如果你倍感不适，可以尝试重新理解有限存在是什么意思）。</p>
<h1 id="How-do-I-get-into-goth"><a href="#How-do-I-get-into-goth" class="headerlink" title="How do I get into goth?"></a>How do I get into goth?</h1><h1 id="我是怎么变成哥特人的？"><a href="#我是怎么变成哥特人的？" class="headerlink" title="我是怎么变成哥特人的？"></a>我是怎么变成哥特人的？</h1><p>The gothic sense of humour is highly developed, and often leans toward the satirical. Quietly laughing at the more idiotic and less tolerant factions of society that seem to think yelling out of cars at us makes them cooler. Goths have learned to laugh at themselves and see society in a much different light. They have had to, and it is a trait most would not give up.</p>
<p>哥特式的幽默感是高度发达的，往往倾向于讽刺。在这个更多白痴、更少宽容的社会，我们安静的笑，似乎他们朝我们大喊大叫会让他们觉得自己更酷一样。哥特人已经学会了自我嘲笑，用不同的眼光去看待这个社会。这是我们不得不，而且最不愿放弃的特质。</p>
<p>Goths have for the most part (not unanimously of course, but mostly) dropped all forms of prejudice. Noone is afraid within the goth scene to come out as being gay, and noone has to hide their religion for fear of scorn from their peers or zealots wanting to convert them from the arms of Satan. In fact because of these facts (and the general lack of prejudice) the goth scene has a large proportion of gays/bisexuals, and followers of non-mainstream religions and views. This of course is the most important aspect of gothdom, and why most goths became goths in the first place, tolerance.</p>
<p>大部分哥特人（并不是全是这样，但几乎是）放弃了所有形式的偏见。在哥特场景下，没有人害怕公布自己是同性恋的事实，也没有人会隐藏自己的宗教信仰，因为不必担心同龄人或狂热分子的嘲笑，没有人硬要把你从撒旦的怀抱中拯救出来。事实上，就是由于这些事实（并且普遍缺乏偏见），哥特场景下有很多同性恋/双性恋，以及非主流宗教的观点和追随者。这当然是哥特最重要的方面，为什么会成为哥特人，第一点：宽容。</p>
<p>But they think weird!</p>
<p>但他们觉得很怪诞！</p>
<p>Ah, but this is the beauty of goths. Most subjects that are taboo in ‘normal’ society are freely discussed and debated about. Death, religion, magick, mysticism, and many other topics that are only roached carefully outside of the gothic community. Most goths have realised that fear is only a reaction instilled in us by dogmatic propaganda, and once you realise there is nothing to fear from the topic, whats to stop you discussing it?</p>
<p>啊，但这正是哥特的美所在。大多数在“正常”社会中的禁忌话题，在这里都可以自由讨论和辩论。死亡、宗教、魔法、神秘主义，和许多其他仅在哥特社区之外精心狩猎的话题。大多数哥特人都意识到，恐惧只是在教条宣传、灌输下的一种反应，一旦你意识到没有什么可怕的话题，还有什么能阻止你讨论？</p>
<p>Goths often revel in the fear given to them by society as a whole. Often the behavior exhibited by society to them based on society’s perception of them from stereotypes, rumour, etc are a constant source of entertainment. Of course, most of the rumours are totally unfounded, goths are people like everyone else, however when you already have a reputation, going for the shock factor is often far too tempting to see how much society at large is willing to believe (or deduce) with only a little encouragement.</p>
<p>哥特人常常以整个社会对他们的恐惧为乐。通常，社会对他们的态度是基于刻板印象的感知和谣言等，这对哥特人来说是源源不断的娱乐来源。当然，大部分谣言是根本没有根据的，哥特人和其他人一样都是人，无论如何，当你拥有了声誉，都会面临巨大的诱惑，全社会没有多少人愿意去相信（或推测）并伴随着一点鼓励。（这句真的不会翻了，我果然是渣男，渣渣…）</p>
<p>This does not totally fall away once you get inside the scene unfortunately, and goths are all too often tempted to try for the shock factor within the scene (which turns out more tacky than shocking). Goths when you get down to it can be a rather pretentious bunch, trying for those extra ‘goth points’ on the gothier than thou scale, but it adds to the enjoyment.</p>
<p>这并没有完全结束，一旦你进入不幸的场景，哥特人会怂恿你去做一些刺激的事（结果往往比你想象的更令人震惊）。当哥特人下定决心做时，他们是一群相当自命不凡的人，他们会做超出哥特范畴的事（又是一句bullshit translate），但这也增添了乐趣。</p>
<h1 id="History-of-Goth"><a href="#History-of-Goth" class="headerlink" title="History of Goth"></a>History of Goth</h1><h1 id="哥特的历史"><a href="#哥特的历史" class="headerlink" title="哥特的历史"></a>哥特的历史</h1><p>Modern goth (ignoring where the name itself originally comes from) started in the early 80’s as part of the punk subculture (which is itself was a rejection of most societal values, and anything considered part of the ‘norm’). The phrase was coined by the band manager of Joy Division, Anthony H. Wilson, who described the band as ‘Gothic compared with the pop mainstream’. The term stuck, and as punk eventually died, Goth survived and became its own subculture. The punk clothing and hairstyles mellowed, and the core ‘rejection of society’ attitude alone lived on in the gothic subculture. Over time this itself has been modified to be more of a ‘no more blind acceptance of society’s values’ as opposed to rejection because it was there to be rejected (and because you could get away with it!).</p>
<p>现代哥特（忽略其名字本身的出处）早在80年代就成为朋克文化的一部分（这本身就是一种排斥社会的价值观，以及被定义为“规范”的事物）。现代哥特这个短语是由 Joy Division 乐队的经理 Anthony H. Wilson 杜撰出来的，他把乐队描述为“与流行主流音乐相比较的哥特式音乐”。朋克的服装和发型风格，以及核心的“排斥社会”态度，孤独的生活在社会的亚文化中。随着时间的推移，这种态度本身已经被改进成“不再盲目的接受社会的价值观”，而不是去拒绝，因为它在那儿被拒绝（因为你可以摆脱它）。</p>
<p>Movies such as The Crow, and bands such as the Bauhaus helped establish the gothic image as dark, depressing, and even evil. As more and more ‘dark’ movies came out, numbers in the gothic subculture expanded, and there is now a gothic community in almost every major city around the world, and quite a number of towns have their own representative contingent. Nowdays there are more goth bands around than ever, and it has turned from an 80’s phenomenon into a 90’s way of life for many people. Unlike the punk subculture that it spawned from, there even exists a class of mature goths, still following the scene around even past their 20’s and into their 30’s and beyond.</p>
<p>像<a href="https://movie.douban.com/subject/1292474/" target="_blank" rel="external">乌鸦</a>这类电影，以及<a href="http://www.xiami.com/artist/10025" target="_blank" rel="external">Bauhaus</a>这类乐队，有助于建立哥特式的形象，如黑暗、压抑、沮丧、甚至是邪恶。伴随着越来越多“黑暗”题材电影的出现，哥特亚文化的影响不断扩大，世界上几乎每一个主要城市都有一个哥特社区，相当多的城镇都有自己的代表团。当今的哥特乐队比以往任何时代都多，它已经从80年代的非凡到90年代融入大多数人的生活。它的产生不同于朋克亚文化，甚至存在一类成熟的哥特人，哥特伴随他们度过20岁，迈入30岁以及更久远的岁月。</p>
<blockquote>
<p>本文译者：余震（Freak）<br>译文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://goth.net/goth&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What is Goth?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;原文来自&lt;code&gt;goth.net&lt;/code&gt;，大概是我读过最透彻的一篇介绍哥特文化的文章了，希望你不喜欢。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is probably the hardest question any goth could try and answer, one may as well ask ‘what is society?’ as it has so many facets it defies any definitive explanation.&lt;/p&gt;
&lt;p&gt;这可能是哥特人可以尝试回答的最难的问题了，就像问“什么是社会？”一个道理，因为它有那么多方面，任何解释都不可能面面俱到。&lt;/p&gt;
&lt;p&gt;Goth in its simplest form, is a subculture. A group of people who feel comfortable within each others company. There is no specific thing that defines what you need to do or be to fit into the goth scene (except of course the implied black clothing). People in the goth scene all have different musical tastes, follow different religions, have different occupations, hobbies, and fashion sense.&lt;/p&gt;
&lt;p&gt;哥特是最简单的形式，它是一种亚文化。他们是一群在一起感到舒适的人组成的团体。没有什么具体的事物可以定义你需要做什么或者适应哥特式的场景（当然，黑衣服不能少！）。哥特人都会有自己独特的音乐品味，遵循不同的信仰，有着不同的职业、兴趣和时尚感。&lt;/p&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="Gothic" scheme="http://yoursite.com/tags/Gothic/"/>
    
  </entry>
  
  <entry>
    <title> 我摘录的埃德加·爱伦·坡(Edgar Allan Poe)小说片段 </title>
    <link href="http://yoursite.com/2017/10/09/2017-10-09-po-summary/"/>
    <id>http://yoursite.com/2017/10/09/2017-10-09-po-summary/</id>
    <published>2017-10-08T16:00:00.000Z</published>
    <updated>2017-10-09T08:06:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文摘录爱伦·坡小说里我最喜欢的一些片段。</p>
</blockquote>
<h1 id="黑猫"><a href="#黑猫" class="headerlink" title="黑猫"></a>黑猫</h1><ol>
<li>我的病情日渐严重——有什么病比得上酗酒！</li>
<li>我又开始纵酒狂饮，并很快就用酒精淹没了我对自己所作所为的记忆。</li>
<li>我相信自己的灵魂存在，我也相信反常是人类心灵原始冲动的一种，是决定人类性格的原始官能或原始情感不可分割的一个组成部分。谁不曾上百次地发现自己做一件恶事或蠢事的唯一动机，仅仅是因为知道自己不该为之？</li>
<li>这下我实在是成了超越人类之不幸的最不幸的人。</li>
<li>那是一种狂笑，一种悲鸣，一半透出恐怖，一半显出得意，就像从地狱里才可能发出的那种声音，就像为被罚入地狱而痛苦之灵魂和为灵魂坠入地狱而欢呼的魔鬼共同从喉咙里发出的声音。</li>
<li>墙被拆倒，那具已经腐烂并凝着血块的尸体赫然直立在那帮警探眼前。在尸体的头上，正坐着那个有一张血盆大口和一只炯炯独眼的可怕的畜生，是它的狡猾诱使我杀害了妻子，又是它告密的声音把我送到了刽子手手中。</li>
</ol>
<a id="more"></a>
<h1 id="厄舍府之倒塌"><a href="#厄舍府之倒塌" class="headerlink" title="厄舍府之倒塌"></a>厄舍府之倒塌</h1><ol>
<li>我心中极度的抑郁真难用人间常情来比拟，也许只能比作鸦片服用者清醒后的感受：重新堕入现实生活之痛苦、重新撩开那层面纱之恐惧。</li>
<li>当天地间一些很简单的自然景物之组合具有能这样影响我们的力量时，对这种力量的探究无疑超越了我们的思维能力。</li>
<li>人类所有感情都以恐惧为基础。</li>
<li>那种沉着、镇定、运用自如的喉音，那种声音也许只有在酩酊者心醉神迷之时或不可救药的服用鸦片者神魂颠倒之时方能听到。</li>
<li>一种病态的敏锐感觉使他备受折磨，他只能吃最淡而无味的饭菜，只能穿某一种质地的衣服，所有花的芬芳都令他窒息，甚至一点儿微光都令他的眼睛难受，而只有某些特殊的声音以及弦乐器奏出的音乐才不会使他感到恐怖。</li>
<li>他那颗仿佛与生俱来就永无停息地散发着忧郁的心，把整个精神和物质世界变得一片阴暗。</li>
<li>他已经充分意识到他那高高在上的崇高理性正摇摇欲坠。</li>
<li>那的确是一个狂风大作但异常美丽的夜晚，一个恐怖与美丽交织的奇特的夜晚。</li>
<li>哦，我现在逃到哪儿去？难道她不会马上就到这儿来？她难道不正匆匆赶来责备我做事草率？难道我没有听见她上楼的脚步声？难道我没有听出她的心在猛烈而可怕地跳动？</li>
</ol>
<h1 id="一桶蒙蒂利亚白葡萄酒"><a href="#一桶蒙蒂利亚白葡萄酒" class="headerlink" title="一桶蒙蒂利亚白葡萄酒"></a>一桶蒙蒂利亚白葡萄酒</h1><ol>
<li>若是复仇者自己受到了惩罚，那就不能算报仇雪恨。若是复仇者没让那作恶者知道是谁在报复，同样也不能算是报仇雪恨。</li>
<li>我一如既往地冲他微笑，而他丝毫没看出当时我已是笑里藏刀。</li>
<li><p>“我记不起你家的纹章图案了。”</p>
<p> “蓝色的底衬上一只金色的大脚，金脚正把一条毒牙咬进脚后跟的巨蛇踩得粉碎。”</p>
<p> “那纹章上的铭词呢？”</p>
<p> “凡伤我者必受惩罚。”</p>
<p> “妙！“他说。</p>
</li>
</ol>
<blockquote>
<p>本文译者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文摘录爱伦·坡小说里我最喜欢的一些片段。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;黑猫&quot;&gt;&lt;a href=&quot;#黑猫&quot; class=&quot;headerlink&quot; title=&quot;黑猫&quot;&gt;&lt;/a&gt;黑猫&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;我的病情日渐严重——有什么病比得上酗酒！&lt;/li&gt;
&lt;li&gt;我又开始纵酒狂饮，并很快就用酒精淹没了我对自己所作所为的记忆。&lt;/li&gt;
&lt;li&gt;我相信自己的灵魂存在，我也相信反常是人类心灵原始冲动的一种，是决定人类性格的原始官能或原始情感不可分割的一个组成部分。谁不曾上百次地发现自己做一件恶事或蠢事的唯一动机，仅仅是因为知道自己不该为之？&lt;/li&gt;
&lt;li&gt;这下我实在是成了超越人类之不幸的最不幸的人。&lt;/li&gt;
&lt;li&gt;那是一种狂笑，一种悲鸣，一半透出恐怖，一半显出得意，就像从地狱里才可能发出的那种声音，就像为被罚入地狱而痛苦之灵魂和为灵魂坠入地狱而欢呼的魔鬼共同从喉咙里发出的声音。&lt;/li&gt;
&lt;li&gt;墙被拆倒，那具已经腐烂并凝着血块的尸体赫然直立在那帮警探眼前。在尸体的头上，正坐着那个有一张血盆大口和一只炯炯独眼的可怕的畜生，是它的狡猾诱使我杀害了妻子，又是它告密的声音把我送到了刽子手手中。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Book" scheme="http://yoursite.com/categories/Book/"/>
    
    
      <category term="Gothic" scheme="http://yoursite.com/tags/Gothic/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』每个程序员第一份工作前应该知道的10件事 </title>
    <link href="http://yoursite.com/2017/09/25/2017-09-25-ten-things-for-first-job/"/>
    <id>http://yoursite.com/2017/09/25/2017-09-25-ten-things-for-first-job/</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2017-09-28T03:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="http://www.applematters.com/article/10-things-every-programmer-should-know-for-their-first-job/" target="_blank" rel="external">10 Things Every Programmer Should Know For Their First Job</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章对我来说是“事后诸葛亮”，以下是我进入编程行业以来的一些经验和教训。</p>
<h1 id="0000-被喜欢是很容易的事"><a href="#0000-被喜欢是很容易的事" class="headerlink" title="0000 - 被喜欢是很容易的事"></a>0000 - 被喜欢是很容易的事</h1><p>如果你有时间观念，衣着得体，保持微笑，不做一些愚蠢的事情，至少会有一些人喜欢你。事实上，让你的同事喜欢你是一件很容易的事。你想拥有很多朋友吗？在你的桌上放一碗满满的糖果，你就会发现你有多少朋友。</p>
<h1 id="0001-受人尊敬是很难的事"><a href="#0001-受人尊敬是很难的事" class="headerlink" title="0001 - 受人尊敬是很难的事"></a>0001 - 受人尊敬是很难的事</h1><p>不管你在这个行业有20年经验或没有经验，当你刚进入一家公司时，没有人会尊敬你。这并不意味着他们不喜欢你，或者对你没有好感。这是因为你还没有做任何事，给别人尊敬你的理由。获得尊敬最快的方法就是把工作做到最好。做到最好并不是浮夸和惊艳，而是有效和团结。当大家看到你能有效率并正确的完成工作，不用害怕赢得不了尊敬。</p>
<a id="more"></a>
<h1 id="0010-你在大学学到的一切都是没用的"><a href="#0010-你在大学学到的一切都是没用的" class="headerlink" title="0010 - 你在大学学到的一切都是没用的"></a>0010 - 你在大学学到的一切都是没用的</h1><p>第一份工作的前6个月，会比你整个大学学到的还多。你知道吗？工作中压力会很大。因为总有一天老板会要求你去做你简历中写的那些很棒的那些东西。你懂得，那些东西是你在学校能学到的？如果你搞砸了，在大学你会补考、留级。对不起，在这里你会被炒鱿鱼。在最近在工作中发现了这种状况。有些人因为某些技能被聘用，也因为不能解决问题而被解雇。很多有趣的事情会发生在第一份工作中。</p>
<p>大部分公司都有新员工的试用期，一般为30~90天。基本上，如果你搞砸了项目或者老板发现你在简历上撒了谎，不用想别的了，卷铺盖走人吧。千万记住别撒谎！</p>
<h1 id="0011-不要停止学习"><a href="#0011-不要停止学习" class="headerlink" title="0011 - 不要停止学习"></a>0011 - 不要停止学习</h1><p>作为新人，抱着“我什么都不知道，但我想学”的心态去工作会对你帮助很大。当你意识到自己多么愚蠢时，至少不会那么尴尬。你要意识到几乎所有人都比你有经验，比你懂的更多。好消息是，如果你问一些聪明的问题并关注他们做的事情，大多数人会乐意与你分享他们的知识。每个人都下意识认为自己的观点和经验是正确的，所以不要犹豫，想办法改善你的工作方式。只要你问问题，你就能从每一个和你一起工作的人身上学到东西。询问一些技巧、方法和其它同事可能精通的东西。观察他们如何使用命令行。每个人做事的方式都不一样，还有许多未知等着你去发现。技术糟糕（和/或年长的）程序员倾向于认为“他们”的方式是最好的，所以他们从不征求建议。聪明的程序员愿意接受这样一个事实：可能有更好的做事方法。这意味着你必须愿意切换编程语言、环境、操作系统或文本编辑器。</p>
<p>“什么！？叫我放弃</p>
<p>&lt;这里插入自己的做事方式&gt;</p>
<p>？为什么？谁都知道这是最棒的！”你必须克服这种心态。如果你想解决新的问题，必须学会谦卑和接受挫折。这种感觉糟透了，但是克服它！编程很难，做一个优秀的程序员更难。难过就自己一个人躲着哭吧。</p>
<h1 id="0100-你的编辑器决定你的死活，所以请明智的选择"><a href="#0100-你的编辑器决定你的死活，所以请明智的选择" class="headerlink" title="0100 - 你的编辑器决定你的死活，所以请明智的选择"></a>0100 - 你的编辑器决定你的死活，所以请明智的选择</h1><p>如果你觉得我夸大其词了，可以去网上问问哪款编辑器是最好的。得到的回复会是： Vi、Emacs 和一些其他的 IDE（通常会是Eclipse 或 Xcode）。事实上，你也许会惊奇还有多少人把 Vi 作为自己的主编辑器（我认为这些人应该清醒过来并回到80年代，虽然我也是其中一员）。问题的关键是，如果你不会使用其中的一种编辑器，你可能会碰到一些问题。去找到办公室最好的程序员，看看他用的什么编辑器。然后，点头表示认同他的答案，打印小抄，开始学习编辑器。快去！</p>
<h1 id="0101-没有人真正关心你是哪所大学毕业的"><a href="#0101-没有人真正关心你是哪所大学毕业的" class="headerlink" title="0101 - 没有人真正关心你是哪所大学毕业的"></a>0101 - 没有人真正关心你是哪所大学毕业的</h1><p>如果有人问你哪所大学毕业的，不用担心，他们不是在评判你，这只是礼貌的谈话。如果你的编程技术很棒，没人会在乎那一纸文凭。想知道相比文凭他们更关心什么吗？你的绩效。不要跟别人说这件事，因为这会让你看起来像个蠢货。我不能再强调了，说的已经够多了。</p>
<h1 id="0110-沉默永不过时"><a href="#0110-沉默永不过时" class="headerlink" title="0110 - 沉默永不过时"></a>0110 - 沉默永不过时</h1><p>刚工作，不知道要说什么？那就什么都别说。点头并且微笑。同事不让你加入他们的讨论吗？是挺尴尬的，大家不认识你，你也不认识大家。给彼此一点时间，他们中的大多数会主动来找你的。做朋友需要时间。是的，我知道作为新人很难受。我知道一个新的环境是个挑战，但你要振作起来，时间会帮你解决这些问题。如果你不是一个脾气古怪的人，并且做好工作，那么你终将成为团队的一员。除非你是辣妹或美男，否则很难直接融入团体。祝你好运。</p>
<h1 id="0111-你会遇到古怪、消极的人，对付他"><a href="#0111-你会遇到古怪、消极的人，对付他" class="headerlink" title="0111 - 你会遇到古怪、消极的人，对付他"></a>0111 - 你会遇到古怪、消极的人，对付他</h1><p>有些人就是不喜欢你，有时是因为他们有严重的情感问题，他们不喜欢任何人，所以他们会下意识地讨厌你。这些人从不改变，所以你得学会和如何与他们一起工作。如果你很快的找到了一个敌人，那么你要做的就是如何与他成为朋友，因为你不知道接下来几年会发生什么。我见过几次这种事，你今天敌视的家伙明天成了你的上司。</p>
<h1 id="1000-和计算机做朋友"><a href="#1000-和计算机做朋友" class="headerlink" title="1000 - 和计算机做朋友"></a>1000 - 和计算机做朋友</h1><p>想确保你总有最合适的闲聊话题？那就和计算机做朋友。这里有一个给新员工的小提示，大部分人都是因为需要或出问题了才会突然想起计算机技术人员。一段时间后，这些事情会使你的世界观变得恶化。所以定期去他们办公室找他们谈话。不要抱怨，不要乞求，只要问好并且询问他们生活如何。这是一项总是有利的投资。（前提是你得会修电脑…这段有点难翻译，绕口）</p>
<h1 id="1001-你永远逃不掉办公室政治"><a href="#1001-你永远逃不掉办公室政治" class="headerlink" title="1001 - 你永远逃不掉办公室政治"></a>1001 - 你永远逃不掉办公室政治</h1><p>作为一个新人（如果你从足够低的位置开始），你不必太担心这一点。但请放心，当你的责任越来越重时，你会进入这场游戏。你逃不掉，无论你怎么努力。你可以选择不玩，但你也会尝到苦果。这对于顽固的极客来说，这是一门很难的课程，因为相比人来说，我们更喜欢计算机。也许你进入IT行业仅仅是很单纯的喜欢信息技术。如果是这样的话，很抱歉，如果你想超越某个职业水平，必须成为管理层的一员，并加入政治竞技场。</p>
<blockquote>
<p>本文译者：余震（Freak）<br>译文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://www.applematters.com/article/10-things-every-programmer-should-know-for-their-first-job/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10 Things Every Programmer Should Know For Their First Job&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这篇文章对我来说是“事后诸葛亮”，以下是我进入编程行业以来的一些经验和教训。&lt;/p&gt;
&lt;h1 id=&quot;0000-被喜欢是很容易的事&quot;&gt;&lt;a href=&quot;#0000-被喜欢是很容易的事&quot; class=&quot;headerlink&quot; title=&quot;0000 - 被喜欢是很容易的事&quot;&gt;&lt;/a&gt;0000 - 被喜欢是很容易的事&lt;/h1&gt;&lt;p&gt;如果你有时间观念，衣着得体，保持微笑，不做一些愚蠢的事情，至少会有一些人喜欢你。事实上，让你的同事喜欢你是一件很容易的事。你想拥有很多朋友吗？在你的桌上放一碗满满的糖果，你就会发现你有多少朋友。&lt;/p&gt;
&lt;h1 id=&quot;0001-受人尊敬是很难的事&quot;&gt;&lt;a href=&quot;#0001-受人尊敬是很难的事&quot; class=&quot;headerlink&quot; title=&quot;0001 - 受人尊敬是很难的事&quot;&gt;&lt;/a&gt;0001 - 受人尊敬是很难的事&lt;/h1&gt;&lt;p&gt;不管你在这个行业有20年经验或没有经验，当你刚进入一家公司时，没有人会尊敬你。这并不意味着他们不喜欢你，或者对你没有好感。这是因为你还没有做任何事，给别人尊敬你的理由。获得尊敬最快的方法就是把工作做到最好。做到最好并不是浮夸和惊艳，而是有效和团结。当大家看到你能有效率并正确的完成工作，不用害怕赢得不了尊敬。&lt;/p&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="Job" scheme="http://yoursite.com/tags/Job/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』基于 Vue.js 与 Webpack 的三种代码分割范式 </title>
    <link href="http://yoursite.com/2017/09/15/2017-09-15-three-code-splitting-patterns/"/>
    <id>http://yoursite.com/2017/09/15/2017-09-15-three-code-splitting-patterns/</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2017-09-15T06:37:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://medium.com/js-dojo/3-code-splitting-patterns-for-vuejs-and-webpack-b8fff1ea0ba4" target="_blank" rel="external">3 Code Splitting Patterns For VueJS and Webpack</a></p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码分割是提升单页应用初始加载速度的重要方式之一。因为用户不用在第一次进入应用时下载所有代码，用户能更快的看到页面并与之交互。这会改善用户体验，尤其在移动端；而且这对 SEO 有很大帮助，因为 Google 会降低加载速度慢的网站权重。</p>
<p>上周我写了一篇关于<a href="https://vuejsdevelopers.com/2017/07/03/vue-js-code-splitting-webpack/" target="_blank" rel="external">Vue.js 与 Webpack 如何分割代码</a>的文章，长话短说，每个组件都封装在单个文件中，那很容易分割代码，当你导入模块时，Webpack 可以创建一个分割点，并且 Vue 也可以很方便的加载一个异步组件。</p>
<p>我认为代码分割最困难的部分不是如何让它工作起来，而是<em>何时</em>、<em>何地</em>让它工作。我想说，当设计你的应用时，就要将代码分割作为架构考虑进去。</p>
<p>在这篇文章中，我将介绍目前 Vue.js 的三种代码分割方式：</p>
<ul>
<li><p>By page（按照页面切分）</p>
</li>
<li><p>By page fold（按照页面的可见区域折叠切分）</p>
</li>
<li><p>By condition（按条件加载）</p>
</li>
</ul>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-b6effcd499050c26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>注：这篇文章最初于2017/07/08发表在<a href="http://vuejsdevelopers.com/2017/07/08/vue-js-3-ways-code-splitting-webpack/?jsdojo_id=medium_csp" target="_blank" rel="external">Vue.js开发博客</a>上。</p>
<h1 id="1-By-page（按照页面切分）"><a href="#1-By-page（按照页面切分）" class="headerlink" title="1.By page（按照页面切分）"></a>1.By page（按照页面切分）</h1><p>按照页面切分是思路最清晰的。这个简单的应用有三个页面：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-425267a57716348c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>我们假设每个组件都是一个单独的文件，比如：<code>Home.vue</code>, <code>About.vue</code> 和 <code>Contact.vue</code>，然后我们可以使用 Webpack 的动态 <code>import</code>(dynamic import) 功能拆分成单独的构建文件。当用户访问不同页面时，Wenpack 会异步加载并请求改页文件。</p>
<p>如果你使用 <code>vue-router</code>，这很容易实现，因为你的页面已经在单独的组件里了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "home" */</span> <span class="string">'./Home.vue'</span>);</div><div class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "about" */</span> <span class="string">'./About.vue'</span>);</div><div class="line"><span class="keyword">const</span> Contact = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "contact" */</span> <span class="string">'./Contact.vue'</span>);</div><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">name</span>: <span class="string">'home'</span>, <span class="attr">component</span>: Home &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/about'</span>, <span class="attr">name</span>: <span class="string">'about'</span>, <span class="attr">component</span>: About &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/contact'</span>, <span class="attr">name</span>: <span class="string">'contact'</span>, <span class="attr">component</span>: Contact &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<p>看看我们编译代码时的统计数据，每个页面都在它们自己的文件里，但要注意到有个重要的bundle文件叫 <em>build_main.js</em>，它包含了所有的公共代码以及异步加载其他文件的逻辑。无论用户访问哪个路由，都必须先加载它。</p>
<p>现在我访问 <code>http://localhost:8080/#/contact</code> 加载 <em>Contact</em> 页面，我查看 Network 菜单，发现下列文件被加载：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-75d15e5e84d1e315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>注意 <em>build_main.js</em> 这一栏的 <em>initiator</em> 值为 <em>(index)</em>。这意味着 <em>index.html</em> 请求了这个脚本，这正是我们所期盼的。但是 <em>build_1.js</em> 的 <em>initiator</em> 却是 <em>bootstrap_a877…</em>，这是 Webpack 脚本负责的异步加载文件。当你使用 Webpack 的动态导入功能，这个脚本会自动加入构建。最重要的一点是： <em>build_1.js</em> 不会阻塞初始页面的加载。</p>
<h1 id="2-By-page-fold（按照页面的可见区域折叠切分）"><a href="#2-By-page-fold（按照页面的可见区域折叠切分）" class="headerlink" title="2.By page fold（按照页面的可见区域折叠切分）"></a>2.By page fold（按照页面的可见区域折叠切分）</h1><p><em>折叠</em>以下(Below the “fold”)代表页面初始时不可见的部分。你可以异步加载这些内容，因为用户通常需要一两秒钟才能阅读完折叠以上的内容，尤其是在第一次访问站点时。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-b8843a993b8e8daa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>在这个实例应用中，我考虑把折叠线设在刊头下。那么让我们在页面初始化时加载导航栏和刊头，它们之下的所有内容，稍后再加载。我会创建一个名叫 <em>BelowFold</em> 的组件，提取出相关的代码如下：</p>
<p>Home.vue:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;div class=&quot;jumbotron&quot;&gt;</div><div class="line">        &lt;h1&gt;Jumbotron heading&lt;/h1&gt;</div><div class="line">        ...</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;below-fold&gt;&lt;/below-fold&gt;</div><div class="line">    &lt;!--All the code below here has been put into--&gt;</div><div class="line">    &lt;!--into the above component--&gt;</div><div class="line">    &lt;!--&lt;div class=&quot;row marketing&quot;&gt;</div><div class="line">      &lt;div class=&quot;col-lg-6&quot;&gt;</div><div class="line">        &lt;h4&gt;Subheading&lt;/h4&gt;</div><div class="line">        &lt;p&gt;Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.&lt;/p&gt;</div><div class="line">        ...</div><div class="line">      &lt;/div&gt;</div><div class="line">      ...</div><div class="line">    &lt;/div&gt;--&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  </div><div class="line">  const BelowFold = () =&gt; import(</div><div class="line">    /* webpackChunkName: &quot;below-fold&quot; */ &apos;./BelowFold.vue&apos;</div><div class="line">  );</div><div class="line">  export default &#123;</div><div class="line">    ...</div><div class="line">    components: &#123;</div><div class="line">        BelowFold</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>BelowFold.vue:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;row marketing&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-lg-6&quot;&gt;</div><div class="line">      &lt;h4&gt;Subheading&lt;/h4&gt;</div><div class="line">      &lt;p&gt;Donec id elit non mi porta gravida at eget metus. Maecenas faucibus mollis interdum.&lt;/p&gt;</div><div class="line">      ...</div><div class="line">    &lt;/div&gt;</div><div class="line">    ...</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<p>当我们编译代码时，可以看到 <em>below-fold</em> 被打包成了单独的文件：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-f370e03d4104e877.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>提示：<em>below-fold</em> 小到只有1.36k，看起来似乎不值得把它单独分离出来。因为现在只是一个很小的演示应用。在真实的应用中，页面的大部分内容都在折叠以下，因此可能有大量的代码，它包括 <em>JS</em>、<em>CSS</em> 以及所有子组件。</p>
</blockquote>
<h1 id="3-By-condition（按条件加载）"><a href="#3-By-condition（按条件加载）" class="headerlink" title="3.By condition（按条件加载）"></a>3.By condition（按条件加载）</h1><p>另一个选择方案是按条件加载。比如：模态框、Tab页、菜单等。</p>
<p>这个应用有个模态框，当你按下”Sign up today”按钮时会弹出它：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-a2193df778c14592.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>和之前一样，我们只是将模态框代码移动到它自己的单个文件组件中：</p>
<p>Home.vue:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;div class=&quot;jumbotron&quot;&gt;...&lt;/div&gt;</div><div class="line">    &lt;below-fold&gt;&lt;/below-fold&gt;</div><div class="line">    </div><div class="line">    &lt;home-modal v-if=&quot;show&quot; :show=&quot;show&quot;&gt;&lt;/home-modal&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  const BelowFold = () =&gt; import(</div><div class="line">    /* webpackChunkName: &quot;below-fold&quot; */ &apos;./BelowFold.vue&apos;</div><div class="line">  );</div><div class="line">  const HomeModal = () =&gt; import(</div><div class="line">    /* webpackChunkName: &quot;modal&quot; */ &apos;./HomeModal.vue&apos;</div><div class="line">  );</div><div class="line">  </div><div class="line">  export default &#123;</div><div class="line">    data() &#123;</div><div class="line">      return &#123;</div><div class="line">        show: false</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      HomeModal,</div><div class="line">      BelowFold</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>HomeModal.vue:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;modal v-model=&quot;show&quot; effect=&quot;fade&quot;&gt;...&lt;/modal&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  import Modal from &apos;vue-strap/src/Modal.vue&apos;;</div><div class="line">  export default &#123;</div><div class="line">    props: [&apos;show&apos;],</div><div class="line">    components: &#123;</div><div class="line">        Modal</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>注意我在模态框上加了 <code>v-if</code>。布尔值 <code>show</code> 用来开启/关闭模态框，并且它也用来判断是否渲染模态框本身。因为初始化页面时 <code>show</code> 为 <code>false</code>，只有当模态框打开时，才会下载代码。</p>
<p>这很合适，因为如果用户没有打开模态框，那这块代码是不会下载的。唯一的缺点是：它有很小的用户体验成本，当用户按下按钮后必须等待文件下载完成。</p>
<p>再次编译，下面是现在的输出结果：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-8d6c440d1889069b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>啊哈，我们又节省了5KB的首屏流量…</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>除了以上三种代码分割的方法，我相信一定还有其他方法去实现，只要你运用自己的想象力！</p>
<blockquote>
<p>本文译者：余震（Freak）<br>译文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://medium.com/js-dojo/3-code-splitting-patterns-for-vuejs-and-webpack-b8fff1ea0ba4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3 Code Splitting Patterns For VueJS and Webpack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;代码分割是提升单页应用初始加载速度的重要方式之一。因为用户不用在第一次进入应用时下载所有代码，用户能更快的看到页面并与之交互。这会改善用户体验，尤其在移动端；而且这对 SEO 有很大帮助，因为 Google 会降低加载速度慢的网站权重。&lt;/p&gt;
&lt;p&gt;上周我写了一篇关于&lt;a href=&quot;https://vuejsdevelopers.com/2017/07/03/vue-js-code-splitting-webpack/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js 与 Webpack 如何分割代码&lt;/a&gt;的文章，长话短说，每个组件都封装在单个文件中，那很容易分割代码，当你导入模块时，Webpack 可以创建一个分割点，并且 Vue 也可以很方便的加载一个异步组件。&lt;/p&gt;
&lt;p&gt;我认为代码分割最困难的部分不是如何让它工作起来，而是&lt;em&gt;何时&lt;/em&gt;、&lt;em&gt;何地&lt;/em&gt;让它工作。我想说，当设计你的应用时，就要将代码分割作为架构考虑进去。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我将介绍目前 Vue.js 的三种代码分割方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By page（按照页面切分）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By page fold（按照页面的可见区域折叠切分）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By condition（按条件加载）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="Vue.js" scheme="http://yoursite.com/tags/Vue-js/"/>
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』Node.js 调试 </title>
    <link href="http://yoursite.com/2017/09/13/2017-09-13-node-js-debugging/"/>
    <id>http://yoursite.com/2017/09/13/2017-09-13-node-js-debugging/</id>
    <published>2017-09-12T16:00:00.000Z</published>
    <updated>2017-09-13T02:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接：<a href="https://davidwalsh.name/node-debugging" target="_blank" rel="external">Node.js Debugging</a></p>
</blockquote>
<p>不管在开发中还是部署后，适当的日志记录对于web应用来说非常有用。困难的是如何组织日志代码和输出日志，简单来说：知道每个日志的来源。我最近找到一种实用的组织和优化Node.js调试的方法。</p>
<p>创建一个 <code>debug</code> 实例很简单，并且可以为每个文件创建多个 <code>logger</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create multiple instances of debug(创建多个debug实例)</span></div><div class="line"><span class="comment">// In theory these would serve two different purposes(理论上这两个debug实例分别负责不同的日志输出)</span></div><div class="line"><span class="keyword">var</span> debuggerA = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'worker:a'</span>),</div><div class="line">    debuggerB = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'worker:b'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Sample usages of the debugger(演示调试器的用法)</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">work</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  debuggerA(<span class="string">'doing lots of uninteresting work'</span>);</div><div class="line">  setTimeout(work, <span class="built_in">Math</span>.random() * <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">work();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">workb</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  debuggerB(<span class="string">'doing some work'</span>);</div><div class="line">  setTimeout(workb, <span class="built_in">Math</span>.random() * <span class="number">2000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">workb();</div></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-45b4af30d22f810d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="logger"></p>
<p>你必须定义环境变量，用于给调试器实例分配命名空间。当脚本运行时，日志应该输出到 <code>STDOUT</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Show all debugger messages prefixed &quot;worker:_____&quot;(所有debugger的前缀都为 &quot;worker:_____&quot;)</div><div class="line">DEBUG=worker:* node app.js</div></pre></td></tr></table></figure>
<p>当使用环境变量的方式，当你只想在开发或生产环境记录某种类型的消息，输出的日志会很清晰。命名空间的使用多么明智！</p>
<p>我还可能使用 <code>chalk</code> 为消息加上我想要的颜色：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</div><div class="line"></div><div class="line">debuggerA(chalk.red.bold(<span class="string">'OMG an awful error!'</span>));</div></pre></td></tr></table></figure>
<p>调试具有非常简单的目的，为了帮助我们更好的完成任务。当涉及到记录信息消息时不要吝啬，它会在开发过程中帮助你，并且在安全事件发生后更好的审视自身！</p>
<blockquote>
<p>本文译者：余震（Freak）<br>译文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://davidwalsh.name/node-debugging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js Debugging&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不管在开发中还是部署后，适当的日志记录对于web应用来说非常有用。困难的是如何组织日志代码和输出日志，简单来说：知道每个日志的来源。我最近找到一种实用的组织和优化Node.js调试的方法。&lt;/p&gt;
&lt;p&gt;创建一个 &lt;code&gt;debug&lt;/code&gt; 实例很简单，并且可以为每个文件创建多个 &lt;code&gt;logger&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create multiple instances of debug(创建多个debug实例)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// In theory these would serve two different purposes(理论上这两个debug实例分别负责不同的日志输出)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; debuggerA = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;debug&#39;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;worker:a&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    debuggerB = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;debug&#39;&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;worker:b&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Sample usages of the debugger(演示调试器的用法)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;work&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  debuggerA(&lt;span class=&quot;string&quot;&gt;&#39;doing lots of uninteresting work&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(work, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;work();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;workb&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  debuggerB(&lt;span class=&quot;string&quot;&gt;&#39;doing some work&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(workb, &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;workb();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』深入理解Vue.js响应式原理 </title>
    <link href="http://yoursite.com/2017/08/31/2017-08-31-vue-js-reactivity-in-depth/"/>
    <id>http://yoursite.com/2017/08/31/2017-08-31-vue-js-reactivity-in-depth/</id>
    <published>2017-08-30T16:00:00.000Z</published>
    <updated>2017-09-15T02:44:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>作者从 Java 与 C# 中经典的 Getters/Setters 引入，讨论了 Vue.js 中从组件渲染函数、数据的 Getter、Setter 劫持、监听器的控制以及重渲染触发整个生命流程。<br>原文链接：<a href="https://www.timo-ernst.net/blog/2017/07/26/understanding-vue-js-reactivity-depth-object-defineproperty/?utm_campaign=Revue%20newsletter&amp;utm_medium=Newsletter&amp;utm_source=Vue.js%20Feed" target="_blank" rel="external">Understanding Vue.js Reactivity in Depth with Object.defineProperty()</a></p>
</blockquote>
<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>本人是Java背景，许多年前刚接触JavaScript时有点怪怪的，因为它没有 <code>getters</code> 和 <code>setters</code>。随着时间的推移，我开始喜欢上这个缺失的特性，因为相比Java大量的 <code>getter</code> 和 <code>setter</code>，它让代码更简洁。例如，我们看看下面的Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  String firstName;</div><div class="line">  String lastName;</div><div class="line"> </div><div class="line">  <span class="comment">// 这个Demo中省略了一些构造器代码 :)</span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(firstName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = firstName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(lastName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Create instance</span></div><div class="line">Person bradPitt = <span class="keyword">new</span> Person();</div><div class="line">bradPitt.setFirstName(<span class="string">"Brad"</span>);</div><div class="line">bradPitt.setLastName(<span class="string">"Pitt"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>JavaScript开发人员永远不会这样做，相反他们会这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> bradPitt = <span class="keyword">new</span> Person();</div><div class="line">bradPitt.firstName = <span class="string">'Brad'</span>;</div><div class="line">bradPitt.lastName = <span class="string">'Pitt'</span>;</div></pre></td></tr></table></figure>
<p>这要简洁的多。通常简洁更好，不是吗？</p>
<p>的确如此，但有时我想获取一些可以被修改的属性，但我不用知道这些属性是什么。例如，我们在Java代码中扩展一个新的方法 <code>getFullName()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> String firstName;</div><div class="line">  <span class="keyword">private</span> String lastName;</div><div class="line"> </div><div class="line">  <span class="comment">// 这个Demo中省略了一些构造器代码 :)</span></div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(firstName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = firstName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(lastName)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lastName;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">Person bradPitt = <span class="keyword">new</span> Person();</div><div class="line">bradPitt.setFirstName(<span class="string">"Brad"</span>);</div><div class="line">bradPitt.setLastName(<span class="string">"Pitt"</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Prints 'Brad Pitt'</span></div><div class="line">System.out.println(bradPitt.getFullName());</div></pre></td></tr></table></figure>
<p>在上面例子中， <code>fullName</code> 是一个计算过的属性，它不是私有属性，但总能返回正确的结果。</p>
<h1 id="C-和隐式的-getter-setters"><a href="#C-和隐式的-getter-setters" class="headerlink" title="C# 和隐式的 getter/setters"></a>C# 和隐式的 getter/setters</h1><p>我们来看看 C# 特性之一：隐式的 getters/setters，我真的很喜欢它。在 C# 中，如果需要，你可以定义 getters/setters，但是并不用这样做，但是如果你决定要这么做，调用者就不必调用函数。调用者只需要直接访问属性，getter/setter 会自动在钩子函数中运行：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123;get; <span class="built_in">set</span>;&#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123;get; <span class="built_in">set</span>;&#125;</div><div class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FullName &#123;get &#123; <span class="keyword">return</span> firstName + <span class="string">" "</span> + lastName &#125;; <span class="keyword">private</span> <span class="built_in">set</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我觉得这很酷…</p>
<p>现在，如果我想在JavaScript中实现类似的功能，我会浪费很多时间，比如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person0 = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Bruce'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Willis'</span>,</div><div class="line">  <span class="attr">fullName</span>: <span class="string">'Bruce Willis'</span>,</div><div class="line">  <span class="attr">setFirstName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">firstName</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.firstName = firstName;</div><div class="line">    <span class="keyword">this</span>.fullName = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">setLastname</span>: <span class="function"><span class="keyword">function</span> (<span class="params">lastName</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.lastName = lastName;</div><div class="line">    <span class="keyword">this</span>.fullName = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(person0.fullName);</div><div class="line">person0.setFirstName(<span class="string">'Peter'</span>);</div><div class="line"><span class="built_in">console</span>.log(person0.fullName);</div></pre></td></tr></table></figure>
<p>它会打印出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;Bruce Willis&quot;</div><div class="line">&quot;Peter Willis&quot;</div></pre></td></tr></table></figure>
<p>但使用 <code>setXXX(value)</code> 的方式并不够’javascripty’(是个玩笑啦)。</p>
<p>下面的方式可以解决这个问题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Brad'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Pitt'</span>,</div><div class="line">  <span class="attr">getFullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(person1.getFullName()); <span class="comment">// 打印 "Brad Pitt"</span></div></pre></td></tr></table></figure>
<p>现在我们回到被计算过的 getter。你可以设置 first 或 last<br> name，并简单的合并它们的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person1.firstName = <span class="string">'Peter'</span></div><div class="line">person1.getFullName(); <span class="comment">// 返回 "Peter Pitt"</span></div></pre></td></tr></table></figure>
<p>这的确更方便，但我还是不喜欢它，因为我们要定义一个叫“getxxx()”的方法，这也不够’javascripty’。许多年来，我一直在思考如何更好的使用 JavaScript。</p>
<h1 id="然后-Vue-出现了"><a href="#然后-Vue-出现了" class="headerlink" title="然后 Vue 出现了"></a>然后 Vue 出现了</h1><p>在我的<a href="http://www.timoernst.tv/" target="_blank" rel="external">Youtube频道</a>，很多和Vue教程有关的视频都讲到，我习惯响应式开发，在更早的Angular1时代，我们叫它：数据绑定(Data Binding)。它看起来很简单。你只需要在Vue实例的 <code>data()</code> 块中定义一些数据，并绑定到HTML：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">greeting</span>: <span class="string">'Hello world!'</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;greeting&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>显然它会在用户界面打印出 “Hello world!”。</p>
<p>现在，如果你改变“greeting”的值，Vue引擎会对此作出反应并相应地更新视图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  onSomethingClicked() &#123;</div><div class="line">    <span class="keyword">this</span>.greeting = <span class="string">"What's up"</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很长一段时间我都在想，它是如何工作的？当某个对象的属性发生变化时会触发某个事件？或者Vue不停的调用 <code>setInterval</code> 去检查是否更新？</p>
<p>通过阅读<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external">Vue官方文档</a>，我才知道，改变一个对象属性将隐式调用getter/setter,再次通知观察者，然后触发重新渲染，如下图，这个例子来自官方的vue.js文档：</p>
<p><img src="https://cn.vuejs.org/images/data.png" alt=""></p>
<p>但我还想知道：</p>
<ul>
<li><p>怎么让数据自带<code>getter/setters</code>？</p>
</li>
<li><p>这些隐式调用内部是怎样的？</p>
</li>
</ul>
<p>第一个问题很简单：Vue为我们准备好了一切。当你添加新数据，Vue将会通过其属性为其添加 <code>getter/setters</code>。但是我让 <code>foo.bar = 3?</code> 会发生什么？</p>
<p>这个问题的答案出现在我和SVG &amp; Vue专家<a href="https://twitter.com/sarah_edo" target="_blank" rel="external">Sarah Drasner</a>的Twitter对话中：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-ec33528c2d0bf516.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p><em>Timo</em>: <code>foo.bar=value;</code>是怎么做到实时响应的？<br><em>Sarah</em>: 这个问题很难在Twitter说清楚，可以看<a href="https://cn.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="external">这篇文章</a><br><em>Timo</em>: 但这篇文章并没有解释上面提到的问题。<br><em>Timo</em>: 它们就像：分配一个值-&gt;调用setter-&gt;通知观察者，不理解为什么在不使用setInterval和Event的情况下，setter/getter就存在了。<br><em>Sarah</em>: 我的理解是：你获取的所有数据都在Vue实例data{}中被代理了。</p>
</blockquote>
<p>显然，她也是参考的官方文档，之前我也读过，所以我开始阅读<a href="https://github.com/vuejs/vue" target="_blank" rel="external">Vue源码</a>，以便更好的理解发生了什么。过了一会我想起在官方文档看到一个叫 <code>Object.defineProperty()</code> 的方法，我找到它，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 给对象定义响应的属性</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></div><div class="line">  obj: Object,</div><div class="line">  key: string,</div><div class="line">  val: any,</div><div class="line">  customSetter?: ?Function,</div><div class="line">  shallow?: boolean</div><div class="line">) &#123;</div><div class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</div><div class="line"> </div><div class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</div><div class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="comment">// 预定义getter/setters</span></div><div class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</div><div class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</div><div class="line"> </div><div class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</div><div class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</div><div class="line">      <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">        dep.depend()</div><div class="line">        <span class="keyword">if</span> (childOb) &#123;</div><div class="line">          childOb.dep.depend()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</div><div class="line">          dependArray(value)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> value</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</div><div class="line">      <span class="comment">/* 禁用eslint 不进行自我比较 */</span></div><div class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="comment">/* 开启eslint 不进行自己比较 */</span></div><div class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; customSetter) &#123;</div><div class="line">        customSetter()</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (setter) &#123;</div><div class="line">        setter.call(obj, newVal)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        val = newVal</div><div class="line">      &#125;</div><div class="line">      childOb = !shallow &amp;&amp; observe(newVal)</div><div class="line">      dep.notify()</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以答案一直存在于文档中：</p>
<blockquote>
<p>把一个普通 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 Object.defineProperty 把这些属性全部转为 getter/setter。Object.defineProperty 是仅 ES5 支持，且无法 shim 的特性，这也就是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。</p>
</blockquote>
<p>我只想简单的了解 <code>Object.defineProperty()</code> 做了什么，所以我用一个例子简单的给你讲解一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person2 = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'George'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Clooney'</span>,</div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person2, <span class="string">'fullName'</span>, &#123;</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.lastName&#125;</span>`</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(person2.fullName); <span class="comment">// 打印 "George Clooney"</span></div></pre></td></tr></table></figure>
<p>还记得文章开头C#的隐式 <code>getter</code> 吗？它们看起来很类似，但ES5才开始支持。你需要做的是使用 <code>Object.defineProperty()</code> 定义现有对象，以及何时获取这个属性，这个getter被称为响应式——这实际上就是Vue在你添加新数据时背后所做的事。</p>
<h1 id="Object-defineProperty-能让Vue变的更简化吗？"><a href="#Object-defineProperty-能让Vue变的更简化吗？" class="headerlink" title="Object.defineProperty()能让Vue变的更简化吗？"></a>Object.defineProperty()能让Vue变的更简化吗？</h1><p>学完这一切，我一直在想，<code>Object.defineProperty()</code> 是否能让Vue变的更简化？现今越来越多的新术语，是不是真的有必要把事情变得过于复杂，变的让初学者难以理解（Redux也是同样）：</p>
<ul>
<li><p>Mutator - 或许你在说（隐式）setter</p>
</li>
<li><p>Getters - 为什么不用 <code>Object.defineProperty()</code> 替换成（隐式）<br>getter</p>
</li>
<li><p>store.commit() - 为什么不简化成 <code>foo = bar</code>，而是 <code>store.commit(&quot;setFoo&quot;, bar);</code>？</p>
</li>
</ul>
<p>你是怎么认为的？Vuex必须是复杂的还是可以像 <code>Object.defineProperty()</code> 一样简单？</p>
<blockquote>
<p>本文译者：余震（Freak）<br>译文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作者从 Java 与 C# 中经典的 Getters/Setters 引入，讨论了 Vue.js 中从组件渲染函数、数据的 Getter、Setter 劫持、监听器的控制以及重渲染触发整个生命流程。&lt;br&gt;原文链接：&lt;a href=&quot;https://www.timo-ernst.net/blog/2017/07/26/understanding-vue-js-reactivity-depth-object-defineproperty/?utm_campaign=Revue%20newsletter&amp;amp;utm_medium=Newsletter&amp;amp;utm_source=Vue.js%20Feed&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Understanding Vue.js Reactivity in Depth with Object.defineProperty()&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;本人是Java背景，许多年前刚接触JavaScript时有点怪怪的，因为它没有 &lt;code&gt;getters&lt;/code&gt; 和 &lt;code&gt;setters&lt;/code&gt;。随着时间的推移，我开始喜欢上这个缺失的特性，因为相比Java大量的 &lt;code&gt;getter&lt;/code&gt; 和 &lt;code&gt;setter&lt;/code&gt;，它让代码更简洁。例如，我们看看下面的Java代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  String firstName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  String lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这个Demo中省略了一些构造器代码 :)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setFirstName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(firstName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.firstName = firstName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getFirstName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; firstName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setLastName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(lastName)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lastName = lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getLastName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lastName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create instance&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person bradPitt = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bradPitt.setFirstName(&lt;span class=&quot;string&quot;&gt;&quot;Brad&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bradPitt.setLastName(&lt;span class=&quot;string&quot;&gt;&quot;Pitt&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://yoursite.com/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title> 一个让你面试可以多要3k~5k的面试技巧 </title>
    <link href="http://yoursite.com/2017/07/27/2017-07-27-review-skill-1/"/>
    <id>http://yoursite.com/2017/07/27/2017-07-27-review-skill-1/</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天一个同事离职了，因为对公司给的薪水不满意，跳槽去了。</p>
<p>我只能祝福他可以找到一家中意的公司，并跟他讲了我面试的终极绝招！在这里分享给各位。</p>
<p>阅读这篇文章的前提是，你不是真的是一只不会动脑瓜子的菜鸟。</p>
<p>我们简短说说一般程序员面试的过程：</p>
<ol>
<li><p>做题；</p>
</li>
<li><p>面试官拿着题，你自我介绍，接着问你些与题目有关的问题；</p>
</li>
<li><p>项目方面的介绍，发问，以及你项目中碰到过的难题；</p>
</li>
<li><p>祝你好运；</p>
</li>
</ol>
<p>做题考的是技术，这个是硬邦邦的。如果你技术牛逼到无坚不摧，那把我当成傻比就好，大牛！</p>
<a id="more"></a>
<p>自我介绍是个好的切入点，因为主动权在你，我去面试前，通常会在镜子前流利的介绍我自己几遍，仿佛我就应该是这样的（因为包装了），之所以流利，是因为我把台词都用笔写下来了，你可以试试看，到现场你就知道那效果了，真不是吹的。</p>
<p>接下来主动权到面试官手上，开始对你各种发问，知道主动权易手的滋味了吧！记住它！</p>
<p>没关系，接下来还会有我们的主动权的！</p>
<p>一般面试到最后，面试官会问：你项目中有碰到过哪些难题吗？</p>
<p>这个问题简直太关键了！这么明显的主动权转移很多人居然都没有发现（这是我和很多朋友闲聊时得到的结果）？</p>
<p>通过这个问题，面试官可以得到和你水平相等的答案！</p>
<p>因为你会从你的脑海中找寻你遇到过的难题，然后你可能真的那么幸运找到了一个这样的难题，然后这个难题可以准确的代表你的水平。</p>
<p>但是，如果你去面试前就准备好了这个难题，而且，这个难题可能比你当前的水平要高一些，如果你胆子大也可以高得多，看看这篇文章的标题，希望你能懂。</p>
<p>所以为什么说机会是留给有准备的人呢，其实上面的准备花不了你多少时间，但是这点时间换来的是，相同水平的程序员，薪资的高低不齐，其实简单说就是学会总结自己，这就是总结的奖励。</p>
<p>我有时间就会写一些这样的文章推送给大家。</p>
<p>听懂了就关注呗，看把你给美的！！！</p>
<p>记住物极必反，人间正道是沧桑。</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天一个同事离职了，因为对公司给的薪水不满意，跳槽去了。&lt;/p&gt;
&lt;p&gt;我只能祝福他可以找到一家中意的公司，并跟他讲了我面试的终极绝招！在这里分享给各位。&lt;/p&gt;
&lt;p&gt;阅读这篇文章的前提是，你不是真的是一只不会动脑瓜子的菜鸟。&lt;/p&gt;
&lt;p&gt;我们简短说说一般程序员面试的过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;做题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;面试官拿着题，你自我介绍，接着问你些与题目有关的问题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;项目方面的介绍，发问，以及你项目中碰到过的难题；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;祝你好运；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做题考的是技术，这个是硬邦邦的。如果你技术牛逼到无坚不摧，那把我当成傻比就好，大牛！&lt;/p&gt;
    
    </summary>
    
      <category term="Mind" scheme="http://yoursite.com/categories/Mind/"/>
    
    
      <category term="Review" scheme="http://yoursite.com/tags/Review/"/>
    
  </entry>
  
  <entry>
    <title> live-server快速搭建服务 </title>
    <link href="http://yoursite.com/2017/06/14/2017-06-14-live-server/"/>
    <id>http://yoursite.com/2017/06/14/2017-06-14-live-server/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>争取节省大家的时间，看看有多快…</p>
</blockquote>
<p>本地开发常常需要搭建临时的服务，第一时间我们会想到用<a href="https://github.com/indexzero/http-server/" target="_blank" rel="external"><code>http-server</code></a>。</p>
<p>但现在流行修改文件浏览器自动刷新，好像叫<code>hot socketing（热拔插）</code>，这时候又得用到<a href="https://github.com/Raynos/live-reload" target="_blank" rel="external"><code>live-reload</code></a>。</p>
<p>既然装逼就要装到底，服务启动了，我想浏览器自动打开我的项目，再用个<a href="https://github.com/domenic/opener" target="_blank" rel="external"><code>opener</code></a>。</p>
<p>现在只要使用<a href="http://tapiov.net/live-server/" target="_blank" rel="external"><code>live-server</code></a>就能实现这三个插件的所有功能，而且很简单就能启动一个看起来很专业的本地服务。</p>
<p>你只需要全局安装<code>live-server</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g live-server</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在项目根目录执行这条命令，一般会把它放在<code>package.json</code>的<code>scripts</code>下的<code>server</code>中，然后执行<code>npm run server</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;server&quot;: &quot;live-server ./ --port=9090&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后你什么也不用做，等待一会浏览器就自动打开，并且当你修改本地任何文件，浏览器都会立即同步。</p>
<p>希望这篇没有任何技术可言的文章能够帮到你！</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;争取节省大家的时间，看看有多快…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本地开发常常需要搭建临时的服务，第一时间我们会想到用&lt;a href=&quot;https://github.com/indexzero/http-server/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;http-server&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但现在流行修改文件浏览器自动刷新，好像叫&lt;code&gt;hot socketing（热拔插）&lt;/code&gt;，这时候又得用到&lt;a href=&quot;https://github.com/Raynos/live-reload&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;live-reload&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;既然装逼就要装到底，服务启动了，我想浏览器自动打开我的项目，再用个&lt;a href=&quot;https://github.com/domenic/opener&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;opener&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;现在只要使用&lt;a href=&quot;http://tapiov.net/live-server/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;live-server&lt;/code&gt;&lt;/a&gt;就能实现这三个插件的所有功能，而且很简单就能启动一个看起来很专业的本地服务。&lt;/p&gt;
&lt;p&gt;你只需要全局安装&lt;code&gt;live-server&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g live-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title> 阿里云配置 node.js + Nginx 反向代理 </title>
    <link href="http://yoursite.com/2017/06/14/2017-06-15-aliyun-node-nginx/"/>
    <id>http://yoursite.com/2017/06/14/2017-06-15-aliyun-node-nginx/</id>
    <published>2017-06-13T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学如逆水行舟</p>
</blockquote>
<p>1.首先你得安装<code>node.js</code>，我是用<code>nvm</code>安装的，这样比较好控制版本，当然你也可以使用<code>apt-get</code>。</p>
<p>2.下一步是安装<code>Nginx</code>，不去管版本的话，直接<code>sudo apt-get install nginx</code>就行。</p>
<p>3.进入<code>/etc/nginx</code>目录，查看<code>nginx.conf</code>配置文件，在<code>http</code>块中找到这样两句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># include /etc/nginx/conf.d/*.conf;</div><div class="line"># include /etc/nginx/sites-enabled/*;</div></pre></td></tr></table></figure>
<p>看看你的这两句有没有注释掉，如果注释了就把<code>#</code>号去掉，没有注释的话就跳过这一步。</p>
<p>4.进入<code>/etc/nginx/conf.d</code>目录，创建我们自己的配置文件，去名规则最好是域名加端口，这样以后方便找，比如我的：<code>rockjins-com-8081.conf</code>，配置文件写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">upstream rockjins &#123;</div><div class="line">	server 127.0.0.1:8081; # 这里的端口号写你node.js运行的端口号，也就是要代理的端口号，我的项目跑在8081端口上</div><div class="line">	keepalive 64;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">	listen 80; #这里的端口号是你要监听的端口号</div><div class="line">	server_name 39.108.55.xxx www.rockjins.com rockjins.com; # 这里是你的服务器名称，也就是别人访问你服务的ip地址或域名，可以写多个，用空格隔开</div><div class="line"></div><div class="line">	location / &#123;</div><div class="line">		proxy_set_header X-Real-IP $remote_addr;</div><div class="line">		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">		proxy_set_header Host $http_host;</div><div class="line">		proxy_set_header X-Nginx-Proxy true;</div><div class="line">		proxy_set_header Connection &quot;&quot;;</div><div class="line">		proxy_pass http://rockjins; # 这里要和最上面upstream后的应用名一致，可以自定义</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>5.保存文件后，输入<code>sudo nginx -t</code>测试我们的配置文件是否有错误，一般错误都是漏个分号，少个字母之类的，错误提示很精确，没错的话会输出下面两句:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</div></pre></td></tr></table></figure>
<p>6.现在我们需要重启<code>Nginx</code>，我们的配置文件才会生效，输入<code>sudo service nginx reload</code>;</p>
<p>7.最后一步把我坑惨了，弄了一晚上，就是安全组的问题，之前有篇文章还写到了这个问题，一转眼就忘了。(<a href="https://rockjins.js.org/2017/05/27/2017-05-27-service-port/" target="_blank" rel="external">ssh连接服务器 Operation timed out</a>)</p>
<p>因为服务跑在<code>8081</code>端口上，但是阿里云的安全组默认是拒绝<code>4000</code>端口以上的授权策略的，大家一定记得去添加安全组规则，如图:</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-a261e3d8f8e0a267.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>8.打开浏览器，输入你的IP或域名，是不是把<code>8081</code>端口代理到<code>80</code>端口上了，哈哈。</p>
<p>希望这篇文章能够帮到你，有什么问题可以找我，大家一起进步！</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学如逆水行舟&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.首先你得安装&lt;code&gt;node.js&lt;/code&gt;，我是用&lt;code&gt;nvm&lt;/code&gt;安装的，这样比较好控制版本，当然你也可以使用&lt;code&gt;apt-get&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;2.下一步是安装&lt;code&gt;Nginx&lt;/code&gt;，不去管版本的话，直接&lt;code&gt;sudo apt-get install nginx&lt;/code&gt;就行。&lt;/p&gt;
&lt;p&gt;3.进入&lt;code&gt;/etc/nginx&lt;/code&gt;目录，查看&lt;code&gt;nginx.conf&lt;/code&gt;配置文件，在&lt;code&gt;http&lt;/code&gt;块中找到这样两句：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# include /etc/nginx/conf.d/*.conf;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# include /etc/nginx/sites-enabled/*;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看看你的这两句有没有注释掉，如果注释了就把&lt;code&gt;#&lt;/code&gt;号去掉，没有注释的话就跳过这一步。&lt;/p&gt;
&lt;p&gt;4.进入&lt;code&gt;/etc/nginx/conf.d&lt;/code&gt;目录，创建我们自己的配置文件，去名规则最好是域名加端口，这样以后方便找，比如我的：&lt;code&gt;rockjins-com-8081.conf&lt;/code&gt;，配置文件写入以下内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;upstream rockjins &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	server 127.0.0.1:8081; # 这里的端口号写你node.js运行的端口号，也就是要代理的端口号，我的项目跑在8081端口上&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	keepalive 64;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;server &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	listen 80; #这里的端口号是你要监听的端口号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	server_name 39.108.55.xxx www.rockjins.com rockjins.com; # 这里是你的服务器名称，也就是别人访问你服务的ip地址或域名，可以写多个，用空格隔开&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	location / &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_set_header X-Real-IP $remote_addr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_set_header Host $http_host;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_set_header X-Nginx-Proxy true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_set_header Connection &amp;quot;&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		proxy_pass http://rockjins; # 这里要和最上面upstream后的应用名一致，可以自定义&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title> ssh连接服务器 Operation timed out </title>
    <link href="http://yoursite.com/2017/05/27/2017-05-27-service-port/"/>
    <id>http://yoursite.com/2017/05/27/2017-05-27-service-port/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>买了个阿里云ECS云服务器，捣鼓吧…</p>
</blockquote>
<p>大家知道，云服务器的默认端口是<code>22</code>，为了防止服务器端口被轻易扫描到，我在<code>sshd_config</code>中把<code>Port</code>改为<code>3999</code>（这是我随意改的一个端口号）。</p>
<p>今天再次进行ssh连接时，登了大概一分钟，报了这样一个错:</p>
<p><code>ssh: connect to host 39.108.55.** port 3999: Operation timed out</code></p>
<p>连接服务器超时了，第一时间我想到服务器被墙了，不过我在阿里云上买的，没道理啊，先去<code>ping</code>一下再说:</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-9a78824b18ab9f3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<p>没被墙啊，去google下，又说是本地防火墙把端口禁了，打开防火墙一看：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-2e0cc9992f28dfda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>也不是防火墙的问题啊，行吧，跑到阿里云去看看，东找西找，来到了<code>安全组规则</code>栏目下，长这个样:</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-f9f3c8702e34319d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>上面有个端口范围，我发现自己随便设置的<code>3999</code>并不在配置的范围里，遂添加了一条安全组规则，把3999端口加了上去，再进行ssh连接，终于连上了…</p>
<p>这问题弄了我一上午，菜鸟就是苦，啥都自己摸索，坚持吧！</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;买了个阿里云ECS云服务器，捣鼓吧…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家知道，云服务器的默认端口是&lt;code&gt;22&lt;/code&gt;，为了防止服务器端口被轻易扫描到，我在&lt;code&gt;sshd_config&lt;/code&gt;中把&lt;code&gt;Port&lt;/code&gt;改为&lt;code&gt;3999&lt;/code&gt;（这是我随意改的一个端口号）。&lt;/p&gt;
&lt;p&gt;今天再次进行ssh连接时，登了大概一分钟，报了这样一个错:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh: connect to host 39.108.55.** port 3999: Operation timed out&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;连接服务器超时了，第一时间我想到服务器被墙了，不过我在阿里云上买的，没道理啊，先去&lt;code&gt;ping&lt;/code&gt;一下再说:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2859850-9a78824b18ab9f3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
      <category term="SSH" scheme="http://yoursite.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title> 昨夜の梦 - 树 </title>
    <link href="http://yoursite.com/2017/05/24/2017-05-24-diary-tree-die/"/>
    <id>http://yoursite.com/2017/05/24/2017-05-24-diary-tree-die/</id>
    <published>2017-05-23T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>还是这个熟悉的地方，一片迷雾，看不清周围的环境。</p>
<p>在这片荒芜的土地上有一棵孤独的小树苗，大概到我腰间的高度，相比它的粗细来说已经算是高挑的了。</p>
<p>树枝被一根粗麻绳绑着，麻绳的另一头绑在我的脖子上。</p>
<p>我站在一旁，手里拿着一根不知哪来的水管，不时给小树苗浇浇水，渴了就自己喝一口，我似乎从未如此惬意、满足。</p>
<p>小树长得很快，不一会就和我一样高了，我就像看自己孩子长大一样幸福，唯一不足就是绳子勒的有点紧。</p>
<p>时间过的很快，我想如果继续这样下去，我会不会被吊死在这。</p>
<p>我试着松一松颈上的绳子，才发现是死结，树上绑的也是死结。</p>
<a id="more"></a>
<p>其实我可以把这棵树连根拔起，但我舍不得，这是目光可及的唯一一棵树。</p>
<p>又过了一会，树干已经和我一样粗了，要拔起来已经不可能了，我恳求它不要再长高了，我害怕死了。</p>
<p>待续…</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还是这个熟悉的地方，一片迷雾，看不清周围的环境。&lt;/p&gt;
&lt;p&gt;在这片荒芜的土地上有一棵孤独的小树苗，大概到我腰间的高度，相比它的粗细来说已经算是高挑的了。&lt;/p&gt;
&lt;p&gt;树枝被一根粗麻绳绑着，麻绳的另一头绑在我的脖子上。&lt;/p&gt;
&lt;p&gt;我站在一旁，手里拿着一根不知哪来的水管，不时给小树苗浇浇水，渴了就自己喝一口，我似乎从未如此惬意、满足。&lt;/p&gt;
&lt;p&gt;小树长得很快，不一会就和我一样高了，我就像看自己孩子长大一样幸福，唯一不足就是绳子勒的有点紧。&lt;/p&gt;
&lt;p&gt;时间过的很快，我想如果继续这样下去，我会不会被吊死在这。&lt;/p&gt;
&lt;p&gt;我试着松一松颈上的绳子，才发现是死结，树上绑的也是死结。&lt;/p&gt;
    
    </summary>
    
      <category term="Diary" scheme="http://yoursite.com/categories/Diary/"/>
    
    
      <category term="Diary" scheme="http://yoursite.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title> 常见音乐相关中英文速查表（持续更新） </title>
    <link href="http://yoursite.com/2017/05/23/2017-05-23-music-english-chinese/"/>
    <id>http://yoursite.com/2017/05/23/2017-05-23-music-english-chinese/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>叫你不好好学英语</p>
</blockquote>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Analog</td>
<td>模拟(信号)</td>
<td>传输感很差</td>
</tr>
<tr>
<td>Acoustic</td>
<td>原生</td>
<td>相比处理过的音色而言</td>
</tr>
<tr>
<td>Acoustic Guitar</td>
<td>木吉他</td>
<td></td>
</tr>
<tr>
<td>AUX</td>
<td>辅助</td>
<td></td>
</tr>
<tr>
<td>AFL</td>
<td>推子后监听</td>
<td></td>
</tr>
<tr>
<td>Activity</td>
<td>动态</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="B"><a href="#B" class="headerlink" title="B"></a>B</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bass</td>
<td>低音、贝斯</td>
<td></td>
</tr>
<tr>
<td>Bpm</td>
<td>速度、拍子</td>
<td>Beat Per Minute(每分钟拍子数)</td>
</tr>
<tr>
<td>Bar</td>
<td>小节</td>
<td></td>
</tr>
<tr>
<td>Breakdown</td>
<td>=&gt;</td>
<td>歌曲中夹杂着的具有“切断感”的伴奏</td>
</tr>
<tr>
<td>Birdge Plot</td>
<td>桥段</td>
<td>用于衔接歌曲段落</td>
</tr>
<tr>
<td>Brass</td>
<td>铜号</td>
<td>泛指铜乐器</td>
</tr>
<tr>
<td>Bell</td>
<td>金属铃</td>
<td></td>
</tr>
<tr>
<td>BAL/Balance</td>
<td>平衡</td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Chord</td>
<td>和弦</td>
<td></td>
</tr>
<tr>
<td>Chorus</td>
<td>合唱</td>
<td></td>
</tr>
<tr>
<td>Chime</td>
<td>风铃</td>
<td></td>
</tr>
<tr>
<td>Clip</td>
<td>削波</td>
<td></td>
</tr>
<tr>
<td>Cue</td>
<td>监听、选听</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="D"><a href="#D" class="headerlink" title="D"></a>D</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Digital</td>
<td>数字(信号)</td>
<td>这个概念被放大化并推广，当然，这也是一场技术革命</td>
</tr>
<tr>
<td>Delay</td>
<td>延迟</td>
<td></td>
</tr>
<tr>
<td>Drums</td>
<td>鼓</td>
<td></td>
</tr>
<tr>
<td>Drumstick</td>
<td>鼓棒</td>
<td></td>
</tr>
<tr>
<td>Display</td>
<td>显示</td>
<td></td>
</tr>
<tr>
<td>Dynamic</td>
<td>动态</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>EFF/Effects</td>
<td>效果</td>
<td>一般针对音频信号</td>
</tr>
<tr>
<td>Equalize</td>
<td>均衡</td>
<td></td>
</tr>
<tr>
<td>Export</td>
<td>导出</td>
<td></td>
</tr>
<tr>
<td>EP</td>
<td>电钢琴</td>
<td>Electric Piano</td>
</tr>
<tr>
<td>Electric Guitar</td>
<td>电吉他</td>
</tr>
<tr>
<td>Echo</td>
<td>回声</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="F"><a href="#F" class="headerlink" title="F"></a>F</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Fade</td>
<td>过渡(音频)</td>
<td>常见的有：Fade In（淡入）、Fade Out（淡出）、Cross Fade（音频交叉过渡）</td>
</tr>
<tr>
<td>Flute</td>
<td>笛子</td>
<td></td>
</tr>
<tr>
<td>FX</td>
<td>特效</td>
<td></td>
</tr>
<tr>
<td>Fuse</td>
<td>保险</td>
<td></td>
</tr>
<tr>
<td>FT Switch</td>
<td>脚踏开关</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="G"><a href="#G" class="headerlink" title="G"></a>G</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Groove</td>
<td>=&gt;</td>
<td>鼓各个元素之间的搭配和切换（节奏律动，和loop有相通的地方）</td>
</tr>
<tr>
<td>Gain</td>
<td>增益</td>
<td>控制输入信号的大小</td>
</tr>
<tr>
<td>Group</td>
<td>组</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="H"><a href="#H" class="headerlink" title="H"></a>H</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Horn</td>
<td>号</td>
<td>泛指喇叭状的乐器</td>
</tr>
<tr>
<td>High</td>
<td>高音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Instrument</td>
<td>乐器</td>
<td></td>
</tr>
<tr>
<td>Import</td>
<td>导入</td>
<td></td>
</tr>
<tr>
<td>Intro</td>
<td>开头</td>
<td>歌曲的开头</td>
</tr>
<tr>
<td>Insert</td>
<td>插入</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="J"><a href="#J" class="headerlink" title="J"></a>J</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="K"><a href="#K" class="headerlink" title="K"></a>K</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keys</td>
<td>键盘(钢琴)</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="L"><a href="#L" class="headerlink" title="L"></a>L</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Loop</td>
<td>循环</td>
<td></td>
</tr>
<tr>
<td>Low</td>
<td>低音</td>
<td></td>
</tr>
<tr>
<td>L/Left</td>
<td>左声道</td>
<td></td>
</tr>
<tr>
<td>Limit</td>
<td>限幅</td>
<td></td>
</tr>
<tr>
<td>Lamp</td>
<td>灯</td>
<td></td>
</tr>
<tr>
<td>Level</td>
<td>电平</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="M"><a href="#M" class="headerlink" title="M"></a>M</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Metronome</td>
<td>节拍器</td>
<td></td>
</tr>
<tr>
<td>Melody</td>
<td>旋律</td>
<td></td>
</tr>
<tr>
<td>Mix</td>
<td>混音</td>
<td></td>
</tr>
<tr>
<td>Mixer</td>
<td>混音器</td>
<td>音频缩混中的一个重要设备（设置），Cubase里按F3，可出现Mixer面板（硬/软）</td>
</tr>
<tr>
<td>Mix down</td>
<td>音频缩混</td>
<td>每个音频轨之间的关系和比例的调整</td>
</tr>
<tr>
<td>MID/Middle</td>
<td>中音</td>
<td></td>
</tr>
<tr>
<td>MON/Monitor</td>
<td>监听</td>
<td></td>
</tr>
<tr>
<td>Master</td>
<td>总路输出</td>
<td></td>
</tr>
<tr>
<td>Main</td>
<td>总</td>
<td></td>
</tr>
<tr>
<td>MONO</td>
<td>单声道</td>
<td></td>
</tr>
<tr>
<td>Modulation</td>
<td>移调</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="N"><a href="#N" class="headerlink" title="N"></a>N</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Note</td>
<td>音符、音调</td>
<td>口语把乐谱也叫做Note</td>
</tr>
</tbody>
</table>
<h2 id="O"><a href="#O" class="headerlink" title="O"></a>O</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Outro</td>
<td>结尾</td>
<td>歌曲的结尾(Ending)</td>
</tr>
<tr>
<td>Orch</td>
<td>交响类音色</td>
<td>Orchestra</td>
</tr>
<tr>
<td>Organ</td>
<td>风琴</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="P"><a href="#P" class="headerlink" title="P"></a>P</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Pitch</td>
<td>音高</td>
<td></td>
</tr>
<tr>
<td>Pan</td>
<td>声像定位</td>
<td><a href="http://www.audiobar.net/forum.php?mod=viewthread&amp;tid=141206&amp;extra=&amp;page=1" target="_blank" rel="external">Pan与Phase的区别</a></td>
</tr>
<tr>
<td>Phase</td>
<td>相位</td>
<td></td>
</tr>
<tr>
<td>Percussion</td>
<td>打击乐</td>
<td></td>
</tr>
<tr>
<td>Piano</td>
<td>钢琴</td>
<td></td>
</tr>
<tr>
<td>Plucked</td>
<td>弹拨乐</td>
<td></td>
</tr>
<tr>
<td>Pad</td>
<td>插入衰减</td>
<td></td>
</tr>
<tr>
<td>PFL</td>
<td>推子前监听</td>
<td></td>
</tr>
<tr>
<td>Phantom</td>
<td>幻象</td>
<td></td>
</tr>
<tr>
<td>Progressor</td>
<td>处理器</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Quantize</td>
<td>量化</td>
<td>即将手动输入的midi音符按照规定精度（1/4拍，1/8拍，1/16拍）对位到精确的拍子中，一般节奏类乐器多需要量化功能，但过于依赖此功能容易导致音乐过于死板（如钢琴，管乐，并不提倡使用此功能）</td>
</tr>
</tbody>
</table>
<h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>REV/Reverb</td>
<td>混响</td>
<td>使音频更有空间感，有的时候可以让死板的声音变得更真实，震撼</td>
</tr>
<tr>
<td>Rhythm</td>
<td>节奏</td>
<td></td>
</tr>
<tr>
<td>R/Right</td>
<td>右声道</td>
<td></td>
</tr>
<tr>
<td>RET/RTN/Return</td>
<td>返回</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Synth</td>
<td>合成</td>
<td></td>
</tr>
<tr>
<td>Synthesizer</td>
<td>合成器(硬/软)</td>
<td>一般指创造音色的软件或硬件</td>
</tr>
<tr>
<td>Sampling</td>
<td>采样</td>
<td>截取音频文件中的某部分然后把它取出来独立作成一个文件</td>
</tr>
<tr>
<td>Strings</td>
<td>弦乐类音色</td>
<td></td>
</tr>
<tr>
<td>Sub</td>
<td>超低音</td>
<td></td>
</tr>
<tr>
<td>Sax</td>
<td>萨克斯</td>
<td>Saxophone</td>
</tr>
<tr>
<td>Sensitivity</td>
<td>敏感度</td>
<td>控制输入信息大小</td>
</tr>
<tr>
<td>Signal</td>
<td>信号</td>
<td></td>
</tr>
<tr>
<td>Sum</td>
<td>总</td>
<td></td>
</tr>
<tr>
<td>Stereo</td>
<td>立体声</td>
<td></td>
</tr>
<tr>
<td>Sustain</td>
<td>维持</td>
<td>相当于延音</td>
</tr>
<tr>
<td>Scoop</td>
<td>消减中音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="T"><a href="#T" class="headerlink" title="T"></a>T</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tempo</td>
<td>速度、拍子</td>
<td></td>
</tr>
<tr>
<td>Tick</td>
<td>拍</td>
<td></td>
</tr>
<tr>
<td>Track</td>
<td>轨道</td>
<td>比如Audio Track(音频轨)、MIDI Track(MIDI轨)…</td>
</tr>
<tr>
<td>Trim</td>
<td>增益</td>
<td>控制输入信号大小</td>
</tr>
<tr>
<td>Tremble</td>
<td>比High更高的高音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="U"><a href="#U" class="headerlink" title="U"></a>U</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNBLA/Unbalance</td>
<td>非平衡</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="V"><a href="#V" class="headerlink" title="V"></a>V</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Volumn</td>
<td>音量</td>
<td></td>
</tr>
<tr>
<td>Violin</td>
<td>小提琴</td>
<td></td>
</tr>
<tr>
<td>Voice/Vocal</td>
<td>人声</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="W"><a href="#W" class="headerlink" title="W"></a>W</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Wave</td>
<td>wave文件格式</td>
<td>最常用的原始音频文件格式，保留着音频的最棒效果和质量</td>
</tr>
<tr>
<td>Wind</td>
<td>笛子和单簧管</td>
<td></td>
</tr>
<tr>
<td>Woodwind</td>
<td>木笛、竹笛</td>
<td></td>
</tr>
<tr>
<td>Woofer</td>
<td>低音</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="X"><a href="#X" class="headerlink" title="X"></a>X</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Y"><a href="#Y" class="headerlink" title="Y"></a>Y</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Z"><a href="#Z" class="headerlink" title="Z"></a>Z</h2><table>
<thead>
<tr>
<th>英文</th>
<th>中文</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;叫你不好好学英语&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A&quot;&gt;&lt;/a&gt;A&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Analog&lt;/td&gt;
&lt;td&gt;模拟(信号)&lt;/td&gt;
&lt;td&gt;传输感很差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acoustic&lt;/td&gt;
&lt;td&gt;原生&lt;/td&gt;
&lt;td&gt;相比处理过的音色而言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acoustic Guitar&lt;/td&gt;
&lt;td&gt;木吉他&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AUX&lt;/td&gt;
&lt;td&gt;辅助&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AFL&lt;/td&gt;
&lt;td&gt;推子后监听&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Activity&lt;/td&gt;
&lt;td&gt;动态&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B&quot;&gt;&lt;/a&gt;B&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;英文&lt;/th&gt;
&lt;th&gt;中文&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bass&lt;/td&gt;
&lt;td&gt;低音、贝斯&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bpm&lt;/td&gt;
&lt;td&gt;速度、拍子&lt;/td&gt;
&lt;td&gt;Beat Per Minute(每分钟拍子数)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bar&lt;/td&gt;
&lt;td&gt;小节&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Breakdown&lt;/td&gt;
&lt;td&gt;=&amp;gt;&lt;/td&gt;
&lt;td&gt;歌曲中夹杂着的具有“切断感”的伴奏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Birdge Plot&lt;/td&gt;
&lt;td&gt;桥段&lt;/td&gt;
&lt;td&gt;用于衔接歌曲段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Brass&lt;/td&gt;
&lt;td&gt;铜号&lt;/td&gt;
&lt;td&gt;泛指铜乐器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bell&lt;/td&gt;
&lt;td&gt;金属铃&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BAL/Balance&lt;/td&gt;
&lt;td&gt;平衡&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Music" scheme="http://yoursite.com/categories/Music/"/>
    
    
      <category term="Music" scheme="http://yoursite.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title> postMessage死循环与window.parent </title>
    <link href="http://yoursite.com/2017/05/19/2017-05-19-iframe-parent/"/>
    <id>http://yoursite.com/2017/05/19/2017-05-19-iframe-parent/</id>
    <published>2017-05-18T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>轮回不止 生死不休</p>
</blockquote>
<p>上礼拜用postMessage进行iframe跨域通信(<a href="https://rockjins.js.org/2017/05/05/2017-05-05-iframe-cross-domain-Communication/" target="_blank" rel="external">使用postMessage解决iframe跨域通信问题</a>），因为写的代码不够健壮，其实说到底还是了解的知识点不够多，这个礼拜BUG就提上来了…</p>
<p>我相当于开发一个中间层框架，在我外层有一个大框架用<code>iframe</code>包着我，我再用<code>iframe</code>包着另一个页面，如图（配色好评）：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-a86c9ee478da30db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<p>按理说用<code>postMessage</code>是不会出问题的:我负责父页面和子页面之间的通信，他们把数据发送给我，我再替他们发送给对方。</p>
<p>但是这几个框架又是相互独立的，只有在特定的情景下才会这样嵌套，BUG就是在页面独立时出现的。</p>
<p>我们知道，获取父级<code>iframe</code>最简单的方法就是<code>window.parent</code>，这样可以拿到父级<code>iframe</code>的<code>window</code>对象，我大概就是这样发送<code>postMessage</code>给父级<code>iframe</code>的：</p>
<p><code>parent.postMessage(&#39;someMessage&#39;, &#39;*&#39;)</code></p>
<p>而且<code>postMessage</code>方法的调用是写在<code>onmessage</code>事件里的，也就是子页面发送消息过来，我监听到<code>onmessage</code>事件，就发送消息给父级<code>iframe</code>。</p>
<p>问题来了，之前说过框架之前都可以独立运行，如果没有父级<code>iframe</code>，只剩下我的框架和子框架，会发生什么呢？</p>
<p>大家来开心一下，就是这样子：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-14d4a7fba0330aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>而且最诡异的一点是，信息发起人的<code>HOST</code>并不是子页面,而是我自己？WTF?</p>
<p>我不信，跑去找子页面的开发负责人，问他是不是写了死循环不停发消息，对方很坦荡的把代码打开：“你自己看吧，哪来的死循环？”</p>
<p>好吧，回去自己找BUG，经过一个小时的埋头苦读，终于发现了问题所在。</p>
<p>我现在问大家一个问题：当你的页面处于最顶层，也就是外层没有<code>iframe</code>包裹你，求这时<code>window === window.parent</code>的返回值。</p>
<p>呵呵，居然是<code>true</code>，也就是说，当你的页面处于最顶层，<code>window.parent</code>指向你自己！</p>
<p>有图为证：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-b9ddba097441693c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>相当于当你处于最顶层时，你儿子就是你自己，你也可以是自己的爷爷，当然也可以是自己的曾孙，大概就是这个意思，希望大家以后不会遇到这个坑，其实也不算坑啦，说到底还是自己知识面不够广，连轮回这么简单的道理都不明白…</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;轮回不止 生死不休&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上礼拜用postMessage进行iframe跨域通信(&lt;a href=&quot;https://rockjins.js.org/2017/05/05/2017-05-05-iframe-cross-domain-Communication/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用postMessage解决iframe跨域通信问题&lt;/a&gt;），因为写的代码不够健壮，其实说到底还是了解的知识点不够多，这个礼拜BUG就提上来了…&lt;/p&gt;
&lt;p&gt;我相当于开发一个中间层框架，在我外层有一个大框架用&lt;code&gt;iframe&lt;/code&gt;包着我，我再用&lt;code&gt;iframe&lt;/code&gt;包着另一个页面，如图（配色好评）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2859850-a86c9ee478da30db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title> 如何兼容多种模块规范 </title>
    <link href="http://yoursite.com/2017/05/09/2017-05-09-compatible-module/"/>
    <id>http://yoursite.com/2017/05/09/2017-05-09-compatible-module/</id>
    <published>2017-05-08T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如果你也在开发模块，并且想让你的模块同时在前后端运行，那么这篇文章会让你有收获。</p>
</blockquote>
<p>模块运行的环境主要有四个: <code>Node</code> 、 <code>AMD</code> 、<code>CMD</code> 、 普通的浏览器环境</p>
<p>要同时兼容这四种环境，我们只需要找出每个环境独有的特点即可进行判断：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">name, definition</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 检测上下文环境是否为AMD、CMD</span></div><div class="line">  <span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">'function'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 检查上下文环境是否为Node</span></div><div class="line">    hasExports = <span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (hasDefine) &#123;</div><div class="line">    <span class="comment">// AMD环境、CMD环境则define(definition);</span></div><div class="line">    define(definition);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</div><div class="line">    <span class="comment">// 定义为普通Node模块 module.exports = definition();</span></div><div class="line">    <span class="built_in">module</span>.exports = definition();</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 将模块的执行结果赋值在window变量中，在浏览器中this等于window对象，this[name] = definition();</span></div><div class="line">    <span class="keyword">this</span>[name] = definition();</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">  <span class="keyword">return</span> hello;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你也在开发模块，并且想让你的模块同时在前后端运行，那么这篇文章会让你有收获。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;模块运行的环境主要有四个: &lt;code&gt;Node&lt;/code&gt; 、 &lt;code&gt;AMD&lt;/code&gt; 、&lt;code&gt;CMD&lt;/code&gt; 、 普通的浏览器环境&lt;/p&gt;
&lt;p&gt;要同时兼容这四种环境，我们只需要找出每个环境独有的特点即可进行判断：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;name, definition&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 检测上下文环境是否为AMD、CMD&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasDefine = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; define === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 检查上下文环境是否为Node&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hasExports = &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasDefine) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// AMD环境、CMD环境则define(definition);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    define(definition);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hasExports) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 定义为普通Node模块 module.exports = definition();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = definition();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将模块的执行结果赋值在window变量中，在浏览器中this等于window对象，this[name] = definition();&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[name] = definition();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hello = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hello;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Module" scheme="http://yoursite.com/tags/Module/"/>
    
      <category term="AMD" scheme="http://yoursite.com/tags/AMD/"/>
    
      <category term="CMD" scheme="http://yoursite.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title> 使用postMessage解决iframe跨域通信问题 </title>
    <link href="http://yoursite.com/2017/05/05/2017-05-05-iframe-cross-domain-Communication/"/>
    <id>http://yoursite.com/2017/05/05/2017-05-05-iframe-cross-domain-Communication/</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周碰到一个让人头疼的需求：要在我的web项目中嵌入另一个第三方web项目。第一时间想到的就是用<code>iframe</code>了，但问题来了，我和第三方web项目是有交互的，这就违反同源策略了，处理跨域问题是最让人头疼的事之一。</p>
<p>需求是这样的，在我的页面点击一些按钮，要实时反馈到<code>iframe</code>子页面，子页面再进行响应。</p>
<p>当时脑子里第一时间想到的解决方案是：用<code>NGINX</code>把两个项目代理到同一域名下。但这样似乎有点小题大做了，有没有更方便快捷的方法呢？</p>
<p>在<code>window</code>对象下有个<code>postMessage</code>方法，是专门用来解决跨域通信问题的。</p>
<a id="more"></a>
<p>关于<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">postMessage</a>的详细介绍请戳这里，不过MDN的文档太详细了，导致有些同学看完还是一脸懵逼，下面我们就来看看怎么用<code>postMessage</code>实现iframe跨域通信，当你会用了之后再回去看文档，感觉是完全不同的。</p>
<p>首先我们模拟场景，假设有两个不同源的页面，<code>iframePage.html</code>是<code>index.html</code>的子页面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"border:5px solid #333;"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"./iframePage.html"</span> <span class="attr">id</span>=<span class="string">'myframe'</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iframePage --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"border:5px solid #333;"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>this is iframePage<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在这两个iframe是无法通信，因为它们是不同源的（假设存在跨域问题），这时候就要用到<code>postMessage</code>了。</p>
<p>我们先试着从父页面向子页面发送一条消息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// idnex.html</span></div><div class="line"></div><div class="line"><span class="comment">//获取iframe元素</span></div><div class="line">iFrame = <span class="built_in">document</span>.getElementById(<span class="string">'myframe'</span>)</div><div class="line"></div><div class="line"><span class="comment">//iframe加载完毕后再发送消息，否则子页面接收不到message</span></div><div class="line">iFrame.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//iframe加载完立即发送一条消息</span></div><div class="line">  iFrame.contentWindow.postMessage(<span class="string">'MessageFromIndex1'</span>,<span class="string">'*'</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道<code>postMessage</code>是挂载在<code>window</code>对象上的，所以等<code>iframe</code>加载完毕后，用<code>iFrame.contentWindow</code>获取到<code>iframe</code>的<code>window</code>对象，然后调用<code>postMessage</code>方法，相当于给子页面发送了一条消息。</p>
<p><code>postMessage</code>方法第一个参数是要发送的数据，可以是任何原始类型的数据。</p>
<blockquote>
<p>Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)之前，第一个参数必须是一个字符串。</p>
</blockquote>
<p><code>postMessage</code>方法第二个参数可以设置要发送到哪个url，如果当前子页面的url和设置的不一致，则会发送失败，我们设置为<code>*</code>，代表所有url都允许发送。</p>
<p><code>postMessage</code>方法还有第三个参数，属于高级用法，这里不做讨论，可以稍后去<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">MDN</a>了解。</p>
<p>消息发送到<code>iframePage.html</code>，我们来接收message：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iframePage.html</span></div><div class="line"></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessageFromIndex</span> (<span class="params"> event </span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'receiveMessageFromIndex'</span>, event )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听message事件</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessageFromIndex, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>我们只需要在子页面监听<code>message</code>事件，并且设置好回调函数即可，来看看打印出来的<code>event</code>：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-6ad5418cb923806c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><code>event</code>对象中的<code>data</code>属性存放着我们从父页面传过来的数据，就这么简单！</p>
<p>让我们再试试从子页面发送数据给父页面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// iframePage.html</span></div><div class="line"></div><div class="line"><span class="comment">//给父页面发送消息，data为对象</span></div><div class="line">parent.postMessage( &#123;<span class="attr">msg</span>: <span class="string">'MessageFromIframePage'</span>&#125;, <span class="string">'*'</span>);</div></pre></td></tr></table></figure>
<p>父页面接收数据：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.html</span></div><div class="line"></div><div class="line"><span class="comment">//回调函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">receiveMessageFromIframePage</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'receiveMessageFromIframePage'</span>, event)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//监听message事件</span></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"message"</span>, receiveMessageFromIframePage, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>我看看到，的确可以传输不同的数据，此时<code>data</code>为一个对象：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2859850-f7c42766d4a274de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>大家可以到<a href="https://github.com/rockjins/postMessage-demo" target="_blank" rel="external">postMessage-demo</a>把代码clone下来运行试试看。</p>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周碰到一个让人头疼的需求：要在我的web项目中嵌入另一个第三方web项目。第一时间想到的就是用&lt;code&gt;iframe&lt;/code&gt;了，但问题来了，我和第三方web项目是有交互的，这就违反同源策略了，处理跨域问题是最让人头疼的事之一。&lt;/p&gt;
&lt;p&gt;需求是这样的，在我的页面点击一些按钮，要实时反馈到&lt;code&gt;iframe&lt;/code&gt;子页面，子页面再进行响应。&lt;/p&gt;
&lt;p&gt;当时脑子里第一时间想到的解决方案是：用&lt;code&gt;NGINX&lt;/code&gt;把两个项目代理到同一域名下。但这样似乎有点小题大做了，有没有更方便快捷的方法呢？&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;window&lt;/code&gt;对象下有个&lt;code&gt;postMessage&lt;/code&gt;方法，是专门用来解决跨域通信问题的。&lt;/p&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="iframe" scheme="http://yoursite.com/tags/iframe/"/>
    
      <category term="Cross-Domain" scheme="http://yoursite.com/tags/Cross-Domain/"/>
    
  </entry>
  
  <entry>
    <title> Meteor: Error: Depending on unknown package xxx </title>
    <link href="http://yoursite.com/2017/04/12/2017-04-12-meteor-unknow-package/"/>
    <id>http://yoursite.com/2017/04/12/2017-04-12-meteor-unknow-package/</id>
    <published>2017-04-11T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Versions: 1.4.1</p>
<p>据我在GitHub issue上了解到的，许多人都碰到这个问题。</p>
<p>很多朋友程序运行时没问题，但build的时候就出现这个错误，我是这样解决的：</p>
<p>Meteor build 时找不到新添加的包解决办法：</p>
<p>1.执行<code>Meteor reset</code>；</p>
<p>2.删除<code>.meteor/local/resolver-result-cache.json</code>文件；</p>
<blockquote>
<p>这个文件包含所有package的缓存，在运行meteor build时，打包命令运行后会去读这个文件，但新添加的package并不在其中，所以会出现找不到新添加的package的问题。删除这个文件后，再次执行打包命令，程序发现找不到这个缓存文件，就会去重新读取所有的package，这时候就不存在找不到新添加的package的问题了。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Versions: 1.4.1&lt;/p&gt;
&lt;p&gt;据我在GitHub issue上了解到的，许多人都碰到这个问题。&lt;/p&gt;
&lt;p&gt;很多朋友程序运行时没问题，但build的时候就出现这个错误，我是这样解决的：&lt;/p&gt;
&lt;p&gt;Meteor build 时找不到新添加的包解决办法：&lt;/p&gt;
&lt;p&gt;1.执行&lt;code&gt;Meteor reset&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;2.删除&lt;code&gt;.meteor/local/resolver-result-cache.json&lt;/code&gt;文件；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个文件包含所有package的缓存，在运行meteor build时，打包命令运行后会去读这个文件，但新添加的package并不在其中，所以会出现找不到新添加的package的问题。删除这个文件后，再次执行打包命令，程序发现找不到这个缓存文件，就会去重新读取所有的package，这时候就不存在找不到新添加的package的问题了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Meteor" scheme="http://yoursite.com/tags/Meteor/"/>
    
      <category term="Debug" scheme="http://yoursite.com/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title> 『翻译』METEOR教程(REACT VERSION)</title>
    <link href="http://yoursite.com/2017/04/05/2017-04-05-meteor-react-todo-app/"/>
    <id>http://yoursite.com/2017/04/05/2017-04-05-meteor-react-todo-app/</id>
    <published>2017-04-04T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://www.meteor.com/tutorials/react/creating-an-app" target="_blank" rel="external">Read the original</a></p>
<p>如果你有成为全栈的梦想，METEOR是个不错的平台。</p>
</blockquote>
<hr>
<h3 id="1-创建你的第一个App-Creating-your-first-app"><a href="#1-创建你的第一个App-Creating-your-first-app" class="headerlink" title="1.创建你的第一个App(Creating your first app)"></a>1.创建你的第一个App(Creating your first app)</h3><p>在这个教程中，我们会创建一个简单的App去管理待办事项列表并和他人合作完成任务。在完成这个项目后，你会对Meteor和它的项目结构有个基本的了解，。我们先创建App，打开命令行，键入以下命令：</p>
<p><em>译者注：前提是你安装了meteor,具体安装步骤可以<a href="http://guide-zh.ourmeteor.com/index.html#quickstart" target="_blank" rel="external">参考这里</a></em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor create simple-todos</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>它会创建一个名叫<code>simple-todos</code>的文件夹，里面包含我们开发meteor App所需要的文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">client/main.js        # 在客户端的JavaScript入口文件</div><div class="line">client/main.html      # 定义视图容器</div><div class="line">client/main.css       # 定义App样式</div><div class="line">server/main.js        # 服务端的JavaScript入口文件</div><div class="line">package.json          # 用于安装和管理NPM包</div><div class="line">.meteor               # Meteor内部文件</div><div class="line">.gitignore            # git的管理文件</div></pre></td></tr></table></figure>
<p>运行这个新创建的App：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd simple-todos</div><div class="line">meteor npm install</div><div class="line">meteor</div></pre></td></tr></table></figure>
<p>打开你的浏览器并输入<code>http://localhost:3000</code>查看App是否运行成功。</p>
<p>在我们教程正式开始之前，你可以看看这个App的内部组成。比如，用你惯用的编辑器修改<code>client/main.html</code>文件中的<code>&lt;h1&gt;</code>内的文字。当你修改完毕保存文件时，浏览器会自动更新并展示新的内容，我们叫它<code>热拔插(hot code push)</code>。</p>
<h4 id="ES2015特性"><a href="#ES2015特性" class="headerlink" title="ES2015特性"></a>ES2015特性</h4><p>如果你还没有尝试过下个版本的JavaScript特性，初始App内的代码语法，还有整个教程使用的语法，都会让你感到怪异。这是因为Meteor支持大部分ES2015的特性，也就是下个版本的JavaScript。常用的特性包括：</p>
<ol>
<li><p>箭头函数：<code>(arg) =&gt; {return result;}</code></p>
</li>
<li><p>简写方法：<code>render() { ... }</code></p>
</li>
<li><p><code>const</code>和<code>let</code>取代<code>var</code></p>
</li>
</ol>
<p>你可以在<a href="https://docs.meteor.com/packages/ecmascript.html" target="_blank" rel="external">ecmascript docs</a>查看Meteor支持的新特性。更多关于ES2015的信息可以查看下面几篇文章：</p>
<ul>
<li><p><a href="http://git.io/es6features" target="_blank" rel="external">Luke Hoban’s “ES6 features”</a></p>
</li>
<li><p><a href="https://github.com/getify/You-Dont-Know-JS/tree/master/es6%20%26%20beyond" target="_blank" rel="external">Kyle Simpson’s “You don’t know JS: ES6 and beyond”</a></p>
</li>
<li><p><a href="https://github.com/nzakas/understandinges6" target="_blank" rel="external">Nikolas C. Zakas “Understanding ECMAScript 6”</a></p>
</li>
</ul>
<p>现在你有一些如何开发Meteor App的经验了，让我们开始创建一个待办事项列表应用程序吧！如果你在这个教程中发现了bug或是错误，可以在<a href="https://github.com/rockjins/Meteor-Tutorials" target="_blank" rel="external">GitHub</a>上请发起<code>issue</code>或<code>PR</code>。</p>
<h3 id="2-使用React-Components定义视图层-Defining-views-with-React-components"><a href="#2-使用React-Components定义视图层-Defining-views-with-React-components" class="headerlink" title="2.使用React Components定义视图层(Defining views with React components)"></a>2.使用React Components定义视图层(Defining views with React components)</h3><p>我们把React作为视图层，让我们增加一些NPM packages，以便使用React进行开发。打开一个新的terminal在你的App根目录下，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor npm install --save react react-dom</div></pre></td></tr></table></figure>
<h4 id="替换初始化的代码"><a href="#替换初始化的代码" class="headerlink" title="替换初始化的代码"></a>替换初始化的代码</h4><p>在开始前，我们要替换App的初始代码。接下来我们讨论要做些什么。</p>
<p>第一步，替换初始化的HTML中的内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"render-target"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第二步，删除<code>client/main.js</code>，并创建三个新文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./client/main.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./imports/ui/App.jsx'</span>;</div><div class="line"></div><div class="line">Meteor.startup(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('render-target'));</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Reacr, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">'./Task.jsx'</span>;</div><div class="line"></div><div class="line"><span class="comment">//App组件 —— 代表整个App</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>  <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  getTasks() &#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'This is task 1'</span> &#125;,</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'This is task 2'</span> &#125;,</div><div class="line">      &#123; <span class="attr">_id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'This is task 3'</span> &#125;,</div><div class="line">    ];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  renderTasks()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTasks().map.(<span class="function">(<span class="params">task</span>) =&gt;</span> &#123;</div><div class="line">      &lt;Task key=&#123;task._id&#125; task=&#123;task&#125; /&gt;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">          &#123;this.renderTasks()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./imports/ui/Task.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123;Component, PropTypes&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Task组件 —— 代表一个单独的todo条目</span></div><div class="line"><span class="keyword">export</span>  <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.props.task.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Task.propTypes = &#123;</div><div class="line">  <span class="comment">//这个组件通过React prop去得到并显示任务</span></div><div class="line">  <span class="comment">//我们可以用propTypes去指明哪些是必须的</span></div><div class="line">  task:PropTypes.object.isRequired,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们仅在我们的App中做了3件事：</p>
<ol>
<li><p>一个<code>App</code> React component</p>
</li>
<li><p>一个<code>Task</code> React component</p>
</li>
<li><p>一些初始化代码(在<code>client/main.jsx</code>客户端JavaScript入口文件中)，在<code>Meteor.startup</code>代码块中，我们知道当页面加载完毕后会执行里面的代码。这段代码加载其他组件，并渲染<code>#render-target</code>元素。</p>
</li>
</ol>
<p>你还可以在<a href="https://guide.meteor.com/structure.html" target="_blank" rel="external">Application Structure article</a>中了解import是如何工作的，还有如何组织你的代码。</p>
<p>在接下来的教程中，我们增加或更改代码，都会涉及到这些组件。</p>
<h4 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h4><p>在浏览器中，我们的app应该看起来像这个样子：</p>
<blockquote>
<p>Todo List</p>
<ul>
<li><p>This is task 1</p>
</li>
<li><p>This is task 2</p>
</li>
<li><p>This is task 3</p>
</li>
</ul>
</blockquote>
<p>如果你的app看起来不是这样，可以去<a href="https://github.com/meteor/simple-todos-react" target="_blank" rel="external">GitHub下载代码</a>，并和你自己的代码对比，找出不同的地方。</p>
<h4 id="HTML文件定义静态内容"><a href="#HTML文件定义静态内容" class="headerlink" title="HTML文件定义静态内容"></a>HTML文件定义静态内容</h4><p>Meteor会解析你app目录下的所有HTML文件，并识别三个顶级标签<code>&lt;head&gt;</code>,<code>&lt;body&gt;</code>和<code>&lt;template&gt;</code>。<code>&lt;head&gt;</code>标签内的所有内容会发送到客户端HTML的<code>head</code>标签，<code>&lt;body&gt;</code>标签内的所有内容也会发送到客户端HTML的<code>body</code>标签内，就和正常的HTML文件一样。</p>
<p>任何<code>&lt;template&gt;</code>标签内的内容会编译成Meteor Templates，你可以在HTML中用<code>{{>templateName}}</code>去调用，或在JavaScript中用<code>Template.templateName</code>去调用。在这个教程中，我们不会用到Meteor提供的模板特性，因为我们将用React去定义所有视图组件。</p>
<h4 id="用React定义视图组件"><a href="#用React定义视图组件" class="headerlink" title="用React定义视图组件"></a>用React定义视图组件</h4><p>在React中，视图组件是<code>React.Component</code>的子类(当我们用<code>import { Component } from &#39;react&#39;</code>的方式引入时)。你可以自由的在组件上添加方法，但有几个特殊的方法是不行的，比如<code>render</code>方法。组件通过其父组件的<code>props</code>属性，也可以接收数据。在这个教程中，我们会重温一些React的通用特性。你也可以查看<a href="https://facebook.github.io/react/tutorial/tutorial.html" target="_blank" rel="external">React官方教程</a>。</p>
<h4 id="重新审视JSX中的render方法"><a href="#重新审视JSX中的render方法" class="headerlink" title="重新审视JSX中的render方法"></a>重新审视JSX中的render方法</h4><p>在每个React Component中最重要的方法就是<code>render()</code>，它会访问React并得到被描述的HTML，然后把组件显示出来。这个HTML内容用JavaScript扩展语法写成，叫<code>JSX</code>,看起来就像在JavaScript中写HTML。你可以看到一些显而易见的差异：在JSX中，你要用<code>className</code>去代替<code>class</code>属性。还有一件很重要的事，它不是像Spacebars和Angular一样的模板语言，实际上它是直接编译成正常的JavaScript。<a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="external">查看更多JSX的信息</a>。</p>
<p>JSX支持<code>ecmascript</code>扩展包，所以它默认支持所有Meteor app的扩展包。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*./client/main.css*/</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: sans-serif;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#315481</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, #315481, #918e82 100%);</div><div class="line">  <span class="attribute">background-attachment</span>: fixed;</div><div class="line"></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#d2edf4</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, #d0edf5, #e1e5f0 100%);</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">15px</span> <span class="number">15px</span> <span class="number">15px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#login-buttons</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">10px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.new-task</span> <span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: transparent;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">80px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.new-task</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</div><div class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">background</span>: white;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.delete</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">background</span>: none;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">border</span>: none;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">border-bottom</span>: <span class="number">#eee</span> solid <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span> <span class="selector-class">.text</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.checked</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#888</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.checked</span> <span class="selector-class">.text</span> &#123;</div><div class="line">  <span class="attribute">text-decoration</span>: line-through;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">li</span><span class="selector-class">.private</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</div><div class="line">  <span class="attribute">border-color</span>: <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> <span class="selector-class">.hide-completed</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.toggle-private</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> (max-width: <span class="number">600px</span>) &#123;</div><div class="line">  <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">15px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.search</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.new-task</span> <span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>增加上面的CSS代码到你的项目中，这个首页看起来会很棒。在你的浏览器中检查样式是否加载进去了。</p>
<h3 id="3-在集合中储存任务-Storing-tasks-in-a-collection"><a href="#3-在集合中储存任务-Storing-tasks-in-a-collection" class="headerlink" title="3.在集合中储存任务(Storing tasks in a collection)"></a>3.在集合中储存任务(Storing tasks in a collection)</h3><p>Meteor使用集合(collections)储存持久化数据。在Meteor中，集合的特殊之处在于，可以同时在服务端和客户端读取数据，这让我们很容易编写视图层逻辑，而不需要编写太多服务端代码。集合会自动更新自身，所以一个视图组件配合集合，可以自动的显示最新的数据。</p>
<p>你可以在Meteor教程中阅读更多<a href="http://guide.meteor.com/collections.html" target="_blank" rel="external">有关集合的文章</a>。</p>
<p>创建一个集合很简单，只需要在你的代码中调用<code>MyCollection = new Mongo.Collection(&quot;my-collection&quot;);</code>。在服务端，这会创建一个名叫<code>my-collection</code>的MongoDB集合，它会创建一个缓存去链接服务端的集合。我们将在第12章节了解更多客户端和服务端的区别，我们假设整个数据库都运行在客户端，并开始编写我们的代码。</p>
<p>我们创建一个Mongo集合来定义新的<code>tasks</code>模块，并导出它：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/api/tasks.js</span></div><div class="line"><span class="keyword">import</span> &#123; Mongo &#125; <span class="keyword">from</span> <span class="string">'meteor/mongo'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> Tasks = <span class="keyword">new</span> Mongo.Collection(<span class="string">'tasks'</span>);</div></pre></td></tr></table></figure>
<p>注意，我们把这个文件放在了新的目录<code>imports/api</code>下。这是一个合适的位置，用于放置和API有关的文件。我们在这里抛出”collections”，之后读取它并添加一个”publications”，再用”methods”去编辑它。你可以在Meteor指南中了解更多有关如何<a href="http://guide.meteor.com/structure.html" target="_blank" rel="external">在APP中组织你的代码结构</a>。</p>
<p>我们需要在服务端导入这个模块（这将创建MongoDB集合，并设置管道得到数据给Client）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//server/main.js</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../imports/api/tasks.js'</span>;</div></pre></td></tr></table></figure>
<h4 id="在React-component中使用集合数据"><a href="#在React-component中使用集合数据" class="headerlink" title="在React component中使用集合数据"></a>在React component中使用集合数据</h4><p>我们使用Atmosphere包:<code>react-meteor-data</code>，它会创建一个数据容器，把Meteor的响应式数据供给给React component。</p>
<p>我们要安装一个Meteor包，以及它要使用到的NPM包，<code>react-addons-pure-render-mixin</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor npm install --save react-addons-pure-render-mixin</div><div class="line">meteor add react-meteor-data</div></pre></td></tr></table></figure>
<p>在使用<code>react-meteor-data</code>前，我们需要使用<code>createContainer</code>高阶组件把我们的组件包裹在一个容器中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">'meteor/react-meteor-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">'./Task.jsx'</span>;</div><div class="line"></div><div class="line"><span class="comment">//App容器 - 代表整个App</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span>  <span class="title">Component</span> </span>&#123;</div><div class="line">  renderTasks() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.tasks.map(<span class="function">(<span class="params">task</span>) =&gt;</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Task</span> <span class="attr">key</span>=<span class="string">&#123;task._id&#125;</span> <span class="attr">task</span>=<span class="string">&#123;task&#125;</span> /&gt;</span></span></div><div class="line">    ));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">          &#123;this.renderTasks()&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">App.propTypes = &#123;</div><div class="line">  tasks: PropTypes.array.isRequired,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default createContainer(() =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    tasks: Tasks.find(&#123;&#125;).fetch(),</div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<p>这个被包裹的<code>App</code>组件从<code>Tasks</code>集合中提取tasks，并将它们用作App底层组件，它们被包装为<code>tasks</code> prop。它以响应的方式运行，当数据库内容改变，App会重新渲染，我们可以立刻看到！</p>
<p>当你对代码进行以上更改时，你会发现之前在代办列表中的任务消失了。因为我们现在的数据库是空的，我们需要插入一些任务。</p>
<h4 id="从服务端数据库控制台插入任务"><a href="#从服务端数据库控制台插入任务" class="headerlink" title="从服务端数据库控制台插入任务"></a>从服务端数据库控制台插入任务</h4><p>我们称集合中的每一项为文档。使用服务端数据库控制台插入一些文档到我们的集合中。在一个新的terminal中进入你的app项目目录，并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor mongo</div></pre></td></tr></table></figure>
<p>这会在你app的本地开发数据库中打开一个控制台。键入下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.tasks.insert(&#123; text: &quot;Hello world!&quot;, createdAt: new Date() &#125;);</div></pre></td></tr></table></figure>
<p>在浏览器中，你可以立刻看到用户界面更新并展示了这个新的任务。可以看到，我们不需要编写任何代码将服务端数据库连接到前端——一切都是自动的。</p>
<p>用同样的方法从数据库控制台添加一些不同的任务吧。在下一章节，我们将了解怎样在app用户界面增加一些功能，比如不使用数据库控制台去增加任务。</p>
<h3 id="4-使用表单添加任务"><a href="#4-使用表单添加任务" class="headerlink" title="4.使用表单添加任务"></a>4.使用表单添加任务</h3><p>在这一章节，我们将增加一个表单字段，给用户在列表中添加任务。</p>
<p>首先，让我们增加一个表单域到<code>App</code>组件中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line">&lt;div className=<span class="string">"container"</span>&gt;</div><div class="line">  &lt;header&gt;</div><div class="line">    &lt;h1&gt;Todo List&lt;/h1&gt;</div><div class="line"></div><div class="line">    &lt;form className="new-task" onSubmit=&#123;this.handleSubmit.bind(this)&#125; &gt;</div><div class="line">      &lt;input</div><div class="line">        type="text"</div><div class="line">        ref="textInput"</div><div class="line">        placeholder="Type to add new tasks"</div><div class="line">      /&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">  &lt;/header&gt;</div><div class="line"></div><div class="line">  &lt;ul&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>提示：JSX中添加注释的方法：{/* … */}</p>
</blockquote>
<p>你可以看到<code>form</code>元素有一个<code>onSubmit</code>属性，它映射到组件的<code>handleSubmit</code>方法。在React中，你可以这样监听浏览器事件，就像表单上的submit事件。<code>input</code>元素有一个<code>ref</code>属性，它能让我们稍后轻松的访问到这个元素。</p>
<p>让我们添加<code>handleSubmit</code>放到到<code>App</code>组件里：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createContainer &#125; <span class="keyword">from</span> <span class="string">'meteor/react-meteor-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"><span class="comment">//...省略一些代码...</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  handleSubmit(event) &#123;</div><div class="line">    event.preventDefault();</div><div class="line"></div><div class="line">    <span class="comment">// 通过React的ref拿到文本字段</span></div><div class="line">    <span class="keyword">const</span> text = ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value.trim();</div><div class="line"></div><div class="line">    Tasks.insert(&#123;</div><div class="line">      text,</div><div class="line">      <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="comment">// 当前时间</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 清空表单</span></div><div class="line">    ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//...省略一些代码...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你的App有一个新的表单字段了。只需要在输入框输入文本，并按下回车键，就可以添加任务了。如果你打开一个新的浏览器窗口并再打开这个app，你会发现列表会自动自动在所有客户端同步。</p>
<h4 id="在React中监听事件"><a href="#在React中监听事件" class="headerlink" title="在React中监听事件"></a>在React中监听事件</h4><p>就如你看到的，你可以通过参考组件上切确的方法来管理DOM事件。在事件管理器内部，你可以通过使用<code>React.findDOMNode</code>去拿到带有<code>ref</code>属性的元素。查看更多React支持的事件类型，以及事件系统如何运行的，请参考<a href="https://facebook.github.io/react/docs/events.html" target="_blank" rel="external">React文档</a>。</p>
<h4 id="插入集合"><a href="#插入集合" class="headerlink" title="插入集合"></a>插入集合</h4><p>在事件管理器内部，我们通过调用<code>Tasks.insert</code>添加了一个任务到<code>tasks</code>集合，因为我们不用为集合定义一个模式，所以可以添加任何属性到任务对象，比如创建时间。</p>
<p>客户端可以添加任何数据到数据库，这样并不安全，但目前来说一切都没问题。在第10章节，我们将学习怎样安全并有限制的将数据插入到数据库中。</p>
<h4 id="储存我们的任务"><a href="#储存我们的任务" class="headerlink" title="储存我们的任务"></a>储存我们的任务</h4><p>目前，我们最新的任务在列表的最底下。这对任务列表来说不是很好，我们希望看到最新的任务在最前面。</p>
<p>我们可以通过使用<code>createdAt</code>字段自动排序来解决此问题。只需在包裹<code>App</code>组件的数据容器内的<code>find</code>方法调用时添加一个排序选项：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createContainer(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">tasks</span>: Tasks.find(&#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">createdAt</span>: <span class="number">-1</span> &#125; &#125;).fetch(),</div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<p>回到浏览器，并确认是否如期运行：任何新添加的任务都会出现在列表的最顶端，而不是底部。</p>
<p>在下一章节，我们会增加一些十分重要的待办事项列表特性：检查任务和删除任务。</p>
<h3 id="5-检查任务和删除任务"><a href="#5-检查任务和删除任务" class="headerlink" title="5.检查任务和删除任务"></a>5.检查任务和删除任务</h3><p>到目前为止，我们还仅仅只能插入文档。现在，我们将学习怎么去更新和删除它们。</p>
<p>让我们添加两个新元素到我们的组件，一个复选框和一个删除按钮，以及它们对应的时间管理器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Tasks &#125; <span class="keyword">from</span> <span class="string">'../api/tasks.js'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Task组件 - 代表一个单独的代办事项</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  toggleChecked() &#123;</div><div class="line">    <span class="comment">// 设置checked属性和当前值相反</span></div><div class="line">    Tasks.update(<span class="keyword">this</span>.props.task._id, &#123;</div><div class="line">      <span class="attr">$set</span>: &#123; <span class="attr">checked</span>: !<span class="keyword">this</span>.props.task.checked &#125;,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  deleteThisTask() &#123;</div><div class="line">    Tasks.remove(<span class="keyword">this</span>.props.task._id);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//当修改checked后，给tasks一个不同的className</span></div><div class="line">    <span class="comment">// 以便我们更好的在CSS中修改样式</span></div><div class="line">    <span class="keyword">const</span> taskClassName = <span class="keyword">this</span>.props.task.checked ? <span class="string">'checked'</span> : <span class="string">''</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;taskClassName&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"delete"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteThisTask.bind(this)&#125;</span>&gt;</span></div><div class="line">          &amp;times;</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">input</span></span></div><div class="line">          <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">          <span class="attr">readOnly</span></div><div class="line">          <span class="attr">checked</span>=<span class="string">&#123;this.props.task.checked&#125;</span></div><div class="line">          <span class="attr">onClick</span>=<span class="string">&#123;this.toggleChecked.bind(this)&#125;</span></div><div class="line">        /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">"text"</span>&gt;</span>&#123;this.props.task.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>在上面代码中，我们调用<code>Tasks.update</code>去检查一个任务。</p>
<p>集合上的更新功能需要两个参数。第一个参数是标识集合子集的选择器，第二个是一个update参数，用来指定要对匹配对象做什么。</p>
<p>在这个例子中，选择器就是相对应的任务的<code>_id</code>，update参数用<code>$set</code>去切换<code>checked</code>字段，这将代表任务是否已经完成。</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>上面代码使用<code>Tasks.remove</code>去删除任务。<code>remove</code>函数只需要一个参数，一个选择器，用于确定要在集合中删除的项目。</p>
<h3 id="6-在Android或iOS上运行app"><a href="#6-在Android或iOS上运行app" class="headerlink" title="6.在Android或iOS上运行app"></a>6.在Android或iOS上运行app</h3><blockquote>
<p>目前，Meteor并不支持在Windows上进行移动端打包。如果你是Windows用户，请忽略这一章节。</p>
</blockquote>
<p>目前为止，我们构建了我们的app，并在浏览器上对它进行测试，但是Meteor是为了跨平台而设计的——只需要几句命令，就可以把你的待办事项列表网站构建成Android或iOS应用。</p>
<p>Meteor可以轻松的设置所有构建app所需的工具，但是下载所有程序可能需要一段时间——Android大约300M，iOS要安装Xcode大约2GB，如果你不希望下载这些工具，你可以调到下一个章节。</p>
<h4 id="在iOS模拟器上运行"><a href="#在iOS模拟器上运行" class="headerlink" title="在iOS模拟器上运行"></a>在iOS模拟器上运行</h4><p>如果你有Mac，你可以运行在iOS模拟器上运行app。</p>
<p>进入到app目录并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor install-sdk ios</div></pre></td></tr></table></figure>
<p>它会安装你构建iOS app所要用到的所有所有配置。当上面安装完成，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">meteor add-platform ios</div><div class="line">meteor run ios</div></pre></td></tr></table></figure>
<p>你会看到iOS模拟器弹出，并且你的app在里面运行。</p>
<h4 id="在Android模拟器上运行"><a href="#在Android模拟器上运行" class="headerlink" title="在Android模拟器上运行"></a>在Android模拟器上运行</h4><p>在terminal中进入你的app目录并键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor install-sdk android</div></pre></td></tr></table></figure>
<p>它会安装你构建Android app所要用到的所有所有配置。当上面安装完成，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor add-platform android</div></pre></td></tr></table></figure>
<p>同意协议条款，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run android</div></pre></td></tr></table></figure>
<p>在一些初始化后，我们将看到一个Android模拟器弹出，你的app在原生生Android容器里运行。</p>
<p>模拟器运行可能会有一些慢，所以如果你想看到应用真实的情况，还得到真实设备上使用。</p>
<h4 id="在Android设备上运行"><a href="#在Android设备上运行" class="headerlink" title="在Android设备上运行"></a>在Android设备上运行</h4><p>首先，完成上述的所有Android设置步骤。然后，确定你的设备有<a href="https://developer.android.com/studio/run/device.html#developer-device-options" target="_blank" rel="external">USB调试模式</a>而且手机插进了电脑的USB插口。此外，你必须在真机运行前关闭安卓模拟器。</p>
<p>接下来，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run android-device</div></pre></td></tr></table></figure>
<p>你的app将会构建并安装到你的设备上。</p>
<h4 id="在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）"><a href="#在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）" class="headerlink" title="在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）"></a>在iPhone或iPad上运行（只限Mac：要有苹果开发者账号）</h4><p>如果你有苹果开发者账号，你也可以在iOS设备上运行你的app。键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor run ios-device</div></pre></td></tr></table></figure>
<p>这将会为你的iOS app项目打开Xcode。你可以使用Xcode让app运行在任何Xcode支持的设备或模拟器上。</p>
<p>现在我们看到了在移动端运行我们的app多么容易，让我们给app再添加一些特性。</p>
<h3 id="7-在组件状态中存储临时的用户界面数据"><a href="#7-在组件状态中存储临时的用户界面数据" class="headerlink" title="7.在组件状态中存储临时的用户界面数据"></a>7.在组件状态中存储临时的用户界面数据</h3><p>在这一章节，我们将在app中添加客户端数据过滤功能，以便用户选择只查看未完成的任务。我们将学习怎样使用React的component state去存储只在客户端用到的临时数据。</p>
<p>首先，我们需要增加一个复选框到<code>App</code>组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">&lt;header&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo List<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="comment">//新添加内容</span></div><div class="line">  &lt;label className=<span class="string">"hide-completed"</span>&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span></span></span></div><div class="line">      <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">      <span class="attr">readOnly</span></div><div class="line">      <span class="attr">checked</span>=<span class="string">&#123;this.state.hideCompleted&#125;</span></div><div class="line">      <span class="attr">onClick</span>=<span class="string">&#123;this.toggleHideCompleted.bind(this)&#125;</span></div><div class="line">    /&gt;</div><div class="line">    Hide Completed Tasks</div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="comment">//新添加内容</span></div></pre></td></tr></table></figure>
<p>你可以看到它从<code>this.state.hideCompleted</code>读取数据。React有一个特殊的字段叫<code>state</code>，你可以把组件数据存储和封装在里面。我们需要在组件的构造器中初始化<code>this.state.hideCompleted</code>的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="attr">hideCompleted</span>: <span class="literal">false</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以事件管理器中调用<code>this.setState</code>去更新<code>this.state</code>，这将异步更新state属性，并重新渲染组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">    ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.textInput).value = <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//新添加的内容</span></div><div class="line">  toggleHideCompleted() &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">hideCompleted</span>: !<span class="keyword">this</span>.state.hideCompleted,</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"><span class="comment">//新添加的内容</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>this.state.hideCompleted</code>为true时，我们需要更新<code>renderTasks</code>方法去过滤已经完成的任务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line">renderTasks() &#123;</div><div class="line">  <span class="keyword">let</span> filteredTasks = <span class="keyword">this</span>.props.tasks;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.state.hideCompleted) &#123;</div><div class="line">    filteredTasks = filteredTasks.filter(<span class="function"><span class="params">task</span> =&gt;</span> !task.checked);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> filteredTasks.map(<span class="function">(<span class="params">task</span>) =&gt;</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Task</span> <span class="attr">key</span>=<span class="string">&#123;task._id&#125;</span> <span class="attr">task</span>=<span class="string">&#123;task&#125;</span> /&gt;</span></span></div><div class="line">  ));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你现在选择复选框，任务列表不会再展现已经完成的任务了。</p>
<h4 id="新的特性：显示未完成任务的数目"><a href="#新的特性：显示未完成任务的数目" class="headerlink" title="新的特性：显示未完成任务的数目"></a>新的特性：显示未完成任务的数目</h4><p>现在我们要写一个查询条件，用来过滤掉已经完成的任务。我们也可以用相同的查询来显示已完成的任务总数。为此，我们需要在我们的数据容器中拿到一个计数，并在<code>render</code>方法中添加一行代码。因为我们已经有客户端集合中的数据，增加这个额外的计数不需要向服务端发起任何请求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createContainer(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">tasks</span>: Tasks.find(&#123;&#125;, &#123; <span class="attr">sort</span>: &#123; <span class="attr">createdAt</span>: <span class="number">-1</span> &#125; &#125;).fetch(),</div><div class="line">    <span class="comment">//新添加的的内容</span></div><div class="line">    incompleteCount: Tasks.find(&#123; <span class="attr">checked</span>: &#123; <span class="attr">$ne</span>: <span class="literal">true</span> &#125; &#125;).count(),</div><div class="line">    <span class="comment">//新添加的的内容</span></div><div class="line">  &#125;;</div><div class="line">&#125;, App);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/App.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> (</div><div class="line">  &lt;div className="container"&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">      //新添加的的内容</div><div class="line">      &lt;h1&gt;Todo List (&#123;this.props.incompleteCount&#125;)&lt;/h1&gt;</div><div class="line">      //新添加的的内容</div><div class="line">      &lt;label className="hide-completed"&gt;</div><div class="line">        &lt;input</div><div class="line">//...省略一些代码...</div><div class="line"></div><div class="line">App.propTypes = &#123;</div><div class="line">  tasks: PropTypes.array.isRequired,</div><div class="line">  //新添加的的内容</div><div class="line">  incompleteCount: PropTypes.number.isRequired,</div><div class="line">  //新添加的的内容</div><div class="line">&#125;;</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="8-添加账户"><a href="#8-添加账户" class="headerlink" title="8.添加账户"></a>8.添加账户</h3><p>Meteor自带一个账户系统和用户登录接口，让你在短短几分钟就能添加多用户功能到你的app内。</p>
<blockquote>
<p>目前，Meteor使用Blaze UI组件作为它的默认UI引擎。在未来，也可能会有专为React定制的组件。</p>
</blockquote>
<p>开启账户系统和UI，我们需要增加相对应的包。在你的app目录，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meteor add accounts-ui accounts-password</div></pre></td></tr></table></figure>
<h4 id="在React中写Blaze组件"><a href="#在React中写Blaze组件" class="headerlink" title="在React中写Blaze组件"></a>在React中写Blaze组件</h4><p>要通过<code>accounts-ui</code>包使用Blaze UI，我们需要把它包裹在React组件中。这样让我们在新文件中创建了一个叫<code>AccountsUIWrapper</code>的新组件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/ui/AccountsUIWrapper.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Template &#125; <span class="keyword">from</span> <span class="string">'meteor/templating'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Blaze &#125; <span class="keyword">from</span> <span class="string">'meteor/blaze'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountsUIWrapper</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="comment">//使用Meteor Blaze渲染登录按钮</span></div><div class="line">    <span class="keyword">this</span>.view = Blaze.render(Template.loginButtons,</div><div class="line">      ReactDOM.findDOMNode(<span class="keyword">this</span>.refs.container));</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    <span class="comment">//清除Blaze视图</span></div><div class="line">    Blaze.remove(<span class="keyword">this</span>.view);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//只渲染一个占位符容器即可</span></div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ref</span>=<span class="string">"container"</span> /&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在App中定义刚刚创建的组件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//imports/ui/App.jsx</div><div class="line"></div><div class="line">import &#123; Tasks &#125; from '../api/tasks.js';</div><div class="line"></div><div class="line">import Task from './Task.jsx';</div><div class="line">//...新添加的代码...</div><div class="line">import AccountsUIWrapper from './AccountsUIWrapper.jsx';</div><div class="line">//...新添加的代码...</div><div class="line"></div><div class="line">class App extends Component &#123;</div><div class="line">//...省略一些代码...</div><div class="line">            Hide Completed Tasks</div><div class="line">          &lt;/label&gt;</div><div class="line">          //...新添加的代码...</div><div class="line">          &lt;AccountsUIWrapper /&gt;</div><div class="line">          //...新添加的代码...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，增加下列代码去配置accounts UI，用username去替换email address:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//imports/startup/accounts-config.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Accounts &#125; <span class="keyword">from</span> <span class="string">'meteor/accounts-base'</span>;</div><div class="line"></div><div class="line">Accounts.ui.config(&#123;</div><div class="line">  <span class="attr">passwordSignupFields</span>: <span class="string">'USERNAME_ONLY'</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同时我们需要在客户端入口导入这个配置文件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//client/main.jsx</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; Meteor &#125; <span class="keyword">from</span> <span class="string">'meteor/meteor'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"></div><div class="line"><span class="comment">//...新添加的代码...</span></div><div class="line"><span class="keyword">import</span> <span class="string">'../imports/startup/accounts-config.js'</span>;</div><div class="line"><span class="comment">//...新添加的代码...</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../imports/ui/App.jsx'</span>;</div></pre></td></tr></table></figure>
<h4 id="添加用户相关功能"><a href="#添加用户相关功能" class="headerlink" title="添加用户相关功能"></a>添加用户相关功能</h4><blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.meteor.com/tutorials/react/creating-an-app&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Read the original&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你有成为全栈的梦想，METEOR是个不错的平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-创建你的第一个App-Creating-your-first-app&quot;&gt;&lt;a href=&quot;#1-创建你的第一个App-Creating-your-first-app&quot; class=&quot;headerlink&quot; title=&quot;1.创建你的第一个App(Creating your first app)&quot;&gt;&lt;/a&gt;1.创建你的第一个App(Creating your first app)&lt;/h3&gt;&lt;p&gt;在这个教程中，我们会创建一个简单的App去管理待办事项列表并和他人合作完成任务。在完成这个项目后，你会对Meteor和它的项目结构有个基本的了解，。我们先创建App，打开命令行，键入以下命令：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;译者注：前提是你安装了meteor,具体安装步骤可以&lt;a href=&quot;http://guide-zh.ourmeteor.com/index.html#quickstart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考这里&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;meteor create simple-todos&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Translation" scheme="http://yoursite.com/tags/Translation/"/>
    
      <category term="Meteor" scheme="http://yoursite.com/tags/Meteor/"/>
    
      <category term="Full-Stack" scheme="http://yoursite.com/tags/Full-Stack/"/>
    
  </entry>
  
  <entry>
    <title> You Don&#39;t Need jQuery - Query Selector </title>
    <link href="http://yoursite.com/2017/04/01/2017-04-01-you-dont-need-jq-query-selector/"/>
    <id>http://yoursite.com/2017/04/01/2017-04-01-you-dont-need-jq-query-selector/</id>
    <published>2017-03-31T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>GitHub地址：<a href="https://github.com/oneuijs/You-Dont-Need-jQuery" target="_blank" rel="external">https://github.com/oneuijs/You-Dont-Need-jQuery</a></p>
</blockquote>
<p>常用的 class、id、属性 选择器都可以使用 <code>document.querySelector</code> 或 <code>document.querySelectorAll</code> 替代。区别是</p>
<ul>
<li><p><code>document.querySelector</code> 返回第一个匹配的 Element</p>
</li>
<li><p><code>document.querySelectorAll</code> 返回所有匹配的 Element 组成的 NodeList。它可以通过 <code>[].slice.call()</code> 把它转成 Array</p>
</li>
<li><p>如果匹配不到任何 Element，jQuery 返回空数组 <code>[]</code>，但 <code>document.querySelector</code> 返回 <code>null</code>，注意空指针异常。当找不到时，也可以使用 <code>||</code> 设置默认的值，如 <code>document.querySelectorAll(selector) || []</code></p>
</li>
</ul>
<blockquote>
<p>注意：<code>document.querySelector</code> 和 <code>document.querySelectorAll</code> 性能很<strong>差</strong>。如果想提高性能，尽量使用 <code>document.getElementById</code>、<code>document.getElementsByClassName</code> 或 <code>document.getElementsByTagName</code>。</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p><a href="#1.0">1.0</a> <a name="1.0"></a> Query by selector</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'selector'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'selector'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.1">1.1</a> <a name="1.1"></a> Query by class</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'css'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.2">1.2</a> <a name="1.2"></a> Query by id</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'#id'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#id'</span>);</div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'id'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.3">1.3</a> <a name="1.3"></a> Query by attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'a[target=_blank]'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'a[target=_blank]'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.4">1.4</a> <a name="1.4"></a> Find sth.</p>
<ul>
<li><p>Find nodes</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.find(<span class="string">'li'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">el.querySelectorAll(<span class="string">'li'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Find body</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'body'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.body;</div></pre></td></tr></table></figure>
</li>
<li><p>Find Attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.attr(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">e.getAttribute(<span class="string">'foo'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Find data attribute</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.data(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="comment">// using getAttribute</span></div><div class="line">el.getAttribute(<span class="string">'data-foo'</span>);</div><div class="line"><span class="comment">// you can also use `dataset` if only need to support IE 11+</span></div><div class="line">el.dataset[<span class="string">'foo'</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.5">1.5</a> <a name="1.5"></a> Sibling/Previous/Next Elements</p>
<ul>
<li><p>Sibling elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.siblings();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">[].filter.call(el.parentNode.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> child !== el;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Previous elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.prev();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">el.previousElementSibling;</div></pre></td></tr></table></figure>
</li>
<li><p>Next elements</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// next</span></div><div class="line">$el.next();</div><div class="line">el.nextElementSibling;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.6">1.6</a> <a name="1.6"></a> Closest</p>
<p>Closest 获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.closest(queryString);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">closest</span>(<span class="params">el, selector</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (el) &#123;</div><div class="line">    <span class="keyword">if</span> (matchesSelector.call(el, selector)) &#123;</div><div class="line">      <span class="keyword">return</span> el;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      el = el.parentElement;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.7">1.7</a> <a name="1.7"></a> Parents Until</p>
<p>获取当前每一个匹配元素集的祖先，不包括匹配元素的本身。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$el.parentsUntil(selector, filter);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parentsUntil</span>(<span class="params">el, selector, filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> result = [];</div><div class="line">  <span class="keyword">const</span> matchesSelector = el.matches || el.webkitMatchesSelector || el.mozMatchesSelector || el.msMatchesSelector;</div><div class="line"></div><div class="line">  <span class="comment">// match start from parent</span></div><div class="line">  el = el.parentElement;</div><div class="line">  <span class="keyword">while</span> (el &amp;&amp; !matchesSelector.call(el, selector)) &#123;</div><div class="line">    <span class="keyword">if</span> (!filter) &#123;</div><div class="line">      result.push(el);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (matchesSelector.call(el, filter)) &#123;</div><div class="line">        result.push(el);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    el = el.parentElement;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="#1.8">1.8</a> <a name="1.8"></a> Form</p>
<ul>
<li><p>Input/Textarea</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(<span class="string">'#my-input'</span>).val();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#my-input'</span>).value;</div></pre></td></tr></table></figure>
</li>
<li><p>Get index of e.currentTarget between <code>.radio</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$(e.currentTarget).index(<span class="string">'.radio'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">[].indexOf.call(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.radio'</span>), e.currentTarget);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><a href="#1.9">1.9</a> <a name="1.9"></a> Iframe Contents</p>
<p>jQuery 对象的 iframe <code>contents()</code> 返回的是 iframe 内的 <code>document</code></p>
<ul>
<li><p>Iframe contents</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$iframe.contents();</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">iframe.contentDocument;</div></pre></td></tr></table></figure>
</li>
<li><p>Iframe Query</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// jQuery</span></div><div class="line">$iframe.contents().find(<span class="string">'.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Native</span></div><div class="line">iframe.contentDocument.querySelectorAll(<span class="string">'.css'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/oneuijs/You-Dont-Need-jQuery&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/oneuijs/You-Dont-Need-jQuery&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用的 class、id、属性 选择器都可以使用 &lt;code&gt;document.querySelector&lt;/code&gt; 或 &lt;code&gt;document.querySelectorAll&lt;/code&gt; 替代。区别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelector&lt;/code&gt; 返回第一个匹配的 Element&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;document.querySelectorAll&lt;/code&gt; 返回所有匹配的 Element 组成的 NodeList。它可以通过 &lt;code&gt;[].slice.call()&lt;/code&gt; 把它转成 Array&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果匹配不到任何 Element，jQuery 返回空数组 &lt;code&gt;[]&lt;/code&gt;，但 &lt;code&gt;document.querySelector&lt;/code&gt; 返回 &lt;code&gt;null&lt;/code&gt;，注意空指针异常。当找不到时，也可以使用 &lt;code&gt;||&lt;/code&gt; 设置默认的值，如 &lt;code&gt;document.querySelectorAll(selector) || []&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;document.querySelector&lt;/code&gt; 和 &lt;code&gt;document.querySelectorAll&lt;/code&gt; 性能很&lt;strong&gt;差&lt;/strong&gt;。如果想提高性能，尽量使用 &lt;code&gt;document.getElementById&lt;/code&gt;、&lt;code&gt;document.getElementsByClassName&lt;/code&gt; 或 &lt;code&gt;document.getElementsByTagName&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Translation" scheme="http://yoursite.com/categories/Translation/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title> MongoDB 文档操作 </title>
    <link href="http://yoursite.com/2017/03/28/2017-03-28-mongodb-document-query/"/>
    <id>http://yoursite.com/2017/03/28/2017-03-28-mongodb-document-query/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2017-07-28T02:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p><em>语法格式</em></p>
<p><code>insert()</code> 方法的基本格式为:<br><code>&gt;db.COLLECTION_NAME.insert(document)</code></p>
<p><em>范例1</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.insert(</div><div class="line">  &#123;</div><div class="line">    &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">    &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">    &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">    &quot;by&quot;: &quot;Freak&quot;,</div><div class="line">    &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">    &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">    &quot;likes&quot;: &quot;100&quot;</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>mycol 是上一节所创建的集合的名称。如果数据库中不存在该集合，那么MongoDB会创建该集合，并向其中插入文档。</p>
<p>在插入的文档中，如果我们没有指定<code>_id</code>参数，那么MongoDB会自动为文档指定一个唯一的 ID。<br><code>_id</code>是一个 12 字节长的 16 进制数，这 12 个字节的分配如下:</p>
<p><code>_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id, 3 bytes incrementer)</code></p>
<p>你还可以将用 <code>insert()</code> 方法传入一个文档数组，范例如下:</p>
<p><em>范例2</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&gt;db.post.insert([</div><div class="line">  &#123;</div><div class="line">    title: &apos;MongoDB Overview&apos;,</div><div class="line">    description: &apos;MongoDB is no sql database&apos;,</div><div class="line">    by: &apos;tutorials point&apos;,</div><div class="line">    url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    title: &apos;NoSQL Database&apos;,</div><div class="line">    description: &apos;NoSQL database doesn&apos;t have tables&apos;,</div><div class="line">    by: &apos;tutorials point&apos;,</div><div class="line">    url: &apos;http://www.tutorialspoint.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 20,</div><div class="line">    comments: [</div><div class="line">      &#123;</div><div class="line">        user:&apos;user1&apos;,</div><div class="line">        message: &apos;My first comment&apos;,</div><div class="line">        dateCreated: new Date(2013,11,10,2,35),</div><div class="line">        like: 0</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">])</div></pre></td></tr></table></figure>
<h4 id="save"><a href="#save" class="headerlink" title="save()"></a>save()</h4><p>如果没有指定文档的_id，那么<code>save()</code>和<code>insert()</code>完全一样。</p>
<p>如果指定了_id，那么它就会覆盖掉<code>save()</code>方法中指定_id的文档的全部数据。</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>查询 MongoDB 集合中的数据，使用 <code>find()</code> 方法。</p>
<p><em>语法格式</em></p>
<p><code>find()</code> 方法基本格式为：</p>
<p><code>&gt;db.COLLECTION_NAME.find()</code></p>
<p><code>find()</code> 会以非结构化的方式来显示所有文档</p>
<h4 id="pretty"><a href="#pretty" class="headerlink" title="pretty()"></a>pretty()</h4><p>以结构化方式显示结果，使用 <code>pretty()</code>方法。</p>
<p><em>语法格式</em></p>
<p><code>&gt;db.COLLECTION_NAME.find().pretty()</code></p>
<p><em>范例</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find().pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Freak&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>find()</code>还有一个扩展方法<code>findOne()</code>，只返回一个文档。</p>
</blockquote>
<h4 id="MongoDB-中类似WHERE子句的语句"><a href="#MongoDB-中类似WHERE子句的语句" class="headerlink" title="MongoDB 中类似WHERE子句的语句"></a>MongoDB 中类似WHERE子句的语句</h4><table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">格式</th>
<th style="text-align:center">范例</th>
<th style="text-align:center">RDBMS中的类似语句</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:&lt;value&gt;}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;by&quot;:&quot;Freak&quot;}).pretty()</code></td>
<td style="text-align:center"><code>where by = &#39;Freak&#39;</code></td>
</tr>
<tr>
<td style="text-align:center">小于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$lt:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &lt; 50</code></td>
</tr>
<tr>
<td style="text-align:center">小于或等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$lte:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &lt;= 50</code></td>
</tr>
<tr>
<td style="text-align:center">大于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$gt:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &gt; 50</code></td>
</tr>
<tr>
<td style="text-align:center">大于或等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$gte:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes &gt;= 50</code></td>
</tr>
<tr>
<td style="text-align:center">不等于</td>
<td style="text-align:center"><code>{&lt;key&gt;:{$ne:&lt;value&gt;}}</code></td>
<td style="text-align:center"><code>db.mycol.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>
<td style="text-align:center"><code>where likes != 50</code></td>
</tr>
</tbody>
</table>
<h4 id="MongoDB中的AND条件"><a href="#MongoDB中的AND条件" class="headerlink" title="MongoDB中的AND条件"></a>MongoDB中的AND条件</h4><p><em>语法格式</em></p>
<p>在 <code>find()</code> 方法中，如果传入多个键，并用逗号( , )分隔它们，那么 MongoDB 会把它看成是 AND 条件。AND 条件的基本语法格式为:</p>
<p><code>&gt;db.mycol.find({key1:value1, key2:value2}).pretty()</code></p>
<p><em>范例</em></p>
<p>下例将展示所有由 “Freak” 发表的标题为 “MongoDB Overview” 的教程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;&quot;by&quot;:&quot;tutorials point&quot;,&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Freak&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>对于上例这种情况，RDBMS 采用的 WHERE 子句将会是:</p>
<p><code>where by=&#39;tutorials point&#39; AND title=&#39;MongoDB Overview&#39;</code></p>
<p>你可以在 find 子句中传入任意的键值对。</p>
<h4 id="MongoDB中的OR条件"><a href="#MongoDB中的OR条件" class="headerlink" title="MongoDB中的OR条件"></a>MongoDB中的OR条件</h4><p><em>语法格式</em></p>
<p>若基于OR条件来查询文档，可以使用关键字 <code>$or</code>。OR条件的基本语法格式为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(</div><div class="line">  &#123;</div><div class="line">    $or: [</div><div class="line">      &#123;key1: value1&#125;, &#123;key2:value2&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">).pretty()</div></pre></td></tr></table></figure>
<p><em>范例</em></p>
<p>下例将展示所有由 “Freak” 发表的或标题为 “MongoDB Overview” 的教程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;$or:[&#123;&quot;by&quot;:&quot;tutorials point&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Freak&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h4 id="结合使用AND与OR条件"><a href="#结合使用AND与OR条件" class="headerlink" title="结合使用AND与OR条件"></a>结合使用AND与OR条件</h4><p><em>范例</em></p>
<p>下例所展示文档的条件为:喜欢数大于100，标题是“MongoDB Overview”，或者是由“Freak” 所发表的。相应的SQL WHERE子句为:<code>where likes&gt;10 AND (by = &#39;tutorials point&#39; OR title = &#39;MongoDB Overview&#39;)</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.find(&#123;&quot;likes&quot;: &#123;$gt:10&#125;, $or: [&#123;&quot;by&quot;: &quot;Freak&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB Overview&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">  &quot;_id&quot;: ObjectId(7df78ad8902c),</div><div class="line">  &quot;title&quot;: &quot;MongoDB Overview&quot;,</div><div class="line">  &quot;description&quot;: &quot;MongoDB is no sql database&quot;,</div><div class="line">  &quot;by&quot;: &quot;Freak&quot;,</div><div class="line">  &quot;url&quot;: &quot;https://rockjins.js.org&quot;,</div><div class="line">  &quot;tags&quot;: [&quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot;],</div><div class="line">  &quot;likes&quot;: &quot;100&quot;</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><p>MongoDB 中的 <code>update()</code> 与 <code>save()</code> 方法都能用于更新集合中的文档。 <code>update()</code> 方法更新已有文档中的值，而 <code>save()</code> 方法则是用传入该方法的文档来替换已有文档。</p>
<h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update()方法"></a>update()方法</h4><p><code>update()</code>方法更新已有文档中的值。</p>
<p><em>语法格式</em></p>
<p><code>update()</code> 方法基本格式如下:</p>
<p><code>&gt;db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)</code></p>
<p><em>范例</em></p>
<p>假如mycol集合中有下列数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<p>下面的例子将把文档原标题 ‘MongoDB Overview’ 替换为新的标题 ‘New MongoDB Tutorial’。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.update(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;New MongoDB Tutorial&apos;&#125;&#125;)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;New MongoDB Tutorial&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>MongoDB默认只更新单个文档，要想更新多个文档，需要把参数<code>multi</code>设为<code>true</code>。</p>
<p><code>&gt;db.mycol.update({&#39;title&#39;:&#39;MongoDB Overview&#39;},{$set:{&#39;title&#39;:&#39;New MongoDB Tutorial&#39;}},{multi:true})</code></p>
<h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h4><p><code>save()</code> 方法利用传入该方法的文档来替换已有文档。</p>
<p><em>语法格式</em></p>
<p><code>save()</code> 方法基本语法格式如下:</p>
<p><code>&gt;db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})</code></p>
<p><em>范例</em></p>
<p>下例用_id为’5983548781331adf45ec5’的文档代替原有文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.save(</div><div class="line">  &#123;</div><div class="line">    &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Tutorials Point New Topic&quot;, &quot;by&quot;:&quot;Tutorials Point&quot;</div><div class="line">  &#125;</div><div class="line">)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;Tutorials Point New Topic&quot;, &quot;by&quot;:&quot;Tutorials Point&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><h4 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a>remove()方法</h4><p>MongoDB利用 <code>remove()</code> 方法 清除集合中的文档。它有2个可选参数:</p>
<ul>
<li>deletion criteria:(可选)删除文档的标准。</li>
<li>justOne:(可选)如果设为true或1，则只删除一个文档。</li>
</ul>
<p><em>语法格式</em></p>
<p><code>remove()</code> 方法的基本语法格式如下所示:<br><code>&gt;db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)</code></p>
<p><em>范例</em></p>
<p>假如 mycol 集合中包含下列数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec5), &quot;title&quot;:&quot;MongoDB Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div></pre></td></tr></table></figure>
<p>下面我们将删除其中所有标题为 ‘MongoDB Overview’ 的文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.remove(&#123;&apos;title&apos;:&apos;MongoDB Overview&apos;&#125;)</div><div class="line">&gt;db.mycol.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec6), &quot;title&quot;:&quot;NoSQL Overview&quot;&#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(5983548781331adf45ec7), &quot;title&quot;:&quot;Tutorials Point Overview&quot;&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<h4 id="只删除一个文档"><a href="#只删除一个文档" class="headerlink" title="只删除一个文档"></a>只删除一个文档</h4><p>如果有多个记录，而你只想删除第一条记录，那么就设置<code>remove()</code>方法中的<code>justOne</code>参数：</p>
<p><code>&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</code></p>
<h4 id="删除所有文档"><a href="#删除所有文档" class="headerlink" title="删除所有文档"></a>删除所有文档</h4><p>如果没有指定删除标准，则 MongoDB 会将集合中所有文档都予以删除。这等同于 SQL 中的 truncate 命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;db.mycol.remove()</div><div class="line">&gt;db.mycol.find()</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>本文作者：余震（Freak）<br>本文出处：<a href="https://rockjins.js.org" target="_blank" rel="external">Rockjins Blog</a><br>版权声明：本博客所有文章除特别声明外，均采用 <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/cn/" target="_blank" rel="external">CC BY-NC-SA 3.0 CN</a>许可协议。转载请注明出处！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插入文档&quot;&gt;&lt;a href=&quot;#插入文档&quot; class=&quot;headerlink&quot; title=&quot;插入文档&quot;&gt;&lt;/a&gt;插入文档&lt;/h3&gt;&lt;h4 id=&quot;insert&quot;&gt;&lt;a href=&quot;#insert&quot; class=&quot;headerlink&quot; title=&quot;insert()&quot;&gt;&lt;/a&gt;insert()&lt;/h4&gt;&lt;p&gt;&lt;em&gt;语法格式&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;insert()&lt;/code&gt; 方法的基本格式为:&lt;br&gt;&lt;code&gt;&amp;gt;db.COLLECTION_NAME.insert(document)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;范例1&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;db.mycol.insert(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;_id&amp;quot;: ObjectId(7df78ad8902c),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;title&amp;quot;: &amp;quot;MongoDB Overview&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;description&amp;quot;: &amp;quot;MongoDB is no sql database&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;by&amp;quot;: &amp;quot;Freak&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;url&amp;quot;: &amp;quot;https://rockjins.js.org&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;tags&amp;quot;: [&amp;quot;mongodb&amp;quot;, &amp;quot;database&amp;quot;, &amp;quot;NoSQL&amp;quot;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;likes&amp;quot;: &amp;quot;100&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
</feed>
